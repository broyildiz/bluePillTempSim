
BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005370  08005370  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005370  08005370  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005370  08005370  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005374  08005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e54  200001dc  08005554  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001030  08005554  00021030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cce  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002561  00000000  00000000  00030ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b98  00000000  00000000  00033438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  00033fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000199a9  00000000  00000000  00034a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b8a6  00000000  00000000  0004e411  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a858  00000000  00000000  00059cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e450f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038fc  00000000  00000000  000e458c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001dc 	.word	0x200001dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e5c 	.word	0x08004e5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e0 	.word	0x200001e0
 8000148:	08004e5c 	.word	0x08004e5c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <FL_clean>:
 */

#include "FL.h"

void FL_clean(I2C_HandleTypeDef hi2c2, ADC_HandleTypeDef hadc1)
{
 8000160:	b084      	sub	sp, #16
 8000162:	b5b0      	push	{r4, r5, r7, lr}
 8000164:	b082      	sub	sp, #8
 8000166:	af00      	add	r7, sp, #0
 8000168:	f107 0418 	add.w	r4, r7, #24
 800016c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int i;
	memset(&command, 0, sizeof(command));
 8000170:	2294      	movs	r2, #148	; 0x94
 8000172:	2100      	movs	r1, #0
 8000174:	4817      	ldr	r0, [pc, #92]	; (80001d4 <FL_clean+0x74>)
 8000176:	f003 fdb4 	bl	8003ce2 <memset>
	command.i2c_scan_cmd.i2c_handle = hi2c2;
 800017a:	4b16      	ldr	r3, [pc, #88]	; (80001d4 <FL_clean+0x74>)
 800017c:	3304      	adds	r3, #4
 800017e:	f107 0118 	add.w	r1, r7, #24
 8000182:	2254      	movs	r2, #84	; 0x54
 8000184:	4618      	mov	r0, r3
 8000186:	f003 fda1 	bl	8003ccc <memcpy>
	command.adc_get_cmd.adc_handle = hadc1;
 800018a:	4b12      	ldr	r3, [pc, #72]	; (80001d4 <FL_clean+0x74>)
 800018c:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8000190:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8000194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80001a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(i = 0; i < LINE_BUFLEN; i++)
 80001a4:	2300      	movs	r3, #0
 80001a6:	607b      	str	r3, [r7, #4]
 80001a8:	e008      	b.n	80001bc <FL_clean+0x5c>
		input.line_rx_buffer[i] = 0;
 80001aa:	4a0b      	ldr	r2, [pc, #44]	; (80001d8 <FL_clean+0x78>)
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	4413      	add	r3, r2
 80001b0:	3301      	adds	r3, #1
 80001b2:	2200      	movs	r2, #0
 80001b4:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LINE_BUFLEN; i++)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	3301      	adds	r3, #1
 80001ba:	607b      	str	r3, [r7, #4]
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001c2:	dbf2      	blt.n	80001aa <FL_clean+0x4a>

}
 80001c4:	bf00      	nop
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80001ce:	b004      	add	sp, #16
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000618 	.word	0x20000618
 80001d8:	20000208 	.word	0x20000208

080001dc <FL_uart_decode>:

int FL_uart_decode()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
	FL_debug("Entered FL_uart_decode function");
 80001e2:	4847      	ldr	r0, [pc, #284]	; (8000300 <FL_uart_decode+0x124>)
 80001e4:	f000 f96a 	bl	80004bc <FL_debug>

	char delim[2] = ","; 	// This string will be used to parse the main input string
 80001e8:	232c      	movs	r3, #44	; 0x2c
 80001ea:	80bb      	strh	r3, [r7, #4]
	char *token;			// This pointer will hold current parsed string
	memset(arg_buffer, '\0', sizeof(arg_buffer));
 80001ec:	2228      	movs	r2, #40	; 0x28
 80001ee:	2100      	movs	r1, #0
 80001f0:	4844      	ldr	r0, [pc, #272]	; (8000304 <FL_uart_decode+0x128>)
 80001f2:	f003 fd76 	bl	8003ce2 <memset>
	memset(single_arg, '\0',  sizeof(single_arg));
 80001f6:	2280      	movs	r2, #128	; 0x80
 80001f8:	2100      	movs	r1, #0
 80001fa:	4843      	ldr	r0, [pc, #268]	; (8000308 <FL_uart_decode+0x12c>)
 80001fc:	f003 fd71 	bl	8003ce2 <memset>
	arg_cnt = 0;
 8000200:	4b42      	ldr	r3, [pc, #264]	; (800030c <FL_uart_decode+0x130>)
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
	 * source 2, storing the token:
	 * https://www.tutorialspoint.com/c_standard_library/c_function_strtok.htm
	 */

	/* get the first token */
	token = strtok(input.line_rx_buffer, delim);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4619      	mov	r1, r3
 800020a:	4841      	ldr	r0, [pc, #260]	; (8000310 <FL_uart_decode+0x134>)
 800020c:	f003 fe0a 	bl	8003e24 <strtok>
 8000210:	60f8      	str	r0, [r7, #12]

	/* walk through other tokens */
	while( token != NULL ) {
 8000212:	e012      	b.n	800023a <FL_uart_decode+0x5e>
		printf( " %s\n", token );
 8000214:	68f9      	ldr	r1, [r7, #12]
 8000216:	483f      	ldr	r0, [pc, #252]	; (8000314 <FL_uart_decode+0x138>)
 8000218:	f003 fd6c 	bl	8003cf4 <iprintf>
		arg_buffer[arg_cnt++] = token; // Store the token for later use
 800021c:	4b3b      	ldr	r3, [pc, #236]	; (800030c <FL_uart_decode+0x130>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	1c5a      	adds	r2, r3, #1
 8000222:	493a      	ldr	r1, [pc, #232]	; (800030c <FL_uart_decode+0x130>)
 8000224:	600a      	str	r2, [r1, #0]
 8000226:	4937      	ldr	r1, [pc, #220]	; (8000304 <FL_uart_decode+0x128>)
 8000228:	68fa      	ldr	r2, [r7, #12]
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		token = strtok(NULL, delim);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4619      	mov	r1, r3
 8000232:	2000      	movs	r0, #0
 8000234:	f003 fdf6 	bl	8003e24 <strtok>
 8000238:	60f8      	str	r0, [r7, #12]
	while( token != NULL ) {
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d1e9      	bne.n	8000214 <FL_uart_decode+0x38>
	}

	// Some debugging
	int i;
	if(debug_enable)
 8000240:	4b35      	ldr	r3, [pc, #212]	; (8000318 <FL_uart_decode+0x13c>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d013      	beq.n	8000270 <FL_uart_decode+0x94>
	{
		for(i = 0; i < arg_cnt; i++)
 8000248:	2300      	movs	r3, #0
 800024a:	60bb      	str	r3, [r7, #8]
 800024c:	e00b      	b.n	8000266 <FL_uart_decode+0x8a>
		{
			printf("Arg buffer [%d] = %s\n", i, arg_buffer[i]);
 800024e:	4a2d      	ldr	r2, [pc, #180]	; (8000304 <FL_uart_decode+0x128>)
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000256:	461a      	mov	r2, r3
 8000258:	68b9      	ldr	r1, [r7, #8]
 800025a:	4830      	ldr	r0, [pc, #192]	; (800031c <FL_uart_decode+0x140>)
 800025c:	f003 fd4a 	bl	8003cf4 <iprintf>
		for(i = 0; i < arg_cnt; i++)
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	3301      	adds	r3, #1
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	4b29      	ldr	r3, [pc, #164]	; (800030c <FL_uart_decode+0x130>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	429a      	cmp	r2, r3
 800026e:	dbee      	blt.n	800024e <FL_uart_decode+0x72>
		}
	}

	// The first argument is the name of the command
	// Determine which command is sent
	command.cmd_no = FL_get_cmd(arg_buffer[0]);
 8000270:	4b24      	ldr	r3, [pc, #144]	; (8000304 <FL_uart_decode+0x128>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4618      	mov	r0, r3
 8000276:	f000 f863 	bl	8000340 <FL_get_cmd>
 800027a:	4602      	mov	r2, r0
 800027c:	4b28      	ldr	r3, [pc, #160]	; (8000320 <FL_uart_decode+0x144>)
 800027e:	601a      	str	r2, [r3, #0]

	if(command.cmd_no == COMMAND_ERROR)
 8000280:	4b27      	ldr	r3, [pc, #156]	; (8000320 <FL_uart_decode+0x144>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d107      	bne.n	8000298 <FL_uart_decode+0xbc>
	{
		FL_error_handler("FL.c", "FL_uart_decode","Unsupported Command");
 8000288:	4a26      	ldr	r2, [pc, #152]	; (8000324 <FL_uart_decode+0x148>)
 800028a:	4927      	ldr	r1, [pc, #156]	; (8000328 <FL_uart_decode+0x14c>)
 800028c:	4827      	ldr	r0, [pc, #156]	; (800032c <FL_uart_decode+0x150>)
 800028e:	f000 f8fd 	bl	800048c <FL_error_handler>
		return -1;
 8000292:	f04f 33ff 	mov.w	r3, #4294967295
 8000296:	e02f      	b.n	80002f8 <FL_uart_decode+0x11c>

	/*
	 * Preparation for argument conversion
	 * Each command has its own arguments and should be parsed accordingly
	 */
	arg_cnt--; 	// The first argument is the command name, compensate for it
 8000298:	4b1c      	ldr	r3, [pc, #112]	; (800030c <FL_uart_decode+0x130>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a1b      	ldr	r2, [pc, #108]	; (800030c <FL_uart_decode+0x130>)
 80002a0:	6013      	str	r3, [r2, #0]

	switch(command.cmd_no)
 80002a2:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <FL_uart_decode+0x144>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d01f      	beq.n	80002ea <FL_uart_decode+0x10e>
 80002aa:	2b03      	cmp	r3, #3
 80002ac:	d01f      	beq.n	80002ee <FL_uart_decode+0x112>
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d117      	bne.n	80002e2 <FL_uart_decode+0x106>
	{
		case COMMAND_SET_RES:
		{
			if(arg_cnt != SET_RES_ARGS)
 80002b2:	4b16      	ldr	r3, [pc, #88]	; (800030c <FL_uart_decode+0x130>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b02      	cmp	r3, #2
 80002b8:	d00c      	beq.n	80002d4 <FL_uart_decode+0xf8>
			{
				FL_error_handler("FL.c", "FL_uart_decode","Wrong number of arguments arguments\n");
 80002ba:	4a1d      	ldr	r2, [pc, #116]	; (8000330 <FL_uart_decode+0x154>)
 80002bc:	491a      	ldr	r1, [pc, #104]	; (8000328 <FL_uart_decode+0x14c>)
 80002be:	481b      	ldr	r0, [pc, #108]	; (800032c <FL_uart_decode+0x150>)
 80002c0:	f000 f8e4 	bl	800048c <FL_error_handler>
				printf("Expected %d arguments, got %d arguments\n", SET_RES_ARGS, arg_cnt);
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <FL_uart_decode+0x130>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	461a      	mov	r2, r3
 80002ca:	2102      	movs	r1, #2
 80002cc:	4819      	ldr	r0, [pc, #100]	; (8000334 <FL_uart_decode+0x158>)
 80002ce:	f003 fd11 	bl	8003cf4 <iprintf>
			}
			else
			{
				FL_convert_args(command.cmd_no, arg_buffer);
			}
		}break;
 80002d2:	e00d      	b.n	80002f0 <FL_uart_decode+0x114>
				FL_convert_args(command.cmd_no, arg_buffer);
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <FL_uart_decode+0x144>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	490a      	ldr	r1, [pc, #40]	; (8000304 <FL_uart_decode+0x128>)
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 f88c 	bl	80003f8 <FL_convert_args>
		}break;
 80002e0:	e006      	b.n	80002f0 <FL_uart_decode+0x114>
		{
			// No arguments to gather
		}break;
		default:
		{
			FL_debug("Don't know about this default case1");
 80002e2:	4815      	ldr	r0, [pc, #84]	; (8000338 <FL_uart_decode+0x15c>)
 80002e4:	f000 f8ea 	bl	80004bc <FL_debug>
 80002e8:	e002      	b.n	80002f0 <FL_uart_decode+0x114>
		}break;
 80002ea:	bf00      	nop
 80002ec:	e000      	b.n	80002f0 <FL_uart_decode+0x114>
		}break;
 80002ee:	bf00      	nop
		}
	}
	FL_debug("Exiting FL_uart_decode function");
 80002f0:	4812      	ldr	r0, [pc, #72]	; (800033c <FL_uart_decode+0x160>)
 80002f2:	f000 f8e3 	bl	80004bc <FL_debug>
	return 0;
 80002f6:	2300      	movs	r3, #0
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	08004e74 	.word	0x08004e74
 8000304:	200006b0 	.word	0x200006b0
 8000308:	20000ae0 	.word	0x20000ae0
 800030c:	20000204 	.word	0x20000204
 8000310:	20000209 	.word	0x20000209
 8000314:	08004e94 	.word	0x08004e94
 8000318:	20000b60 	.word	0x20000b60
 800031c:	08004e9c 	.word	0x08004e9c
 8000320:	20000618 	.word	0x20000618
 8000324:	08004eb4 	.word	0x08004eb4
 8000328:	08004ec8 	.word	0x08004ec8
 800032c:	08004ed8 	.word	0x08004ed8
 8000330:	08004ee0 	.word	0x08004ee0
 8000334:	08004f08 	.word	0x08004f08
 8000338:	08004f34 	.word	0x08004f34
 800033c:	08004f58 	.word	0x08004f58

08000340 <FL_get_cmd>:
/*
 *  This function takes the first argument passed to the FL and tries to
 *  determine which command is sent
 */
int FL_get_cmd(char *str)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b08a      	sub	sp, #40	; 0x28
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	FL_debug("Entered FL_get_cmd function");
 8000348:	4825      	ldr	r0, [pc, #148]	; (80003e0 <FL_get_cmd+0xa0>)
 800034a:	f000 f8b7 	bl	80004bc <FL_debug>

	char set_res[] = "set_res";
 800034e:	4a25      	ldr	r2, [pc, #148]	; (80003e4 <FL_get_cmd+0xa4>)
 8000350:	f107 031c 	add.w	r3, r7, #28
 8000354:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000358:	e883 0003 	stmia.w	r3, {r0, r1}
	char i2c_scan[] = "i2c_scan";
 800035c:	4a22      	ldr	r2, [pc, #136]	; (80003e8 <FL_get_cmd+0xa8>)
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	ca07      	ldmia	r2, {r0, r1, r2}
 8000364:	c303      	stmia	r3!, {r0, r1}
 8000366:	701a      	strb	r2, [r3, #0]
	char adc_get[] = "adc_get";
 8000368:	4a20      	ldr	r2, [pc, #128]	; (80003ec <FL_get_cmd+0xac>)
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000372:	e883 0003 	stmia.w	r3, {r0, r1}
	int ret = COMMAND_ERROR;
 8000376:	2300      	movs	r3, #0
 8000378:	627b      	str	r3, [r7, #36]	; 0x24

	if(strcmp(str, set_res) == 0)
 800037a:	f107 031c 	add.w	r3, r7, #28
 800037e:	4619      	mov	r1, r3
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f7ff fee3 	bl	800014c <strcmp>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d104      	bne.n	8000396 <FL_get_cmd+0x56>
	{
		FL_debug("command = set_res");
 800038c:	4818      	ldr	r0, [pc, #96]	; (80003f0 <FL_get_cmd+0xb0>)
 800038e:	f000 f895 	bl	80004bc <FL_debug>
		ret = COMMAND_SET_RES;
 8000392:	2301      	movs	r3, #1
 8000394:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if(strcmp(str, i2c_scan) == 0)
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	4619      	mov	r1, r3
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f7ff fed5 	bl	800014c <strcmp>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d104      	bne.n	80003b2 <FL_get_cmd+0x72>
	{
		FL_debug("command = set_res");
 80003a8:	4811      	ldr	r0, [pc, #68]	; (80003f0 <FL_get_cmd+0xb0>)
 80003aa:	f000 f887 	bl	80004bc <FL_debug>
		ret = COMMAND_I2C_SCAN;
 80003ae:	2302      	movs	r3, #2
 80003b0:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if(strcmp(str, adc_get) == 0)
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	4619      	mov	r1, r3
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f7ff fec7 	bl	800014c <strcmp>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d104      	bne.n	80003ce <FL_get_cmd+0x8e>
	{
		FL_debug("command = set_res");
 80003c4:	480a      	ldr	r0, [pc, #40]	; (80003f0 <FL_get_cmd+0xb0>)
 80003c6:	f000 f879 	bl	80004bc <FL_debug>
		ret = COMMAND_ADC_GET;
 80003ca:	2303      	movs	r3, #3
 80003cc:	627b      	str	r3, [r7, #36]	; 0x24
//		{
//			FL_debug("command = unrecognized");
//			ret = COMMAND_ERROR;
//		}

	FL_debug("Exiting FL_get_cmd function");
 80003ce:	4809      	ldr	r0, [pc, #36]	; (80003f4 <FL_get_cmd+0xb4>)
 80003d0:	f000 f874 	bl	80004bc <FL_debug>
	return ret;
 80003d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3728      	adds	r7, #40	; 0x28
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	08004f78 	.word	0x08004f78
 80003e4:	08004fc4 	.word	0x08004fc4
 80003e8:	08004fcc 	.word	0x08004fcc
 80003ec:	08004fd8 	.word	0x08004fd8
 80003f0:	08004f94 	.word	0x08004f94
 80003f4:	08004fa8 	.word	0x08004fa8

080003f8 <FL_convert_args>:

int FL_convert_args(int cmd_no, char **args)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
	FL_debug("Entered FL_convert_args function");
 8000402:	481c      	ldr	r0, [pc, #112]	; (8000474 <FL_convert_args+0x7c>)
 8000404:	f000 f85a 	bl	80004bc <FL_debug>
	switch(cmd_no)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d12a      	bne.n	8000464 <FL_convert_args+0x6c>
	{
		case COMMAND_SET_RES:
		{
			// Copy a string from args into single_arg.
			// See FL.h for more details
			strcpy(single_arg, args[1]);
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	3304      	adds	r3, #4
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4619      	mov	r1, r3
 8000416:	4818      	ldr	r0, [pc, #96]	; (8000478 <FL_convert_args+0x80>)
 8000418:	f003 fcfc 	bl	8003e14 <strcpy>
			if(debug_enable)
 800041c:	4b17      	ldr	r3, [pc, #92]	; (800047c <FL_convert_args+0x84>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d003      	beq.n	800042c <FL_convert_args+0x34>
				printf("Single arg = %s\n", single_arg);
 8000424:	4914      	ldr	r1, [pc, #80]	; (8000478 <FL_convert_args+0x80>)
 8000426:	4816      	ldr	r0, [pc, #88]	; (8000480 <FL_convert_args+0x88>)
 8000428:	f003 fc64 	bl	8003cf4 <iprintf>
			command.set_res_cmd.digipot_no = atoi(single_arg);
 800042c:	4812      	ldr	r0, [pc, #72]	; (8000478 <FL_convert_args+0x80>)
 800042e:	f003 fc1f 	bl	8003c70 <atoi>
 8000432:	4602      	mov	r2, r0
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <FL_convert_args+0x8c>)
 8000436:	65da      	str	r2, [r3, #92]	; 0x5c

			strcpy(single_arg, args[2]);
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	3308      	adds	r3, #8
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4619      	mov	r1, r3
 8000440:	480d      	ldr	r0, [pc, #52]	; (8000478 <FL_convert_args+0x80>)
 8000442:	f003 fce7 	bl	8003e14 <strcpy>
			if(debug_enable)
 8000446:	4b0d      	ldr	r3, [pc, #52]	; (800047c <FL_convert_args+0x84>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d003      	beq.n	8000456 <FL_convert_args+0x5e>
				printf("Single arg = %s\n", single_arg);
 800044e:	490a      	ldr	r1, [pc, #40]	; (8000478 <FL_convert_args+0x80>)
 8000450:	480b      	ldr	r0, [pc, #44]	; (8000480 <FL_convert_args+0x88>)
 8000452:	f003 fc4f 	bl	8003cf4 <iprintf>
			command.set_res_cmd.res = atoi(single_arg);
 8000456:	4808      	ldr	r0, [pc, #32]	; (8000478 <FL_convert_args+0x80>)
 8000458:	f003 fc0a 	bl	8003c70 <atoi>
 800045c:	4602      	mov	r2, r0
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <FL_convert_args+0x8c>)
 8000460:	661a      	str	r2, [r3, #96]	; 0x60

		}break;
 8000462:	e002      	b.n	800046a <FL_convert_args+0x72>
		default:
		{
			FL_debug("Don't know about this default case2");
 8000464:	4808      	ldr	r0, [pc, #32]	; (8000488 <FL_convert_args+0x90>)
 8000466:	f000 f829 	bl	80004bc <FL_debug>
		}
	}

	return 0;
 800046a:	2300      	movs	r3, #0
	FL_debug("Exiting FL_convert_args function");
}
 800046c:	4618      	mov	r0, r3
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	08004fe0 	.word	0x08004fe0
 8000478:	20000ae0 	.word	0x20000ae0
 800047c:	20000b60 	.word	0x20000b60
 8000480:	08005004 	.word	0x08005004
 8000484:	20000618 	.word	0x20000618
 8000488:	08005018 	.word	0x08005018

0800048c <FL_error_handler>:


void FL_error_handler(char *file_name, char *function_name, char *msg)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	60f8      	str	r0, [r7, #12]
 8000494:	60b9      	str	r1, [r7, #8]
 8000496:	607a      	str	r2, [r7, #4]
	printf("ERROR in %s\t%s\n", file_name, function_name);
 8000498:	68ba      	ldr	r2, [r7, #8]
 800049a:	68f9      	ldr	r1, [r7, #12]
 800049c:	4805      	ldr	r0, [pc, #20]	; (80004b4 <FL_error_handler+0x28>)
 800049e:	f003 fc29 	bl	8003cf4 <iprintf>
	printf("message:\t%s\n", msg);
 80004a2:	6879      	ldr	r1, [r7, #4]
 80004a4:	4804      	ldr	r0, [pc, #16]	; (80004b8 <FL_error_handler+0x2c>)
 80004a6:	f003 fc25 	bl	8003cf4 <iprintf>
}
 80004aa:	bf00      	nop
 80004ac:	3710      	adds	r7, #16
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	0800503c 	.word	0x0800503c
 80004b8:	0800504c 	.word	0x0800504c

080004bc <FL_debug>:

void FL_debug(char *s)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	if(debug_enable)
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <FL_debug+0x20>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d002      	beq.n	80004d2 <FL_debug+0x16>
	{
		printf("%s\n",s);
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f003 fc99 	bl	8003e04 <puts>
	}
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000b60 	.word	0x20000b60

080004e0 <IOL_set_res>:
 */

#include "IOL.h"

void IOL_set_res()
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af02      	add	r7, sp, #8
	uint8_t wiper = 0x00;
 80004e6:	2300      	movs	r3, #0
 80004e8:	71fb      	strb	r3, [r7, #7]

	switch(command.set_res_cmd.digipot_no) /* According to the datasheet, the following values are the memory addresses of the individual subdigipots */
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <IOL_set_res+0x84>)
 80004ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80004ee:	2b03      	cmp	r3, #3
 80004f0:	d816      	bhi.n	8000520 <IOL_set_res+0x40>
 80004f2:	a201      	add	r2, pc, #4	; (adr r2, 80004f8 <IOL_set_res+0x18>)
 80004f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f8:	08000509 	.word	0x08000509
 80004fc:	0800050f 	.word	0x0800050f
 8000500:	08000515 	.word	0x08000515
 8000504:	0800051b 	.word	0x0800051b
	{
		case 0: wiper = 0x00; break;
 8000508:	2300      	movs	r3, #0
 800050a:	71fb      	strb	r3, [r7, #7]
 800050c:	e010      	b.n	8000530 <IOL_set_res+0x50>
		case 1: wiper = 0x01; break;
 800050e:	2301      	movs	r3, #1
 8000510:	71fb      	strb	r3, [r7, #7]
 8000512:	e00d      	b.n	8000530 <IOL_set_res+0x50>
		case 2: wiper = 0x06; break;
 8000514:	2306      	movs	r3, #6
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	e00a      	b.n	8000530 <IOL_set_res+0x50>
		case 3: wiper = 0x07; break;
 800051a:	2307      	movs	r3, #7
 800051c:	71fb      	strb	r3, [r7, #7]
 800051e:	e007      	b.n	8000530 <IOL_set_res+0x50>
		default:
		{
			FL_error_handler("IOL.c", "IOL_set_res", "Unsupported digipot number");
 8000520:	4a11      	ldr	r2, [pc, #68]	; (8000568 <IOL_set_res+0x88>)
 8000522:	4912      	ldr	r1, [pc, #72]	; (800056c <IOL_set_res+0x8c>)
 8000524:	4812      	ldr	r0, [pc, #72]	; (8000570 <IOL_set_res+0x90>)
 8000526:	f7ff ffb1 	bl	800048c <FL_error_handler>
			wiper = 0x10;
 800052a:	2310      	movs	r3, #16
 800052c:	71fb      	strb	r3, [r7, #7]
		}break;
 800052e:	bf00      	nop
	}

	uint16_t addr = 0x2c << 1;
 8000530:	2358      	movs	r3, #88	; 0x58
 8000532:	80bb      	strh	r3, [r7, #4]
	uint8_t tx[] = { wiper << 4, (uint8_t)command.set_res_cmd.res};
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	011b      	lsls	r3, r3, #4
 8000538:	b2db      	uxtb	r3, r3
 800053a:	703b      	strb	r3, [r7, #0]
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <IOL_set_res+0x84>)
 800053e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000540:	b2db      	uxtb	r3, r3
 8000542:	707b      	strb	r3, [r7, #1]
	uint16_t num = 2;
 8000544:	2302      	movs	r3, #2
 8000546:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Master_Transmit(&command.i2c_scan_cmd.i2c_handle, addr, tx, num, HAL_MAX_DELAY );
 8000548:	8878      	ldrh	r0, [r7, #2]
 800054a:	463a      	mov	r2, r7
 800054c:	88b9      	ldrh	r1, [r7, #4]
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	4603      	mov	r3, r0
 8000556:	4807      	ldr	r0, [pc, #28]	; (8000574 <IOL_set_res+0x94>)
 8000558:	f001 fd88 	bl	800206c <HAL_I2C_Master_Transmit>

}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000618 	.word	0x20000618
 8000568:	0800505c 	.word	0x0800505c
 800056c:	08005078 	.word	0x08005078
 8000570:	08005084 	.word	0x08005084
 8000574:	2000061c 	.word	0x2000061c

08000578 <IOL_i2c_scan>:



void IOL_i2c_scan()
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
	printf("Scanning I2C bus:\r\n");
 800057e:	4819      	ldr	r0, [pc, #100]	; (80005e4 <IOL_i2c_scan+0x6c>)
 8000580:	f003 fc40 	bl	8003e04 <puts>
	HAL_StatusTypeDef result;
	uint8_t i;
	for (i=1; i<128; i++)
 8000584:	2301      	movs	r3, #1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	e020      	b.n	80005cc <IOL_i2c_scan+0x54>
	   * &hi2c1 is the handle
	   * (uint16_t)(i<<1) is the i2c address left aligned
	   * retries 2
	   * timeout 2
	   */
	  result = HAL_I2C_IsDeviceReady(&command.i2c_scan_cmd.i2c_handle, (uint16_t)(i<<1), 2, 2);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	b29b      	uxth	r3, r3
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	b299      	uxth	r1, r3
 8000592:	2302      	movs	r3, #2
 8000594:	2202      	movs	r2, #2
 8000596:	4814      	ldr	r0, [pc, #80]	; (80005e8 <IOL_i2c_scan+0x70>)
 8000598:	f001 fe66 	bl	8002268 <HAL_I2C_IsDeviceReady>
 800059c:	4603      	mov	r3, r0
 800059e:	71bb      	strb	r3, [r7, #6]
	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80005a0:	79bb      	ldrb	r3, [r7, #6]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d002      	beq.n	80005ac <IOL_i2c_scan+0x34>
	  {
		  printf("."); // No ACK received at that address
 80005a6:	202e      	movs	r0, #46	; 0x2e
 80005a8:	f003 fbbc 	bl	8003d24 <putchar>
	  }
	  if (result == HAL_OK)
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d109      	bne.n	80005c6 <IOL_i2c_scan+0x4e>
	  {
		  printf("0x%X", i); // Received an ACK at that address
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	4619      	mov	r1, r3
 80005b6:	480d      	ldr	r0, [pc, #52]	; (80005ec <IOL_i2c_scan+0x74>)
 80005b8:	f003 fb9c 	bl	8003cf4 <iprintf>
		  command.i2c_scan_cmd.addr = i;
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <IOL_i2c_scan+0x78>)
 80005c2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	for (i=1; i<128; i++)
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	3301      	adds	r3, #1
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	dada      	bge.n	800058a <IOL_i2c_scan+0x12>
	  }
	}
	printf("\r\n");
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <IOL_i2c_scan+0x7c>)
 80005d6:	f003 fc15 	bl	8003e04 <puts>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	0800508c 	.word	0x0800508c
 80005e8:	2000061c 	.word	0x2000061c
 80005ec:	080050a0 	.word	0x080050a0
 80005f0:	20000618 	.word	0x20000618
 80005f4:	080050a8 	.word	0x080050a8

080005f8 <IOL_adc_get>:

void IOL_adc_get()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
		HAL_ADC_Start(&command.adc_get_cmd.adc_handle);
 80005fc:	4808      	ldr	r0, [pc, #32]	; (8000620 <IOL_adc_get+0x28>)
 80005fe:	f000 fdb5 	bl	800116c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&command.adc_get_cmd.adc_handle, HAL_MAX_DELAY);
 8000602:	f04f 31ff 	mov.w	r1, #4294967295
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <IOL_adc_get+0x28>)
 8000608:	f000 fe5e 	bl	80012c8 <HAL_ADC_PollForConversion>
		printf("\nADC Value = %d\n\n", HAL_ADC_GetValue(&command.adc_get_cmd.adc_handle));
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <IOL_adc_get+0x28>)
 800060e:	f000 ff55 	bl	80014bc <HAL_ADC_GetValue>
 8000612:	4603      	mov	r3, r0
 8000614:	4619      	mov	r1, r3
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <IOL_adc_get+0x2c>)
 8000618:	f003 fb6c 	bl	8003cf4 <iprintf>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000067c 	.word	0x2000067c
 8000624:	080050ac 	.word	0x080050ac

08000628 <LL_exec>:


#include "LL.h"

int LL_exec()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	switch(command.cmd_no)
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <LL_exec+0x40>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b02      	cmp	r3, #2
 8000632:	d009      	beq.n	8000648 <LL_exec+0x20>
 8000634:	2b03      	cmp	r3, #3
 8000636:	d00d      	beq.n	8000654 <LL_exec+0x2c>
 8000638:	2b01      	cmp	r3, #1
 800063a:	d10e      	bne.n	800065a <LL_exec+0x32>
	{
	case COMMAND_SET_RES:
	{
		IOL_set_res();
 800063c:	f7ff ff50 	bl	80004e0 <IOL_set_res>
		printf("Executed COMMAND_SET_RES\n");
 8000640:	480a      	ldr	r0, [pc, #40]	; (800066c <LL_exec+0x44>)
 8000642:	f003 fbdf 	bl	8003e04 <puts>
	}break;
 8000646:	e00b      	b.n	8000660 <LL_exec+0x38>
	case COMMAND_I2C_SCAN:
	{
		IOL_i2c_scan();
 8000648:	f7ff ff96 	bl	8000578 <IOL_i2c_scan>
		printf("Executed COMMAND_SET_RES\n");
 800064c:	4807      	ldr	r0, [pc, #28]	; (800066c <LL_exec+0x44>)
 800064e:	f003 fbd9 	bl	8003e04 <puts>
	}break;
 8000652:	e005      	b.n	8000660 <LL_exec+0x38>
	case COMMAND_ADC_GET:
	{
		IOL_adc_get();
 8000654:	f7ff ffd0 	bl	80005f8 <IOL_adc_get>
	}break;
 8000658:	e002      	b.n	8000660 <LL_exec+0x38>
	default:
	{
		printf("Dunno 3\n");
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <LL_exec+0x48>)
 800065c:	f003 fbd2 	bl	8003e04 <puts>
	}
	}
	return 0;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000618 	.word	0x20000618
 800066c:	080050c0 	.word	0x080050c0
 8000670:	080050dc 	.word	0x080050dc

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000676:	b0a1      	sub	sp, #132	; 0x84
 8000678:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fc3d 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f8b1 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f000 f9a1 	bl	80009c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000686:	f000 f975 	bl	8000974 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800068a:	f000 f945 	bl	8000918 <MX_I2C2_Init>
  MX_ADC1_Init();
 800068e:	f000 f905 	bl	800089c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	int i;
	int error;

	for(i = 0; i < LINE_BUFLEN; i++)
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	e008      	b.n	80006aa <main+0x36>
		input.line_rx_buffer[i] = 0;
 8000698:	4a42      	ldr	r2, [pc, #264]	; (80007a4 <main+0x130>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	3301      	adds	r3, #1
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LINE_BUFLEN; i++)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3301      	adds	r3, #1
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006b0:	dbf2      	blt.n	8000698 <main+0x24>

	// Reset some stuff
	input.byte_buffer_rx[0] = 0;
 80006b2:	4b3c      	ldr	r3, [pc, #240]	; (80007a4 <main+0x130>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
	input.char_counter = 0;
 80006b8:	4b3a      	ldr	r3, [pc, #232]	; (80007a4 <main+0x130>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	input.command_execute_flag = FALSE;
 80006c0:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <main+0x130>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	debug_enable = FALSE;
 80006c8:	4b37      	ldr	r3, [pc, #220]	; (80007a8 <main+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
	command.i2c_scan_cmd.i2c_handle = hi2c2;
 80006ce:	4b37      	ldr	r3, [pc, #220]	; (80007ac <main+0x138>)
 80006d0:	4a37      	ldr	r2, [pc, #220]	; (80007b0 <main+0x13c>)
 80006d2:	3304      	adds	r3, #4
 80006d4:	4611      	mov	r1, r2
 80006d6:	2254      	movs	r2, #84	; 0x54
 80006d8:	4618      	mov	r0, r3
 80006da:	f003 faf7 	bl	8003ccc <memcpy>
	command.adc_get_cmd.adc_handle = hadc1;
 80006de:	4b33      	ldr	r3, [pc, #204]	; (80007ac <main+0x138>)
 80006e0:	4a34      	ldr	r2, [pc, #208]	; (80007b4 <main+0x140>)
 80006e2:	f103 0464 	add.w	r4, r3, #100	; 0x64
 80006e6:	4615      	mov	r5, r2
 80006e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 80006f8:	2201      	movs	r2, #1
 80006fa:	492a      	ldr	r1, [pc, #168]	; (80007a4 <main+0x130>)
 80006fc:	482e      	ldr	r0, [pc, #184]	; (80007b8 <main+0x144>)
 80006fe:	f002 ff56 	bl	80035ae <HAL_UART_Receive_IT>

	FL_debug("starting the main function");
 8000702:	482e      	ldr	r0, [pc, #184]	; (80007bc <main+0x148>)
 8000704:	f7ff feda 	bl	80004bc <FL_debug>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == TRUE)
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <main+0x130>)
 800070a:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800070e:	2bff      	cmp	r3, #255	; 0xff
 8000710:	d1fa      	bne.n	8000708 <main+0x94>
	  {
		  HAL_GPIO_TogglePin(DebugLed_GPIO_Port, DebugLed_Pin);
 8000712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000716:	482a      	ldr	r0, [pc, #168]	; (80007c0 <main+0x14c>)
 8000718:	f001 fb56 	bl	8001dc8 <HAL_GPIO_TogglePin>
		  FL_debug("");
 800071c:	4829      	ldr	r0, [pc, #164]	; (80007c4 <main+0x150>)
 800071e:	f7ff fecd 	bl	80004bc <FL_debug>
		  input.command_execute_flag = FALSE;
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <main+0x130>)
 8000724:	2200      	movs	r2, #0
 8000726:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		  error = FL_uart_decode();
 800072a:	f7ff fd57 	bl	80001dc <FL_uart_decode>
 800072e:	6038      	str	r0, [r7, #0]

		  if(error)
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d004      	beq.n	8000740 <main+0xcc>
		  {
			  FL_error_handler("main.c", "main", "FL_uart_decode() returned an error\n");
 8000736:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <main+0x154>)
 8000738:	4924      	ldr	r1, [pc, #144]	; (80007cc <main+0x158>)
 800073a:	4825      	ldr	r0, [pc, #148]	; (80007d0 <main+0x15c>)
 800073c:	f7ff fea6 	bl	800048c <FL_error_handler>
		  }

		  printf("back in main.c\n");
 8000740:	4824      	ldr	r0, [pc, #144]	; (80007d4 <main+0x160>)
 8000742:	f003 fb5f 	bl	8003e04 <puts>
		  printf("Command set_res contents:\n");
 8000746:	4824      	ldr	r0, [pc, #144]	; (80007d8 <main+0x164>)
 8000748:	f003 fb5c 	bl	8003e04 <puts>
		  printf("\tdigipot   : %d\n", command.set_res_cmd.digipot_no);
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <main+0x138>)
 800074e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000750:	4619      	mov	r1, r3
 8000752:	4822      	ldr	r0, [pc, #136]	; (80007dc <main+0x168>)
 8000754:	f003 face 	bl	8003cf4 <iprintf>
		  printf("\tresistance: %d\n", command.set_res_cmd.res);
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <main+0x138>)
 800075a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800075c:	4619      	mov	r1, r3
 800075e:	4820      	ldr	r0, [pc, #128]	; (80007e0 <main+0x16c>)
 8000760:	f003 fac8 	bl	8003cf4 <iprintf>

		  LL_exec();
 8000764:	f7ff ff60 	bl	8000628 <LL_exec>
		  FL_clean(hi2c2, hadc1);
 8000768:	4e11      	ldr	r6, [pc, #68]	; (80007b0 <main+0x13c>)
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <main+0x140>)
 800076c:	ac11      	add	r4, sp, #68	; 0x44
 800076e:	461d      	mov	r5, r3
 8000770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000778:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800077c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000780:	4668      	mov	r0, sp
 8000782:	f106 0310 	add.w	r3, r6, #16
 8000786:	2244      	movs	r2, #68	; 0x44
 8000788:	4619      	mov	r1, r3
 800078a:	f003 fa9f 	bl	8003ccc <memcpy>
 800078e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000792:	f7ff fce5 	bl	8000160 <FL_clean>
		  HAL_GPIO_TogglePin(DebugLed_GPIO_Port, DebugLed_Pin);
 8000796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079a:	4809      	ldr	r0, [pc, #36]	; (80007c0 <main+0x14c>)
 800079c:	f001 fb14 	bl	8001dc8 <HAL_GPIO_TogglePin>
	  if(input.command_execute_flag == TRUE)
 80007a0:	e7b2      	b.n	8000708 <main+0x94>
 80007a2:	bf00      	nop
 80007a4:	20000208 	.word	0x20000208
 80007a8:	20000b60 	.word	0x20000b60
 80007ac:	20000618 	.word	0x20000618
 80007b0:	20000f64 	.word	0x20000f64
 80007b4:	20000fb8 	.word	0x20000fb8
 80007b8:	20000fe8 	.word	0x20000fe8
 80007bc:	080050e4 	.word	0x080050e4
 80007c0:	40010c00 	.word	0x40010c00
 80007c4:	08005100 	.word	0x08005100
 80007c8:	08005104 	.word	0x08005104
 80007cc:	08005128 	.word	0x08005128
 80007d0:	08005130 	.word	0x08005130
 80007d4:	08005138 	.word	0x08005138
 80007d8:	08005148 	.word	0x08005148
 80007dc:	08005164 	.word	0x08005164
 80007e0:	08005178 	.word	0x08005178

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b094      	sub	sp, #80	; 0x50
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ee:	2228      	movs	r2, #40	; 0x28
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f003 fa75 	bl	8003ce2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000814:	2301      	movs	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000822:	2301      	movs	r3, #1
 8000824:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000830:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800083a:	4618      	mov	r0, r3
 800083c:	f002 f84a 	bl	80028d4 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000846:	f000 f91d 	bl	8000a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2302      	movs	r3, #2
 8000850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2102      	movs	r1, #2
 8000866:	4618      	mov	r0, r3
 8000868:	f002 fab4 	bl	8002dd4 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000872:	f000 f907 	bl	8000a84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000876:	2302      	movs	r3, #2
 8000878:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800087a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800087e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fc42 	bl	800310c <HAL_RCCEx_PeriphCLKConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800088e:	f000 f8f9 	bl	8000a84 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3750      	adds	r7, #80	; 0x50
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_ADC1_Init+0x74>)
 80008ae:	4a19      	ldr	r2, [pc, #100]	; (8000914 <MX_ADC1_Init+0x78>)
 80008b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_ADC1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_ADC1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_ADC1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_ADC1_Init+0x74>)
 80008c6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_ADC1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_ADC1_Init+0x74>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <MX_ADC1_Init+0x74>)
 80008da:	f000 fb6f 	bl	8000fbc <HAL_ADC_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80008e4:	f000 f8ce 	bl	8000a84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008e8:	2309      	movs	r3, #9
 80008ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_ADC1_Init+0x74>)
 80008fa:	f000 fdeb 	bl	80014d4 <HAL_ADC_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000904:	f000 f8be 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000fb8 	.word	0x20000fb8
 8000914:	40012400 	.word	0x40012400

08000918 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_I2C2_Init+0x50>)
 800091e:	4a13      	ldr	r2, [pc, #76]	; (800096c <MX_I2C2_Init+0x54>)
 8000920:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_I2C2_Init+0x50>)
 8000924:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_I2C2_Init+0x58>)
 8000926:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_I2C2_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_I2C2_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_I2C2_Init+0x50>)
 8000936:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800093a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_I2C2_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_I2C2_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <MX_I2C2_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_I2C2_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_I2C2_Init+0x50>)
 8000956:	f001 fa51 	bl	8001dfc <HAL_I2C_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000960:	f000 f890 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000f64 	.word	0x20000f64
 800096c:	40005800 	.word	0x40005800
 8000970:	000186a0 	.word	0x000186a0

08000974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART2_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009ac:	f002 fd20 	bl	80033f0 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f000 f865 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000fe8 	.word	0x20000fe8
 80009c4:	40004400 	.word	0x40004400

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_GPIO_Init+0x90>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <MX_GPIO_Init+0x90>)
 80009e2:	f043 0320 	orr.w	r3, r3, #32
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_GPIO_Init+0x90>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0320 	and.w	r3, r3, #32
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_GPIO_Init+0x90>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a17      	ldr	r2, [pc, #92]	; (8000a58 <MX_GPIO_Init+0x90>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_GPIO_Init+0x90>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_GPIO_Init+0x90>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a11      	ldr	r2, [pc, #68]	; (8000a58 <MX_GPIO_Init+0x90>)
 8000a12:	f043 0308 	orr.w	r3, r3, #8
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_GPIO_Init+0x90>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0308 	and.w	r3, r3, #8
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DebugLed_GPIO_Port, DebugLed_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2a:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_GPIO_Init+0x94>)
 8000a2c:	f001 f9b4 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DebugLed_Pin */
  GPIO_InitStruct.Pin = DebugLed_Pin;
 8000a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DebugLed_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	4619      	mov	r1, r3
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_GPIO_Init+0x94>)
 8000a4a:	f001 f84b 	bl	8001ae4 <HAL_GPIO_Init>

}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010c00 	.word	0x40010c00

08000a60 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000a68:	1d39      	adds	r1, r7, #4
 8000a6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <__io_putchar+0x20>)
 8000a72:	f002 fd0a 	bl	800348a <HAL_UART_Transmit>
	return ch;												//Return the character
 8000a76:	687b      	ldr	r3, [r7, #4]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000fe8 	.word	0x20000fe8

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_MspInit+0x5c>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4a14      	ldr	r2, [pc, #80]	; (8000aec <HAL_MspInit+0x5c>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6193      	str	r3, [r2, #24]
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_MspInit+0x5c>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_MspInit+0x5c>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <HAL_MspInit+0x5c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	61d3      	str	r3, [r2, #28]
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_MspInit+0x5c>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_MspInit+0x60>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_MspInit+0x60>)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010000 	.word	0x40010000

08000af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <HAL_ADC_MspInit+0x6c>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d121      	bne.n	8000b58 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <HAL_ADC_MspInit+0x70>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <HAL_ADC_MspInit+0x70>)
 8000b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_ADC_MspInit+0x70>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_ADC_MspInit+0x70>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <HAL_ADC_MspInit+0x70>)
 8000b32:	f043 0308 	orr.w	r3, r3, #8
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_ADC_MspInit+0x70>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0308 	and.w	r3, r3, #8
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b44:	2302      	movs	r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <HAL_ADC_MspInit+0x74>)
 8000b54:	f000 ffc6 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	3720      	adds	r7, #32
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40012400 	.word	0x40012400
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010c00 	.word	0x40010c00

08000b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a16      	ldr	r2, [pc, #88]	; (8000be0 <HAL_I2C_MspInit+0x74>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d124      	bne.n	8000bd6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_I2C_MspInit+0x78>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <HAL_I2C_MspInit+0x78>)
 8000b92:	f043 0308 	orr.w	r3, r3, #8
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_I2C_MspInit+0x78>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ba4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ba8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000baa:	2312      	movs	r3, #18
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480b      	ldr	r0, [pc, #44]	; (8000be8 <HAL_I2C_MspInit+0x7c>)
 8000bba:	f000 ff93 	bl	8001ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_I2C_MspInit+0x78>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_I2C_MspInit+0x78>)
 8000bc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bc8:	61d3      	str	r3, [r2, #28]
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_I2C_MspInit+0x78>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3720      	adds	r7, #32
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40005800 	.word	0x40005800
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010c00 	.word	0x40010c00

08000bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a1f      	ldr	r2, [pc, #124]	; (8000c84 <HAL_UART_MspInit+0x98>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d137      	bne.n	8000c7c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <HAL_UART_MspInit+0x9c>)
 8000c0e:	69db      	ldr	r3, [r3, #28]
 8000c10:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <HAL_UART_MspInit+0x9c>)
 8000c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c16:	61d3      	str	r3, [r2, #28]
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <HAL_UART_MspInit+0x9c>)
 8000c1a:	69db      	ldr	r3, [r3, #28]
 8000c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_UART_MspInit+0x9c>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_UART_MspInit+0x9c>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_UART_MspInit+0x9c>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480f      	ldr	r0, [pc, #60]	; (8000c8c <HAL_UART_MspInit+0xa0>)
 8000c50:	f000 ff48 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c54:	2308      	movs	r3, #8
 8000c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4619      	mov	r1, r3
 8000c66:	4809      	ldr	r0, [pc, #36]	; (8000c8c <HAL_UART_MspInit+0xa0>)
 8000c68:	f000 ff3c 	bl	8001ae4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2026      	movs	r0, #38	; 0x26
 8000c72:	f000 fe8a 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c76:	2026      	movs	r0, #38	; 0x26
 8000c78:	f000 fea3 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40004400 	.word	0x40004400
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010800 	.word	0x40010800

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <HardFault_Handler+0x4>

08000ca2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <MemManage_Handler+0x4>

08000ca8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <BusFault_Handler+0x4>

08000cae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <UsageFault_Handler+0x4>

08000cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f952 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	char uart_char = USART2->DR;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <USART2_IRQHandler+0x70>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	71fb      	strb	r3, [r7, #7]
	//This way we ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b0a      	cmp	r3, #10
 8000cf4:	d026      	beq.n	8000d44 <USART2_IRQHandler+0x60>
	{
		//Check for CR and LF characters
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b0d      	cmp	r3, #13
 8000cfa:	d002      	beq.n	8000d02 <USART2_IRQHandler+0x1e>
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8000d00:	d10e      	bne.n	8000d20 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <USART2_IRQHandler+0x74>)
 8000d04:	22ff      	movs	r2, #255	; 0xff
 8000d06:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <USART2_IRQHandler+0x74>)
 8000d0c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000d10:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <USART2_IRQHandler+0x74>)
 8000d12:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <USART2_IRQHandler+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000d1e:	e011      	b.n	8000d44 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <USART2_IRQHandler+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <USART2_IRQHandler+0x74>)
 8000d2a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <USART2_IRQHandler+0x74>)
 8000d30:	4413      	add	r3, r2
 8000d32:	79fa      	ldrb	r2, [r7, #7]
 8000d34:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <USART2_IRQHandler+0x74>)
 8000d38:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <USART2_IRQHandler+0x74>)
 8000d40:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <USART2_IRQHandler+0x78>)
 8000d46:	f002 fc87 	bl	8003658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40004400 	.word	0x40004400
 8000d58:	20000208 	.word	0x20000208
 8000d5c:	20000fe8 	.word	0x20000fe8

08000d60 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	e00a      	b.n	8000d88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d72:	f3af 8000 	nop.w
 8000d76:	4601      	mov	r1, r0
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	60ba      	str	r2, [r7, #8]
 8000d7e:	b2ca      	uxtb	r2, r1
 8000d80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	dbf0      	blt.n	8000d72 <_read+0x12>
	}

return len;
 8000d90:	687b      	ldr	r3, [r7, #4]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	60f8      	str	r0, [r7, #12]
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	e009      	b.n	8000dc0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	60ba      	str	r2, [r7, #8]
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fe53 	bl	8000a60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbf1      	blt.n	8000dac <_write+0x12>
	}
	return len;
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_close>:

int _close(int file)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
	return -1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000df8:	605a      	str	r2, [r3, #4]
	return 0;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <_isatty>:

int _isatty(int file)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b085      	sub	sp, #20
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
	return 0;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
	...

08000e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <_sbrk+0x5c>)
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <_sbrk+0x60>)
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <_sbrk+0x64>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <_sbrk+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d207      	bcs.n	8000e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e64:	f002 ff08 	bl	8003c78 <__errno>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	230c      	movs	r3, #12
 8000e6c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	e009      	b.n	8000e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <_sbrk+0x64>)
 8000e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20005000 	.word	0x20005000
 8000e94:	00000400 	.word	0x00000400
 8000e98:	200001f8 	.word	0x200001f8
 8000e9c:	20001030 	.word	0x20001030

08000ea0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000eac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000eae:	e003      	b.n	8000eb8 <LoopCopyDataInit>

08000eb0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000eb2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000eb4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000eb6:	3104      	adds	r1, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000eb8:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ebc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ebe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ec0:	d3f6      	bcc.n	8000eb0 <CopyDataInit>
  ldr r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ec4:	e002      	b.n	8000ecc <LoopFillZerobss>

08000ec6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ec8:	f842 3b04 	str.w	r3, [r2], #4

08000ecc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ece:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ed0:	d3f9      	bcc.n	8000ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ed2:	f7ff ffe5 	bl	8000ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f002 fed5 	bl	8003c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eda:	f7ff fbcb 	bl	8000674 <main>
  bx lr
 8000ede:	4770      	bx	lr
  ldr r3, =_sidata
 8000ee0:	08005378 	.word	0x08005378
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ee8:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8000eec:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8000ef0:	20001030 	.word	0x20001030

08000ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC1_2_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x28>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x28>)
 8000f02:	f043 0310 	orr.w	r3, r3, #16
 8000f06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 fd33 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f7ff fdbc 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40022000 	.word	0x40022000

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fd4b 	bl	80019de <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f000 fd13 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000004 	.word	0x20000004

08000f84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_IncTick+0x1c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20001028 	.word	0x20001028

08000fa8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <HAL_GetTick+0x10>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	20001028 	.word	0x20001028

08000fbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e0be      	b.n	800115c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d109      	bne.n	8001000 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff fd7a 	bl	8000af4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 fbb1 	bl	8001768 <ADC_ConversionStop_Disable>
 8001006:	4603      	mov	r3, r0
 8001008:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	2b00      	cmp	r3, #0
 8001014:	f040 8099 	bne.w	800114a <HAL_ADC_Init+0x18e>
 8001018:	7dfb      	ldrb	r3, [r7, #23]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f040 8095 	bne.w	800114a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001028:	f023 0302 	bic.w	r3, r3, #2
 800102c:	f043 0202 	orr.w	r2, r3, #2
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800103c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7b1b      	ldrb	r3, [r3, #12]
 8001042:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001044:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	4313      	orrs	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001054:	d003      	beq.n	800105e <HAL_ADC_Init+0xa2>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d102      	bne.n	8001064 <HAL_ADC_Init+0xa8>
 800105e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001062:	e000      	b.n	8001066 <HAL_ADC_Init+0xaa>
 8001064:	2300      	movs	r3, #0
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7d1b      	ldrb	r3, [r3, #20]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d119      	bne.n	80010a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7b1b      	ldrb	r3, [r3, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d109      	bne.n	8001090 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	3b01      	subs	r3, #1
 8001082:	035a      	lsls	r2, r3, #13
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	e00b      	b.n	80010a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001094:	f043 0220 	orr.w	r2, r3, #32
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a0:	f043 0201 	orr.w	r2, r3, #1
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	430a      	orrs	r2, r1
 80010ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	4b28      	ldr	r3, [pc, #160]	; (8001164 <HAL_ADC_Init+0x1a8>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	68b9      	ldr	r1, [r7, #8]
 80010cc:	430b      	orrs	r3, r1
 80010ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010d8:	d003      	beq.n	80010e2 <HAL_ADC_Init+0x126>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d104      	bne.n	80010ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	051b      	lsls	r3, r3, #20
 80010ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <HAL_ADC_Init+0x1ac>)
 8001108:	4013      	ands	r3, r2
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	429a      	cmp	r2, r3
 800110e:	d10b      	bne.n	8001128 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111a:	f023 0303 	bic.w	r3, r3, #3
 800111e:	f043 0201 	orr.w	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001126:	e018      	b.n	800115a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	f023 0312 	bic.w	r3, r3, #18
 8001130:	f043 0210 	orr.w	r2, r3, #16
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113c:	f043 0201 	orr.w	r2, r3, #1
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001148:	e007      	b.n	800115a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114e:	f043 0210 	orr.w	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800115a:	7dfb      	ldrb	r3, [r7, #23]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	ffe1f7fd 	.word	0xffe1f7fd
 8001168:	ff1f0efe 	.word	0xff1f0efe

0800116c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <HAL_ADC_Start+0x1a>
 8001182:	2302      	movs	r3, #2
 8001184:	e098      	b.n	80012b8 <HAL_ADC_Start+0x14c>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 fa98 	bl	80016c4 <ADC_Enable>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2b00      	cmp	r3, #0
 800119c:	f040 8087 	bne.w	80012ae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a41      	ldr	r2, [pc, #260]	; (80012c0 <HAL_ADC_Start+0x154>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d105      	bne.n	80011ca <HAL_ADC_Start+0x5e>
 80011be:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <HAL_ADC_Start+0x158>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d115      	bne.n	80011f6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d026      	beq.n	8001232 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011f4:	e01d      	b.n	8001232 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a2f      	ldr	r2, [pc, #188]	; (80012c4 <HAL_ADC_Start+0x158>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d004      	beq.n	8001216 <HAL_ADC_Start+0xaa>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <HAL_ADC_Start+0x154>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d10d      	bne.n	8001232 <HAL_ADC_Start+0xc6>
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <HAL_ADC_Start+0x158>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121e:	2b00      	cmp	r3, #0
 8001220:	d007      	beq.n	8001232 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001226:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800122a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d006      	beq.n	800124c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001242:	f023 0206 	bic.w	r2, r3, #6
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	62da      	str	r2, [r3, #44]	; 0x2c
 800124a:	e002      	b.n	8001252 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f06f 0202 	mvn.w	r2, #2
 8001262:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800126e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001272:	d113      	bne.n	800129c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001278:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <HAL_ADC_Start+0x154>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d105      	bne.n	800128a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <HAL_ADC_Start+0x158>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001286:	2b00      	cmp	r3, #0
 8001288:	d108      	bne.n	800129c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	e00c      	b.n	80012b6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	e003      	b.n	80012b6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40012800 	.word	0x40012800
 80012c4:	40012400 	.word	0x40012400

080012c8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80012de:	f7ff fe63 	bl	8000fa8 <HAL_GetTick>
 80012e2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f6:	f043 0220 	orr.w	r2, r3, #32
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e0c8      	b.n	800149c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001314:	2b00      	cmp	r3, #0
 8001316:	d12a      	bne.n	800136e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001322:	2b00      	cmp	r3, #0
 8001324:	d123      	bne.n	800136e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001326:	e01a      	b.n	800135e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132e:	d016      	beq.n	800135e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <HAL_ADC_PollForConversion+0x7e>
 8001336:	f7ff fe37 	bl	8000fa8 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d20b      	bcs.n	800135e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134a:	f043 0204 	orr.w	r2, r3, #4
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e09e      	b.n	800149c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0dd      	beq.n	8001328 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800136c:	e06c      	b.n	8001448 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800136e:	4b4d      	ldr	r3, [pc, #308]	; (80014a4 <HAL_ADC_PollForConversion+0x1dc>)
 8001370:	681c      	ldr	r4, [r3, #0]
 8001372:	2002      	movs	r0, #2
 8001374:	f001 ff80 	bl	8003278 <HAL_RCCEx_GetPeriphCLKFreq>
 8001378:	4603      	mov	r3, r0
 800137a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6919      	ldr	r1, [r3, #16]
 8001384:	4b48      	ldr	r3, [pc, #288]	; (80014a8 <HAL_ADC_PollForConversion+0x1e0>)
 8001386:	400b      	ands	r3, r1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d118      	bne.n	80013be <HAL_ADC_PollForConversion+0xf6>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68d9      	ldr	r1, [r3, #12]
 8001392:	4b46      	ldr	r3, [pc, #280]	; (80014ac <HAL_ADC_PollForConversion+0x1e4>)
 8001394:	400b      	ands	r3, r1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d111      	bne.n	80013be <HAL_ADC_PollForConversion+0xf6>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6919      	ldr	r1, [r3, #16]
 80013a0:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <HAL_ADC_PollForConversion+0x1e8>)
 80013a2:	400b      	ands	r3, r1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d108      	bne.n	80013ba <HAL_ADC_PollForConversion+0xf2>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68d9      	ldr	r1, [r3, #12]
 80013ae:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <HAL_ADC_PollForConversion+0x1ec>)
 80013b0:	400b      	ands	r3, r1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_ADC_PollForConversion+0xf2>
 80013b6:	2314      	movs	r3, #20
 80013b8:	e020      	b.n	80013fc <HAL_ADC_PollForConversion+0x134>
 80013ba:	2329      	movs	r3, #41	; 0x29
 80013bc:	e01e      	b.n	80013fc <HAL_ADC_PollForConversion+0x134>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6919      	ldr	r1, [r3, #16]
 80013c4:	4b3a      	ldr	r3, [pc, #232]	; (80014b0 <HAL_ADC_PollForConversion+0x1e8>)
 80013c6:	400b      	ands	r3, r1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d106      	bne.n	80013da <HAL_ADC_PollForConversion+0x112>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68d9      	ldr	r1, [r3, #12]
 80013d2:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_ADC_PollForConversion+0x1ec>)
 80013d4:	400b      	ands	r3, r1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00d      	beq.n	80013f6 <HAL_ADC_PollForConversion+0x12e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6919      	ldr	r1, [r3, #16]
 80013e0:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <HAL_ADC_PollForConversion+0x1f0>)
 80013e2:	400b      	ands	r3, r1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d108      	bne.n	80013fa <HAL_ADC_PollForConversion+0x132>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68d9      	ldr	r1, [r3, #12]
 80013ee:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <HAL_ADC_PollForConversion+0x1f0>)
 80013f0:	400b      	ands	r3, r1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_ADC_PollForConversion+0x132>
 80013f6:	2354      	movs	r3, #84	; 0x54
 80013f8:	e000      	b.n	80013fc <HAL_ADC_PollForConversion+0x134>
 80013fa:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80013fc:	fb02 f303 	mul.w	r3, r2, r3
 8001400:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001402:	e01d      	b.n	8001440 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140a:	d016      	beq.n	800143a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <HAL_ADC_PollForConversion+0x15a>
 8001412:	f7ff fdc9 	bl	8000fa8 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d20b      	bcs.n	800143a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001426:	f043 0204 	orr.w	r2, r3, #4
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e030      	b.n	800149c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3301      	adds	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	429a      	cmp	r2, r3
 8001446:	d8dd      	bhi.n	8001404 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f06f 0212 	mvn.w	r2, #18
 8001450:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001468:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800146c:	d115      	bne.n	800149a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001472:	2b00      	cmp	r3, #0
 8001474:	d111      	bne.n	800149a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d105      	bne.n	800149a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	371c      	adds	r7, #28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd90      	pop	{r4, r7, pc}
 80014a4:	20000000 	.word	0x20000000
 80014a8:	24924924 	.word	0x24924924
 80014ac:	00924924 	.word	0x00924924
 80014b0:	12492492 	.word	0x12492492
 80014b4:	00492492 	.word	0x00492492
 80014b8:	00249249 	.word	0x00249249

080014bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x20>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e0dc      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1da>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b06      	cmp	r3, #6
 8001502:	d81c      	bhi.n	800153e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	3b05      	subs	r3, #5
 8001516:	221f      	movs	r2, #31
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	4019      	ands	r1, r3
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	3b05      	subs	r3, #5
 8001530:	fa00 f203 	lsl.w	r2, r0, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	635a      	str	r2, [r3, #52]	; 0x34
 800153c:	e03c      	b.n	80015b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b0c      	cmp	r3, #12
 8001544:	d81c      	bhi.n	8001580 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	3b23      	subs	r3, #35	; 0x23
 8001558:	221f      	movs	r2, #31
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	4019      	ands	r1, r3
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	3b23      	subs	r3, #35	; 0x23
 8001572:	fa00 f203 	lsl.w	r2, r0, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
 800157e:	e01b      	b.n	80015b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	3b41      	subs	r3, #65	; 0x41
 8001592:	221f      	movs	r2, #31
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	4019      	ands	r1, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	3b41      	subs	r3, #65	; 0x41
 80015ac:	fa00 f203 	lsl.w	r2, r0, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b09      	cmp	r3, #9
 80015be:	d91c      	bls.n	80015fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68d9      	ldr	r1, [r3, #12]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	3b1e      	subs	r3, #30
 80015d2:	2207      	movs	r2, #7
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	4019      	ands	r1, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	6898      	ldr	r0, [r3, #8]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	3b1e      	subs	r3, #30
 80015ec:	fa00 f203 	lsl.w	r2, r0, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	e019      	b.n	800162e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6919      	ldr	r1, [r3, #16]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	2207      	movs	r2, #7
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	4019      	ands	r1, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	6898      	ldr	r0, [r3, #8]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	fa00 f203 	lsl.w	r2, r0, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b10      	cmp	r3, #16
 8001634:	d003      	beq.n	800163e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800163a:	2b11      	cmp	r3, #17
 800163c:	d132      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d125      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d126      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001664:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b10      	cmp	r3, #16
 800166c:	d11a      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <HAL_ADC_ConfigChannel+0x1e8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	0c9a      	lsrs	r2, r3, #18
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001684:	e002      	b.n	800168c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3b01      	subs	r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f9      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x1b2>
 8001692:	e007      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	f043 0220 	orr.w	r2, r3, #32
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	40012400 	.word	0x40012400
 80016bc:	20000000 	.word	0x20000000
 80016c0:	431bde83 	.word	0x431bde83

080016c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d039      	beq.n	8001756 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 0201 	orr.w	r2, r2, #1
 80016f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <ADC_Enable+0x9c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <ADC_Enable+0xa0>)
 80016f8:	fba2 2303 	umull	r2, r3, r2, r3
 80016fc:	0c9b      	lsrs	r3, r3, #18
 80016fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001700:	e002      	b.n	8001708 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	3b01      	subs	r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f9      	bne.n	8001702 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800170e:	f7ff fc4b 	bl	8000fa8 <HAL_GetTick>
 8001712:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001714:	e018      	b.n	8001748 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001716:	f7ff fc47 	bl	8000fa8 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d911      	bls.n	8001748 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	f043 0210 	orr.w	r2, r3, #16
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	f043 0201 	orr.w	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e007      	b.n	8001758 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b01      	cmp	r3, #1
 8001754:	d1df      	bne.n	8001716 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000000 	.word	0x20000000
 8001764:	431bde83 	.word	0x431bde83

08001768 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b01      	cmp	r3, #1
 8001780:	d127      	bne.n	80017d2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0201 	bic.w	r2, r2, #1
 8001790:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001792:	f7ff fc09 	bl	8000fa8 <HAL_GetTick>
 8001796:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001798:	e014      	b.n	80017c4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800179a:	f7ff fc05 	bl	8000fa8 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d90d      	bls.n	80017c4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	f043 0210 	orr.w	r2, r3, #16
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	f043 0201 	orr.w	r2, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e007      	b.n	80017d4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d0e3      	beq.n	800179a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180e:	4a04      	ldr	r2, [pc, #16]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60d3      	str	r3, [r2, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db0b      	blt.n	800186a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	4906      	ldr	r1, [pc, #24]	; (8001874 <__NVIC_EnableIRQ+0x34>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	2001      	movs	r0, #1
 8001862:	fa00 f202 	lsl.w	r2, r0, r2
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100

08001878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	6039      	str	r1, [r7, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	db0a      	blt.n	80018a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	490c      	ldr	r1, [pc, #48]	; (80018c4 <__NVIC_SetPriority+0x4c>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	0112      	lsls	r2, r2, #4
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	440b      	add	r3, r1
 800189c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a0:	e00a      	b.n	80018b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4908      	ldr	r1, [pc, #32]	; (80018c8 <__NVIC_SetPriority+0x50>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	3b04      	subs	r3, #4
 80018b0:	0112      	lsls	r2, r2, #4
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	440b      	add	r3, r1
 80018b6:	761a      	strb	r2, [r3, #24]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000e100 	.word	0xe000e100
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f1c3 0307 	rsb	r3, r3, #7
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	bf28      	it	cs
 80018ea:	2304      	movcs	r3, #4
 80018ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3304      	adds	r3, #4
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d902      	bls.n	80018fc <NVIC_EncodePriority+0x30>
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3b03      	subs	r3, #3
 80018fa:	e000      	b.n	80018fe <NVIC_EncodePriority+0x32>
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	f04f 32ff 	mov.w	r2, #4294967295
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	401a      	ands	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001914:	f04f 31ff 	mov.w	r1, #4294967295
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	43d9      	mvns	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	4313      	orrs	r3, r2
         );
}
 8001926:	4618      	mov	r0, r3
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff90 	bl	8001878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff2d 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff42 	bl	8001824 <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff90 	bl	80018cc <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5f 	bl	8001878 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff35 	bl	8001840 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d005      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2204      	movs	r2, #4
 8001a12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	e051      	b.n	8001abe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 020e 	bic.w	r2, r2, #14
 8001a28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0201 	bic.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <HAL_DMA_Abort_IT+0xd0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d029      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xa0>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a20      	ldr	r2, [pc, #128]	; (8001acc <HAL_DMA_Abort_IT+0xd4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d022      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x9c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_DMA_Abort_IT+0xd8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d01a      	beq.n	8001a8e <HAL_DMA_Abort_IT+0x96>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <HAL_DMA_Abort_IT+0xdc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d012      	beq.n	8001a88 <HAL_DMA_Abort_IT+0x90>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <HAL_DMA_Abort_IT+0xe0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00a      	beq.n	8001a82 <HAL_DMA_Abort_IT+0x8a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <HAL_DMA_Abort_IT+0xe4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d102      	bne.n	8001a7c <HAL_DMA_Abort_IT+0x84>
 8001a76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a7a:	e00e      	b.n	8001a9a <HAL_DMA_Abort_IT+0xa2>
 8001a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a80:	e00b      	b.n	8001a9a <HAL_DMA_Abort_IT+0xa2>
 8001a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a86:	e008      	b.n	8001a9a <HAL_DMA_Abort_IT+0xa2>
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	e005      	b.n	8001a9a <HAL_DMA_Abort_IT+0xa2>
 8001a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a92:	e002      	b.n	8001a9a <HAL_DMA_Abort_IT+0xa2>
 8001a94:	2310      	movs	r3, #16
 8001a96:	e000      	b.n	8001a9a <HAL_DMA_Abort_IT+0xa2>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <HAL_DMA_Abort_IT+0xe8>)
 8001a9c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	4798      	blx	r3
    } 
  }
  return status;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40020008 	.word	0x40020008
 8001acc:	4002001c 	.word	0x4002001c
 8001ad0:	40020030 	.word	0x40020030
 8001ad4:	40020044 	.word	0x40020044
 8001ad8:	40020058 	.word	0x40020058
 8001adc:	4002006c 	.word	0x4002006c
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b08b      	sub	sp, #44	; 0x2c
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af6:	e127      	b.n	8001d48 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001af8:	2201      	movs	r2, #1
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	f040 8116 	bne.w	8001d42 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b12      	cmp	r3, #18
 8001b1c:	d034      	beq.n	8001b88 <HAL_GPIO_Init+0xa4>
 8001b1e:	2b12      	cmp	r3, #18
 8001b20:	d80d      	bhi.n	8001b3e <HAL_GPIO_Init+0x5a>
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d02b      	beq.n	8001b7e <HAL_GPIO_Init+0x9a>
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d804      	bhi.n	8001b34 <HAL_GPIO_Init+0x50>
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d031      	beq.n	8001b92 <HAL_GPIO_Init+0xae>
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d01c      	beq.n	8001b6c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b32:	e048      	b.n	8001bc6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d043      	beq.n	8001bc0 <HAL_GPIO_Init+0xdc>
 8001b38:	2b11      	cmp	r3, #17
 8001b3a:	d01b      	beq.n	8001b74 <HAL_GPIO_Init+0x90>
          break;
 8001b3c:	e043      	b.n	8001bc6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b3e:	4a89      	ldr	r2, [pc, #548]	; (8001d64 <HAL_GPIO_Init+0x280>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d026      	beq.n	8001b92 <HAL_GPIO_Init+0xae>
 8001b44:	4a87      	ldr	r2, [pc, #540]	; (8001d64 <HAL_GPIO_Init+0x280>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d806      	bhi.n	8001b58 <HAL_GPIO_Init+0x74>
 8001b4a:	4a87      	ldr	r2, [pc, #540]	; (8001d68 <HAL_GPIO_Init+0x284>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d020      	beq.n	8001b92 <HAL_GPIO_Init+0xae>
 8001b50:	4a86      	ldr	r2, [pc, #536]	; (8001d6c <HAL_GPIO_Init+0x288>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01d      	beq.n	8001b92 <HAL_GPIO_Init+0xae>
          break;
 8001b56:	e036      	b.n	8001bc6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b58:	4a85      	ldr	r2, [pc, #532]	; (8001d70 <HAL_GPIO_Init+0x28c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d019      	beq.n	8001b92 <HAL_GPIO_Init+0xae>
 8001b5e:	4a85      	ldr	r2, [pc, #532]	; (8001d74 <HAL_GPIO_Init+0x290>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d016      	beq.n	8001b92 <HAL_GPIO_Init+0xae>
 8001b64:	4a84      	ldr	r2, [pc, #528]	; (8001d78 <HAL_GPIO_Init+0x294>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_GPIO_Init+0xae>
          break;
 8001b6a:	e02c      	b.n	8001bc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	623b      	str	r3, [r7, #32]
          break;
 8001b72:	e028      	b.n	8001bc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	623b      	str	r3, [r7, #32]
          break;
 8001b7c:	e023      	b.n	8001bc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	3308      	adds	r3, #8
 8001b84:	623b      	str	r3, [r7, #32]
          break;
 8001b86:	e01e      	b.n	8001bc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	330c      	adds	r3, #12
 8001b8e:	623b      	str	r3, [r7, #32]
          break;
 8001b90:	e019      	b.n	8001bc6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d102      	bne.n	8001ba0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	623b      	str	r3, [r7, #32]
          break;
 8001b9e:	e012      	b.n	8001bc6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d105      	bne.n	8001bb4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba8:	2308      	movs	r3, #8
 8001baa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	611a      	str	r2, [r3, #16]
          break;
 8001bb2:	e008      	b.n	8001bc6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	615a      	str	r2, [r3, #20]
          break;
 8001bbe:	e002      	b.n	8001bc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
          break;
 8001bc4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2bff      	cmp	r3, #255	; 0xff
 8001bca:	d801      	bhi.n	8001bd0 <HAL_GPIO_Init+0xec>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	e001      	b.n	8001bd4 <HAL_GPIO_Init+0xf0>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2bff      	cmp	r3, #255	; 0xff
 8001bda:	d802      	bhi.n	8001be2 <HAL_GPIO_Init+0xfe>
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	e002      	b.n	8001be8 <HAL_GPIO_Init+0x104>
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	3b08      	subs	r3, #8
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	210f      	movs	r1, #15
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	6a39      	ldr	r1, [r7, #32]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	431a      	orrs	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 8096 	beq.w	8001d42 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c16:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <HAL_GPIO_Init+0x298>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <HAL_GPIO_Init+0x298>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6193      	str	r3, [r2, #24]
 8001c22:	4b56      	ldr	r3, [pc, #344]	; (8001d7c <HAL_GPIO_Init+0x298>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c2e:	4a54      	ldr	r2, [pc, #336]	; (8001d80 <HAL_GPIO_Init+0x29c>)
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4b      	ldr	r2, [pc, #300]	; (8001d84 <HAL_GPIO_Init+0x2a0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_Init+0x19e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4a      	ldr	r2, [pc, #296]	; (8001d88 <HAL_GPIO_Init+0x2a4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00d      	beq.n	8001c7e <HAL_GPIO_Init+0x19a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a49      	ldr	r2, [pc, #292]	; (8001d8c <HAL_GPIO_Init+0x2a8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_Init+0x196>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a48      	ldr	r2, [pc, #288]	; (8001d90 <HAL_GPIO_Init+0x2ac>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_GPIO_Init+0x192>
 8001c72:	2303      	movs	r3, #3
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x1a0>
 8001c76:	2304      	movs	r3, #4
 8001c78:	e004      	b.n	8001c84 <HAL_GPIO_Init+0x1a0>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_Init+0x1a0>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_GPIO_Init+0x1a0>
 8001c82:	2300      	movs	r3, #0
 8001c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c86:	f002 0203 	and.w	r2, r2, #3
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	4093      	lsls	r3, r2
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c94:	493a      	ldr	r1, [pc, #232]	; (8001d80 <HAL_GPIO_Init+0x29c>)
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d006      	beq.n	8001cbc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cae:	4b39      	ldr	r3, [pc, #228]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4938      	ldr	r1, [pc, #224]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]
 8001cba:	e006      	b.n	8001cca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	4933      	ldr	r1, [pc, #204]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	492e      	ldr	r1, [pc, #184]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
 8001ce2:	e006      	b.n	8001cf2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ce4:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	4929      	ldr	r1, [pc, #164]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d006      	beq.n	8001d0c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cfe:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	4924      	ldr	r1, [pc, #144]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
 8001d0a:	e006      	b.n	8001d1a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	491f      	ldr	r1, [pc, #124]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d26:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	491a      	ldr	r1, [pc, #104]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60cb      	str	r3, [r1, #12]
 8001d32:	e006      	b.n	8001d42 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d34:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	4915      	ldr	r1, [pc, #84]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	3301      	adds	r3, #1
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f47f aed0 	bne.w	8001af8 <HAL_GPIO_Init+0x14>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	372c      	adds	r7, #44	; 0x2c
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	10210000 	.word	0x10210000
 8001d68:	10110000 	.word	0x10110000
 8001d6c:	10120000 	.word	0x10120000
 8001d70:	10310000 	.word	0x10310000
 8001d74:	10320000 	.word	0x10320000
 8001d78:	10220000 	.word	0x10220000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010000 	.word	0x40010000
 8001d84:	40010800 	.word	0x40010800
 8001d88:	40010c00 	.word	0x40010c00
 8001d8c:	40011000 	.word	0x40011000
 8001d90:	40011400 	.word	0x40011400
 8001d94:	40010400 	.word	0x40010400

08001d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
 8001da4:	4613      	mov	r3, r2
 8001da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001da8:	787b      	ldrb	r3, [r7, #1]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001db4:	e003      	b.n	8001dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001db6:	887b      	ldrh	r3, [r7, #2]
 8001db8:	041a      	lsls	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	611a      	str	r2, [r3, #16]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4013      	ands	r3, r2
 8001de0:	041a      	lsls	r2, r3, #16
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43d9      	mvns	r1, r3
 8001de6:	887b      	ldrh	r3, [r7, #2]
 8001de8:	400b      	ands	r3, r1
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	611a      	str	r2, [r3, #16]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e11f      	b.n	800204e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7fe fea2 	bl	8000b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2224      	movs	r2, #36	; 0x24
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e60:	f001 f90e 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 8001e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4a7b      	ldr	r2, [pc, #492]	; (8002058 <HAL_I2C_Init+0x25c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d807      	bhi.n	8001e80 <HAL_I2C_Init+0x84>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4a7a      	ldr	r2, [pc, #488]	; (800205c <HAL_I2C_Init+0x260>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	bf94      	ite	ls
 8001e78:	2301      	movls	r3, #1
 8001e7a:	2300      	movhi	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	e006      	b.n	8001e8e <HAL_I2C_Init+0x92>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4a77      	ldr	r2, [pc, #476]	; (8002060 <HAL_I2C_Init+0x264>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	bf94      	ite	ls
 8001e88:	2301      	movls	r3, #1
 8001e8a:	2300      	movhi	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0db      	b.n	800204e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4a72      	ldr	r2, [pc, #456]	; (8002064 <HAL_I2C_Init+0x268>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0c9b      	lsrs	r3, r3, #18
 8001ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a64      	ldr	r2, [pc, #400]	; (8002058 <HAL_I2C_Init+0x25c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d802      	bhi.n	8001ed0 <HAL_I2C_Init+0xd4>
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	e009      	b.n	8001ee4 <HAL_I2C_Init+0xe8>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	4a63      	ldr	r2, [pc, #396]	; (8002068 <HAL_I2C_Init+0x26c>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	099b      	lsrs	r3, r3, #6
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ef6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4956      	ldr	r1, [pc, #344]	; (8002058 <HAL_I2C_Init+0x25c>)
 8001f00:	428b      	cmp	r3, r1
 8001f02:	d80d      	bhi.n	8001f20 <HAL_I2C_Init+0x124>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1e59      	subs	r1, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	bf38      	it	cc
 8001f1c:	2304      	movcc	r3, #4
 8001f1e:	e04f      	b.n	8001fc0 <HAL_I2C_Init+0x1c4>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d111      	bne.n	8001f4c <HAL_I2C_Init+0x150>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1e58      	subs	r0, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	440b      	add	r3, r1
 8001f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf0c      	ite	eq
 8001f44:	2301      	moveq	r3, #1
 8001f46:	2300      	movne	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e012      	b.n	8001f72 <HAL_I2C_Init+0x176>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1e58      	subs	r0, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6859      	ldr	r1, [r3, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	0099      	lsls	r1, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f62:	3301      	adds	r3, #1
 8001f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_I2C_Init+0x17e>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e022      	b.n	8001fc0 <HAL_I2C_Init+0x1c4>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10e      	bne.n	8001fa0 <HAL_I2C_Init+0x1a4>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1e58      	subs	r0, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6859      	ldr	r1, [r3, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	440b      	add	r3, r1
 8001f90:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f94:	3301      	adds	r3, #1
 8001f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f9e:	e00f      	b.n	8001fc0 <HAL_I2C_Init+0x1c4>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1e58      	subs	r0, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	0099      	lsls	r1, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	6809      	ldr	r1, [r1, #0]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6911      	ldr	r1, [r2, #16]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68d2      	ldr	r2, [r2, #12]
 8001ffa:	4311      	orrs	r1, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	430b      	orrs	r3, r1
 8002002:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2220      	movs	r2, #32
 800203a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	000186a0 	.word	0x000186a0
 800205c:	001e847f 	.word	0x001e847f
 8002060:	003d08ff 	.word	0x003d08ff
 8002064:	431bde83 	.word	0x431bde83
 8002068:	10624dd3 	.word	0x10624dd3

0800206c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af02      	add	r7, sp, #8
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	461a      	mov	r2, r3
 8002078:	460b      	mov	r3, r1
 800207a:	817b      	strh	r3, [r7, #10]
 800207c:	4613      	mov	r3, r2
 800207e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7fe ff92 	bl	8000fa8 <HAL_GetTick>
 8002084:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b20      	cmp	r3, #32
 8002090:	f040 80e0 	bne.w	8002254 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	2319      	movs	r3, #25
 800209a:	2201      	movs	r2, #1
 800209c:	4970      	ldr	r1, [pc, #448]	; (8002260 <HAL_I2C_Master_Transmit+0x1f4>)
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 fa92 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020aa:	2302      	movs	r3, #2
 80020ac:	e0d3      	b.n	8002256 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2C_Master_Transmit+0x50>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e0cc      	b.n	8002256 <HAL_I2C_Master_Transmit+0x1ea>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d007      	beq.n	80020e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2221      	movs	r2, #33	; 0x21
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2210      	movs	r2, #16
 80020fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	893a      	ldrh	r2, [r7, #8]
 8002112:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4a50      	ldr	r2, [pc, #320]	; (8002264 <HAL_I2C_Master_Transmit+0x1f8>)
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002124:	8979      	ldrh	r1, [r7, #10]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	6a3a      	ldr	r2, [r7, #32]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f9ca 	bl	80024c4 <I2C_MasterRequestWrite>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e08d      	b.n	8002256 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002150:	e066      	b.n	8002220 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	6a39      	ldr	r1, [r7, #32]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 fb0c 	bl	8002774 <I2C_WaitOnTXEFlagUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00d      	beq.n	800217e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	2b04      	cmp	r3, #4
 8002168:	d107      	bne.n	800217a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002178:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e06b      	b.n	8002256 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	781a      	ldrb	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d11b      	bne.n	80021f4 <HAL_I2C_Master_Transmit+0x188>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d017      	beq.n	80021f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	781a      	ldrb	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	6a39      	ldr	r1, [r7, #32]
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fafc 	bl	80027f6 <I2C_WaitOnBTFFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00d      	beq.n	8002220 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	2b04      	cmp	r3, #4
 800220a:	d107      	bne.n	800221c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e01a      	b.n	8002256 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	2b00      	cmp	r3, #0
 8002226:	d194      	bne.n	8002152 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	e000      	b.n	8002256 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002254:	2302      	movs	r3, #2
  }
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	00100002 	.word	0x00100002
 8002264:	ffff0000 	.word	0xffff0000

08002268 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	460b      	mov	r3, r1
 8002276:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7fe fe96 	bl	8000fa8 <HAL_GetTick>
 800227c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800227e:	2301      	movs	r3, #1
 8002280:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b20      	cmp	r3, #32
 800228c:	f040 8111 	bne.w	80024b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2319      	movs	r3, #25
 8002296:	2201      	movs	r2, #1
 8002298:	4988      	ldr	r1, [pc, #544]	; (80024bc <HAL_I2C_IsDeviceReady+0x254>)
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f994 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80022a6:	2302      	movs	r3, #2
 80022a8:	e104      	b.n	80024b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_I2C_IsDeviceReady+0x50>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e0fd      	b.n	80024b4 <HAL_I2C_IsDeviceReady+0x24c>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d007      	beq.n	80022de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2224      	movs	r2, #36	; 0x24
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4a70      	ldr	r2, [pc, #448]	; (80024c0 <HAL_I2C_IsDeviceReady+0x258>)
 8002300:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002310:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2200      	movs	r2, #0
 800231a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f952 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00d      	beq.n	8002346 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002338:	d103      	bne.n	8002342 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e0b6      	b.n	80024b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002346:	897b      	ldrh	r3, [r7, #10]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002354:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002356:	f7fe fe27 	bl	8000fa8 <HAL_GetTick>
 800235a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b02      	cmp	r3, #2
 8002368:	bf0c      	ite	eq
 800236a:	2301      	moveq	r3, #1
 800236c:	2300      	movne	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002380:	bf0c      	ite	eq
 8002382:	2301      	moveq	r3, #1
 8002384:	2300      	movne	r3, #0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800238a:	e025      	b.n	80023d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800238c:	f7fe fe0c 	bl	8000fa8 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d302      	bcc.n	80023a2 <HAL_I2C_IsDeviceReady+0x13a>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d103      	bne.n	80023aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	22a0      	movs	r2, #160	; 0xa0
 80023a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2ba0      	cmp	r3, #160	; 0xa0
 80023e2:	d005      	beq.n	80023f0 <HAL_I2C_IsDeviceReady+0x188>
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d102      	bne.n	80023f0 <HAL_I2C_IsDeviceReady+0x188>
 80023ea:	7dbb      	ldrb	r3, [r7, #22]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0cd      	beq.n	800238c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b02      	cmp	r3, #2
 8002404:	d129      	bne.n	800245a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002414:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	2319      	movs	r3, #25
 8002432:	2201      	movs	r2, #1
 8002434:	4921      	ldr	r1, [pc, #132]	; (80024bc <HAL_I2C_IsDeviceReady+0x254>)
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f8c6 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e036      	b.n	80024b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e02c      	b.n	80024b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002468:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002472:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	2319      	movs	r3, #25
 800247a:	2201      	movs	r2, #1
 800247c:	490f      	ldr	r1, [pc, #60]	; (80024bc <HAL_I2C_IsDeviceReady+0x254>)
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f8a2 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e012      	b.n	80024b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	3301      	adds	r3, #1
 8002492:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	f4ff af32 	bcc.w	8002302 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80024b2:	2302      	movs	r3, #2
  }
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3720      	adds	r7, #32
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	00100002 	.word	0x00100002
 80024c0:	ffff0000 	.word	0xffff0000

080024c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	460b      	mov	r3, r1
 80024d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d006      	beq.n	80024ee <I2C_MasterRequestWrite+0x2a>
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d003      	beq.n	80024ee <I2C_MasterRequestWrite+0x2a>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024ec:	d108      	bne.n	8002500 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e00b      	b.n	8002518 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	2b12      	cmp	r3, #18
 8002506:	d107      	bne.n	8002518 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002516:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 f84f 	bl	80025c8 <I2C_WaitOnFlagUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00d      	beq.n	800254c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800253e:	d103      	bne.n	8002548 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e035      	b.n	80025b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002554:	d108      	bne.n	8002568 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002556:	897b      	ldrh	r3, [r7, #10]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002564:	611a      	str	r2, [r3, #16]
 8002566:	e01b      	b.n	80025a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002568:	897b      	ldrh	r3, [r7, #10]
 800256a:	11db      	asrs	r3, r3, #7
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f003 0306 	and.w	r3, r3, #6
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f063 030f 	orn	r3, r3, #15
 8002578:	b2da      	uxtb	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	490e      	ldr	r1, [pc, #56]	; (80025c0 <I2C_MasterRequestWrite+0xfc>)
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f875 	bl	8002676 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e010      	b.n	80025b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002596:	897b      	ldrh	r3, [r7, #10]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4907      	ldr	r1, [pc, #28]	; (80025c4 <I2C_MasterRequestWrite+0x100>)
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f865 	bl	8002676 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	00010008 	.word	0x00010008
 80025c4:	00010002 	.word	0x00010002

080025c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025d8:	e025      	b.n	8002626 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d021      	beq.n	8002626 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e2:	f7fe fce1 	bl	8000fa8 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d302      	bcc.n	80025f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d116      	bne.n	8002626 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f043 0220 	orr.w	r2, r3, #32
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e023      	b.n	800266e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	0c1b      	lsrs	r3, r3, #16
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d10d      	bne.n	800264c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	43da      	mvns	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4013      	ands	r3, r2
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	bf0c      	ite	eq
 8002642:	2301      	moveq	r3, #1
 8002644:	2300      	movne	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	e00c      	b.n	8002666 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4013      	ands	r3, r2
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf0c      	ite	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	2300      	movne	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	429a      	cmp	r2, r3
 800266a:	d0b6      	beq.n	80025da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002684:	e051      	b.n	800272a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002694:	d123      	bne.n	80026de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f043 0204 	orr.w	r2, r3, #4
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e046      	b.n	800276c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d021      	beq.n	800272a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e6:	f7fe fc5f 	bl	8000fa8 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d302      	bcc.n	80026fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d116      	bne.n	800272a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f043 0220 	orr.w	r2, r3, #32
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e020      	b.n	800276c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d10c      	bne.n	800274e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4013      	ands	r3, r2
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	bf14      	ite	ne
 8002746:	2301      	movne	r3, #1
 8002748:	2300      	moveq	r3, #0
 800274a:	b2db      	uxtb	r3, r3
 800274c:	e00b      	b.n	8002766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	43da      	mvns	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	4013      	ands	r3, r2
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf14      	ite	ne
 8002760:	2301      	movne	r3, #1
 8002762:	2300      	moveq	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d18d      	bne.n	8002686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002780:	e02d      	b.n	80027de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f878 	bl	8002878 <I2C_IsAcknowledgeFailed>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e02d      	b.n	80027ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d021      	beq.n	80027de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279a:	f7fe fc05 	bl	8000fa8 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d302      	bcc.n	80027b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d116      	bne.n	80027de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f043 0220 	orr.w	r2, r3, #32
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e007      	b.n	80027ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e8:	2b80      	cmp	r3, #128	; 0x80
 80027ea:	d1ca      	bne.n	8002782 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002802:	e02d      	b.n	8002860 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f837 	bl	8002878 <I2C_IsAcknowledgeFailed>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e02d      	b.n	8002870 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281a:	d021      	beq.n	8002860 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281c:	f7fe fbc4 	bl	8000fa8 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	429a      	cmp	r2, r3
 800282a:	d302      	bcc.n	8002832 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d116      	bne.n	8002860 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f043 0220 	orr.w	r2, r3, #32
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e007      	b.n	8002870 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b04      	cmp	r3, #4
 800286c:	d1ca      	bne.n	8002804 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288e:	d11b      	bne.n	80028c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002898:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f043 0204 	orr.w	r2, r3, #4
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e26c      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8087 	beq.w	8002a02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028f4:	4b92      	ldr	r3, [pc, #584]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d00c      	beq.n	800291a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002900:	4b8f      	ldr	r3, [pc, #572]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d112      	bne.n	8002932 <HAL_RCC_OscConfig+0x5e>
 800290c:	4b8c      	ldr	r3, [pc, #560]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002918:	d10b      	bne.n	8002932 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291a:	4b89      	ldr	r3, [pc, #548]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d06c      	beq.n	8002a00 <HAL_RCC_OscConfig+0x12c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d168      	bne.n	8002a00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e246      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x76>
 800293c:	4b80      	ldr	r3, [pc, #512]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a7f      	ldr	r2, [pc, #508]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	e02e      	b.n	80029a8 <HAL_RCC_OscConfig+0xd4>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x98>
 8002952:	4b7b      	ldr	r3, [pc, #492]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a7a      	ldr	r2, [pc, #488]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b78      	ldr	r3, [pc, #480]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a77      	ldr	r2, [pc, #476]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e01d      	b.n	80029a8 <HAL_RCC_OscConfig+0xd4>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0xbc>
 8002976:	4b72      	ldr	r3, [pc, #456]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a71      	ldr	r2, [pc, #452]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 800297c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b6f      	ldr	r3, [pc, #444]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a6e      	ldr	r2, [pc, #440]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0xd4>
 8002990:	4b6b      	ldr	r3, [pc, #428]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a6a      	ldr	r2, [pc, #424]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b68      	ldr	r3, [pc, #416]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a67      	ldr	r2, [pc, #412]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d013      	beq.n	80029d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7fe fafa 	bl	8000fa8 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b8:	f7fe faf6 	bl	8000fa8 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b64      	cmp	r3, #100	; 0x64
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e1fa      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ca:	4b5d      	ldr	r3, [pc, #372]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0xe4>
 80029d6:	e014      	b.n	8002a02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe fae6 	bl	8000fa8 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e0:	f7fe fae2 	bl	8000fa8 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b64      	cmp	r3, #100	; 0x64
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e1e6      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f2:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x10c>
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d063      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a0e:	4b4c      	ldr	r3, [pc, #304]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a1a:	4b49      	ldr	r3, [pc, #292]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d11c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x18c>
 8002a26:	4b46      	ldr	r3, [pc, #280]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d116      	bne.n	8002a60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a32:	4b43      	ldr	r3, [pc, #268]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <HAL_RCC_OscConfig+0x176>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e1ba      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4939      	ldr	r1, [pc, #228]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5e:	e03a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d020      	beq.n	8002aaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a68:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fa9b 	bl	8000fa8 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a76:	f7fe fa97 	bl	8000fa8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e19b      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a88:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a94:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4927      	ldr	r1, [pc, #156]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
 8002aa8:	e015      	b.n	8002ad6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <HAL_RCC_OscConfig+0x270>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fa7a 	bl	8000fa8 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab8:	f7fe fa76 	bl	8000fa8 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e17a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d03a      	beq.n	8002b58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d019      	beq.n	8002b1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aea:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <HAL_RCC_OscConfig+0x274>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af0:	f7fe fa5a 	bl	8000fa8 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af8:	f7fe fa56 	bl	8000fa8 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e15a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b16:	2001      	movs	r0, #1
 8002b18:	f000 fada 	bl	80030d0 <RCC_Delay>
 8002b1c:	e01c      	b.n	8002b58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <HAL_RCC_OscConfig+0x274>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b24:	f7fe fa40 	bl	8000fa8 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2a:	e00f      	b.n	8002b4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2c:	f7fe fa3c 	bl	8000fa8 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d908      	bls.n	8002b4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e140      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
 8002b44:	42420000 	.word	0x42420000
 8002b48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4c:	4b9e      	ldr	r3, [pc, #632]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1e9      	bne.n	8002b2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80a6 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6a:	4b97      	ldr	r3, [pc, #604]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10d      	bne.n	8002b92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b76:	4b94      	ldr	r3, [pc, #592]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	4a93      	ldr	r2, [pc, #588]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b80:	61d3      	str	r3, [r2, #28]
 8002b82:	4b91      	ldr	r3, [pc, #580]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b92:	4b8e      	ldr	r3, [pc, #568]	; (8002dcc <HAL_RCC_OscConfig+0x4f8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d118      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b9e:	4b8b      	ldr	r3, [pc, #556]	; (8002dcc <HAL_RCC_OscConfig+0x4f8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a8a      	ldr	r2, [pc, #552]	; (8002dcc <HAL_RCC_OscConfig+0x4f8>)
 8002ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002baa:	f7fe f9fd 	bl	8000fa8 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb2:	f7fe f9f9 	bl	8000fa8 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b64      	cmp	r3, #100	; 0x64
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e0fd      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc4:	4b81      	ldr	r3, [pc, #516]	; (8002dcc <HAL_RCC_OscConfig+0x4f8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d106      	bne.n	8002be6 <HAL_RCC_OscConfig+0x312>
 8002bd8:	4b7b      	ldr	r3, [pc, #492]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4a7a      	ldr	r2, [pc, #488]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	6213      	str	r3, [r2, #32]
 8002be4:	e02d      	b.n	8002c42 <HAL_RCC_OscConfig+0x36e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x334>
 8002bee:	4b76      	ldr	r3, [pc, #472]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4a75      	ldr	r2, [pc, #468]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	6213      	str	r3, [r2, #32]
 8002bfa:	4b73      	ldr	r3, [pc, #460]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	4a72      	ldr	r2, [pc, #456]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002c00:	f023 0304 	bic.w	r3, r3, #4
 8002c04:	6213      	str	r3, [r2, #32]
 8002c06:	e01c      	b.n	8002c42 <HAL_RCC_OscConfig+0x36e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b05      	cmp	r3, #5
 8002c0e:	d10c      	bne.n	8002c2a <HAL_RCC_OscConfig+0x356>
 8002c10:	4b6d      	ldr	r3, [pc, #436]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	4a6c      	ldr	r2, [pc, #432]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002c16:	f043 0304 	orr.w	r3, r3, #4
 8002c1a:	6213      	str	r3, [r2, #32]
 8002c1c:	4b6a      	ldr	r3, [pc, #424]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	4a69      	ldr	r2, [pc, #420]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6213      	str	r3, [r2, #32]
 8002c28:	e00b      	b.n	8002c42 <HAL_RCC_OscConfig+0x36e>
 8002c2a:	4b67      	ldr	r3, [pc, #412]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4a66      	ldr	r2, [pc, #408]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	6213      	str	r3, [r2, #32]
 8002c36:	4b64      	ldr	r3, [pc, #400]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	4a63      	ldr	r2, [pc, #396]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002c3c:	f023 0304 	bic.w	r3, r3, #4
 8002c40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d015      	beq.n	8002c76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe f9ad 	bl	8000fa8 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f7fe f9a9 	bl	8000fa8 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e0ab      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c68:	4b57      	ldr	r3, [pc, #348]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ee      	beq.n	8002c52 <HAL_RCC_OscConfig+0x37e>
 8002c74:	e014      	b.n	8002ca0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7fe f997 	bl	8000fa8 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7c:	e00a      	b.n	8002c94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7e:	f7fe f993 	bl	8000fa8 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e095      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c94:	4b4c      	ldr	r3, [pc, #304]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1ee      	bne.n	8002c7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d105      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca6:	4b48      	ldr	r3, [pc, #288]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	4a47      	ldr	r2, [pc, #284]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8081 	beq.w	8002dbe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cbc:	4b42      	ldr	r3, [pc, #264]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d061      	beq.n	8002d8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d146      	bne.n	8002d5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd0:	4b3f      	ldr	r3, [pc, #252]	; (8002dd0 <HAL_RCC_OscConfig+0x4fc>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fe f967 	bl	8000fa8 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cde:	f7fe f963 	bl	8000fa8 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e067      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf0:	4b35      	ldr	r3, [pc, #212]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f0      	bne.n	8002cde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d04:	d108      	bne.n	8002d18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d06:	4b30      	ldr	r3, [pc, #192]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	492d      	ldr	r1, [pc, #180]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d18:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a19      	ldr	r1, [r3, #32]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	4927      	ldr	r1, [pc, #156]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d30:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <HAL_RCC_OscConfig+0x4fc>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fe f937 	bl	8000fa8 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fe f933 	bl	8000fa8 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e037      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d50:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x46a>
 8002d5c:	e02f      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	4b1c      	ldr	r3, [pc, #112]	; (8002dd0 <HAL_RCC_OscConfig+0x4fc>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe f920 	bl	8000fa8 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fe f91c 	bl	8000fa8 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e020      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7e:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x498>
 8002d8a:	e018      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e013      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCC_OscConfig+0x4f4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d001      	beq.n	8002dbe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	42420060 	.word	0x42420060

08002dd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0d0      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002de8:	4b6a      	ldr	r3, [pc, #424]	; (8002f94 <HAL_RCC_ClockConfig+0x1c0>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d910      	bls.n	8002e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b67      	ldr	r3, [pc, #412]	; (8002f94 <HAL_RCC_ClockConfig+0x1c0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 0207 	bic.w	r2, r3, #7
 8002dfe:	4965      	ldr	r1, [pc, #404]	; (8002f94 <HAL_RCC_ClockConfig+0x1c0>)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	4b63      	ldr	r3, [pc, #396]	; (8002f94 <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0b8      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d020      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e30:	4b59      	ldr	r3, [pc, #356]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	4a58      	ldr	r2, [pc, #352]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e48:	4b53      	ldr	r3, [pc, #332]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4a52      	ldr	r2, [pc, #328]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e54:	4b50      	ldr	r3, [pc, #320]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	494d      	ldr	r1, [pc, #308]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d040      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d107      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7a:	4b47      	ldr	r3, [pc, #284]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d115      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e07f      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d107      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e92:	4b41      	ldr	r3, [pc, #260]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e073      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea2:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e06b      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb2:	4b39      	ldr	r3, [pc, #228]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f023 0203 	bic.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4936      	ldr	r1, [pc, #216]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec4:	f7fe f870 	bl	8000fa8 <HAL_GetTick>
 8002ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ecc:	f7fe f86c 	bl	8000fa8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e053      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 020c 	and.w	r2, r3, #12
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d1eb      	bne.n	8002ecc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d210      	bcs.n	8002f24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b24      	ldr	r3, [pc, #144]	; (8002f94 <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 0207 	bic.w	r2, r3, #7
 8002f0a:	4922      	ldr	r1, [pc, #136]	; (8002f94 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <HAL_RCC_ClockConfig+0x1c0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e032      	b.n	8002f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f30:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4916      	ldr	r1, [pc, #88]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d009      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f4e:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	490e      	ldr	r1, [pc, #56]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f62:	f000 f821 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8002f66:	4601      	mov	r1, r0
 8002f68:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f74:	5cd3      	ldrb	r3, [r2, r3]
 8002f76:	fa21 f303 	lsr.w	r3, r1, r3
 8002f7a:	4a09      	ldr	r2, [pc, #36]	; (8002fa0 <HAL_RCC_ClockConfig+0x1cc>)
 8002f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f7e:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_RCC_ClockConfig+0x1d0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd ffce 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40022000 	.word	0x40022000
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	080051b4 	.word	0x080051b4
 8002fa0:	20000000 	.word	0x20000000
 8002fa4:	20000004 	.word	0x20000004

08002fa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa8:	b490      	push	{r4, r7}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fae:	4b2a      	ldr	r3, [pc, #168]	; (8003058 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fb0:	1d3c      	adds	r4, r7, #4
 8002fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fb8:	4b28      	ldr	r3, [pc, #160]	; (800305c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fd2:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d002      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d003      	beq.n	8002fee <HAL_RCC_GetSysClockFreq+0x46>
 8002fe6:	e02d      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fea:	623b      	str	r3, [r7, #32]
      break;
 8002fec:	e02d      	b.n	800304a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	0c9b      	lsrs	r3, r3, #18
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003000:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d013      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800300c:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_RCC_GetSysClockFreq+0xb8>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	0c5b      	lsrs	r3, r3, #17
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800301a:	4413      	add	r3, r2
 800301c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003020:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003026:	fb02 f203 	mul.w	r2, r2, r3
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
 8003032:	e004      	b.n	800303e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	623b      	str	r3, [r7, #32]
      break;
 8003042:	e002      	b.n	800304a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003044:	4b07      	ldr	r3, [pc, #28]	; (8003064 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003046:	623b      	str	r3, [r7, #32]
      break;
 8003048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800304a:	6a3b      	ldr	r3, [r7, #32]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3728      	adds	r7, #40	; 0x28
 8003050:	46bd      	mov	sp, r7
 8003052:	bc90      	pop	{r4, r7}
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	0800518c 	.word	0x0800518c
 800305c:	0800519c 	.word	0x0800519c
 8003060:	40021000 	.word	0x40021000
 8003064:	007a1200 	.word	0x007a1200
 8003068:	003d0900 	.word	0x003d0900

0800306c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003070:	4b02      	ldr	r3, [pc, #8]	; (800307c <HAL_RCC_GetHCLKFreq+0x10>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr
 800307c:	20000000 	.word	0x20000000

08003080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003084:	f7ff fff2 	bl	800306c <HAL_RCC_GetHCLKFreq>
 8003088:	4601      	mov	r1, r0
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	4a03      	ldr	r2, [pc, #12]	; (80030a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003096:	5cd3      	ldrb	r3, [r2, r3]
 8003098:	fa21 f303 	lsr.w	r3, r1, r3
}
 800309c:	4618      	mov	r0, r3
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	080051c4 	.word	0x080051c4

080030a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030ac:	f7ff ffde 	bl	800306c <HAL_RCC_GetHCLKFreq>
 80030b0:	4601      	mov	r1, r0
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	0adb      	lsrs	r3, r3, #11
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	4a03      	ldr	r2, [pc, #12]	; (80030cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000
 80030cc:	080051c4 	.word	0x080051c4

080030d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <RCC_Delay+0x34>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <RCC_Delay+0x38>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	0a5b      	lsrs	r3, r3, #9
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	fb02 f303 	mul.w	r3, r2, r3
 80030ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030ec:	bf00      	nop
  }
  while (Delay --);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1e5a      	subs	r2, r3, #1
 80030f2:	60fa      	str	r2, [r7, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f9      	bne.n	80030ec <RCC_Delay+0x1c>
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000000 	.word	0x20000000
 8003108:	10624dd3 	.word	0x10624dd3

0800310c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d07d      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003128:	2300      	movs	r3, #0
 800312a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312c:	4b4f      	ldr	r3, [pc, #316]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10d      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003138:	4b4c      	ldr	r3, [pc, #304]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	4a4b      	ldr	r2, [pc, #300]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003142:	61d3      	str	r3, [r2, #28]
 8003144:	4b49      	ldr	r3, [pc, #292]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003150:	2301      	movs	r3, #1
 8003152:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	4b46      	ldr	r3, [pc, #280]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d118      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003160:	4b43      	ldr	r3, [pc, #268]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a42      	ldr	r2, [pc, #264]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316c:	f7fd ff1c 	bl	8000fa8 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003172:	e008      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003174:	f7fd ff18 	bl	8000fa8 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e06d      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003186:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003192:	4b36      	ldr	r3, [pc, #216]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d02e      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d027      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031b0:	4b2e      	ldr	r3, [pc, #184]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031ba:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031c0:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031c6:	4a29      	ldr	r2, [pc, #164]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d014      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7fd fee7 	bl	8000fa8 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fd fee3 	bl	8000fa8 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e036      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ee      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003200:	4b1a      	ldr	r3, [pc, #104]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4917      	ldr	r1, [pc, #92]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320e:	4313      	orrs	r3, r2
 8003210:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003212:	7dfb      	ldrb	r3, [r7, #23]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d105      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	4a13      	ldr	r2, [pc, #76]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003222:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	490b      	ldr	r1, [pc, #44]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	4904      	ldr	r1, [pc, #16]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	40007000 	.word	0x40007000
 8003274:	42420440 	.word	0x42420440

08003278 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b08d      	sub	sp, #52	; 0x34
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003280:	4b55      	ldr	r3, [pc, #340]	; (80033d8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003282:	f107 040c 	add.w	r4, r7, #12
 8003286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800328c:	4b53      	ldr	r3, [pc, #332]	; (80033dc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
 8003296:	2300      	movs	r3, #0
 8003298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800329a:	2300      	movs	r3, #0
 800329c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	2300      	movs	r3, #0
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d07f      	beq.n	80033ac <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d002      	beq.n	80032b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d048      	beq.n	8003346 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80032b4:	e08b      	b.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80032b6:	4b4a      	ldr	r3, [pc, #296]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80032bc:	4b48      	ldr	r3, [pc, #288]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d07f      	beq.n	80033c8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	0c9b      	lsrs	r3, r3, #18
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80032d4:	4413      	add	r3, r2
 80032d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032da:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d018      	beq.n	8003318 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032e6:	4b3e      	ldr	r3, [pc, #248]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	0c5b      	lsrs	r3, r3, #17
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80032f4:	4413      	add	r3, r2
 80032f6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00d      	beq.n	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003306:	4a37      	ldr	r2, [pc, #220]	; (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	fbb2 f2f3 	udiv	r2, r2, r3
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003316:	e004      	b.n	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	4a33      	ldr	r2, [pc, #204]	; (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003322:	4b2f      	ldr	r3, [pc, #188]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800332e:	d102      	bne.n	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003334:	e048      	b.n	80033c8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4a2c      	ldr	r2, [pc, #176]	; (80033ec <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	085b      	lsrs	r3, r3, #1
 8003342:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003344:	e040      	b.n	80033c8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003346:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003356:	d108      	bne.n	800336a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
 8003368:	e01f      	b.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003374:	d109      	bne.n	800338a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003376:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003382:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
 8003388:	e00f      	b.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003390:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003394:	d11a      	bne.n	80033cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d014      	beq.n	80033cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80033a2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80033a8:	e010      	b.n	80033cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80033aa:	e00f      	b.n	80033cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80033ac:	f7ff fe7c 	bl	80030a8 <HAL_RCC_GetPCLK2Freq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	0b9b      	lsrs	r3, r3, #14
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	3301      	adds	r3, #1
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80033c6:	e002      	b.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80033c8:	bf00      	nop
 80033ca:	e000      	b.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80033cc:	bf00      	nop
    }
  }
  return (frequency);
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3734      	adds	r7, #52	; 0x34
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd90      	pop	{r4, r7, pc}
 80033d8:	080051a0 	.word	0x080051a0
 80033dc:	080051b0 	.word	0x080051b0
 80033e0:	40021000 	.word	0x40021000
 80033e4:	007a1200 	.word	0x007a1200
 80033e8:	003d0900 	.word	0x003d0900
 80033ec:	aaaaaaab 	.word	0xaaaaaaab

080033f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e03f      	b.n	8003482 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd fbe8 	bl	8000bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2224      	movs	r2, #36	; 0x24
 8003420:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fb8d 	bl	8003b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695a      	ldr	r2, [r3, #20]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b08a      	sub	sp, #40	; 0x28
 800348e:	af02      	add	r7, sp, #8
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d17c      	bne.n	80035a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_UART_Transmit+0x2c>
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e075      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Transmit+0x3e>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e06e      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2221      	movs	r2, #33	; 0x21
 80034da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034de:	f7fd fd63 	bl	8000fa8 <HAL_GetTick>
 80034e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	88fa      	ldrh	r2, [r7, #6]
 80034e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f8:	d108      	bne.n	800350c <HAL_UART_Transmit+0x82>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d104      	bne.n	800350c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	e003      	b.n	8003514 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800351c:	e02a      	b.n	8003574 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2200      	movs	r2, #0
 8003526:	2180      	movs	r1, #128	; 0x80
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f9b0 	bl	800388e <UART_WaitOnFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e036      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800354c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	3302      	adds	r3, #2
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	e007      	b.n	8003566 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	3301      	adds	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1cf      	bne.n	800351e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2200      	movs	r2, #0
 8003586:	2140      	movs	r1, #64	; 0x40
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f980 	bl	800388e <UART_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e006      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	e000      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
  }
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	4613      	mov	r3, r2
 80035ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d140      	bne.n	800364a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_UART_Receive_IT+0x26>
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e039      	b.n	800364c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Receive_IT+0x38>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e032      	b.n	800364c <HAL_UART_Receive_IT+0x9e>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	88fa      	ldrh	r2, [r7, #6]
 80035f8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	88fa      	ldrh	r2, [r7, #6]
 80035fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2222      	movs	r2, #34	; 0x22
 800360a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003624:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0201 	orr.w	r2, r2, #1
 8003634:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0220 	orr.w	r2, r2, #32
 8003644:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	e000      	b.n	800364c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800364a:	2302      	movs	r3, #2
  }
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr
	...

08003658 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003678:	2300      	movs	r3, #0
 800367a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10d      	bne.n	80036aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_UART_IRQHandler+0x52>
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f9d5 	bl	8003a52 <UART_Receive_IT>
      return;
 80036a8:	e0d1      	b.n	800384e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80b0 	beq.w	8003812 <HAL_UART_IRQHandler+0x1ba>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d105      	bne.n	80036c8 <HAL_UART_IRQHandler+0x70>
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80a5 	beq.w	8003812 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_UART_IRQHandler+0x90>
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e0:	f043 0201 	orr.w	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_UART_IRQHandler+0xb0>
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003700:	f043 0202 	orr.w	r2, r3, #2
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_UART_IRQHandler+0xd0>
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	f043 0204 	orr.w	r2, r3, #4
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00f      	beq.n	8003752 <HAL_UART_IRQHandler+0xfa>
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d104      	bne.n	8003746 <HAL_UART_IRQHandler+0xee>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374a:	f043 0208 	orr.w	r2, r3, #8
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d078      	beq.n	800384c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <HAL_UART_IRQHandler+0x11c>
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f96f 	bl	8003a52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	bf14      	ite	ne
 8003782:	2301      	movne	r3, #1
 8003784:	2300      	moveq	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d102      	bne.n	800379c <HAL_UART_IRQHandler+0x144>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d031      	beq.n	8003800 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f8c0 	bl	8003922 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d023      	beq.n	80037f8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037be:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037cc:	4a21      	ldr	r2, [pc, #132]	; (8003854 <HAL_UART_IRQHandler+0x1fc>)
 80037ce:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe f90f 	bl	80019f8 <HAL_DMA_Abort_IT>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d016      	beq.n	800380e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037ea:	4610      	mov	r0, r2
 80037ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ee:	e00e      	b.n	800380e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f843 	bl	800387c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f6:	e00a      	b.n	800380e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f83f 	bl	800387c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fe:	e006      	b.n	800380e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f83b 	bl	800387c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800380c:	e01e      	b.n	800384c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380e:	bf00      	nop
    return;
 8003810:	e01c      	b.n	800384c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_UART_IRQHandler+0x1d6>
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8ac 	bl	8003984 <UART_Transmit_IT>
    return;
 800382c:	e00f      	b.n	800384e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <HAL_UART_IRQHandler+0x1f6>
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f8ed 	bl	8003a22 <UART_EndTransmit_IT>
    return;
 8003848:	bf00      	nop
 800384a:	e000      	b.n	800384e <HAL_UART_IRQHandler+0x1f6>
    return;
 800384c:	bf00      	nop
  }
}
 800384e:	3720      	adds	r7, #32
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	0800395d 	.word	0x0800395d

08003858 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	4613      	mov	r3, r2
 800389c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800389e:	e02c      	b.n	80038fa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a6:	d028      	beq.n	80038fa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x30>
 80038ae:	f7fd fb7b 	bl	8000fa8 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d21d      	bcs.n	80038fa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038cc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e00f      	b.n	800391a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4013      	ands	r3, r2
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	429a      	cmp	r2, r3
 8003916:	d0c3      	beq.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003938:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f7ff ff80 	bl	800387c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b21      	cmp	r3, #33	; 0x21
 8003996:	d13e      	bne.n	8003a16 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a0:	d114      	bne.n	80039cc <UART_Transmit_IT+0x48>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d110      	bne.n	80039cc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	1c9a      	adds	r2, r3, #2
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	621a      	str	r2, [r3, #32]
 80039ca:	e008      	b.n	80039de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	1c59      	adds	r1, r3, #1
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6211      	str	r1, [r2, #32]
 80039d6:	781a      	ldrb	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4619      	mov	r1, r3
 80039ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10f      	bne.n	8003a12 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e000      	b.n	8003a18 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
  }
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ff08 	bl	8003858 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b22      	cmp	r3, #34	; 0x22
 8003a64:	d170      	bne.n	8003b48 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6e:	d117      	bne.n	8003aa0 <UART_Receive_IT+0x4e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d113      	bne.n	8003aa0 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	1c9a      	adds	r2, r3, #2
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	629a      	str	r2, [r3, #40]	; 0x28
 8003a9e:	e026      	b.n	8003aee <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab2:	d007      	beq.n	8003ac4 <UART_Receive_IT+0x72>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10a      	bne.n	8003ad2 <UART_Receive_IT+0x80>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d106      	bne.n	8003ad2 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	e008      	b.n	8003ae4 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4619      	mov	r1, r3
 8003afc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d120      	bne.n	8003b44 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0220 	bic.w	r2, r2, #32
 8003b10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff fe95 	bl	800386a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e002      	b.n	8003b4a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	e000      	b.n	8003b4a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003b48:	2302      	movs	r3, #2
  }
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b8e:	f023 030c 	bic.w	r3, r3, #12
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <UART_SetConfig+0x114>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d103      	bne.n	8003bc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bbc:	f7ff fa74 	bl	80030a8 <HAL_RCC_GetPCLK2Freq>
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	e002      	b.n	8003bca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bc4:	f7ff fa5c 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 8003bc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009a      	lsls	r2, r3, #2
 8003bd4:	441a      	add	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be0:	4a22      	ldr	r2, [pc, #136]	; (8003c6c <UART_SetConfig+0x118>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	0119      	lsls	r1, r3, #4
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009a      	lsls	r2, r3, #2
 8003bf4:	441a      	add	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c00:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <UART_SetConfig+0x118>)
 8003c02:	fba3 0302 	umull	r0, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2064      	movs	r0, #100	; 0x64
 8003c0a:	fb00 f303 	mul.w	r3, r0, r3
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	3332      	adds	r3, #50	; 0x32
 8003c14:	4a15      	ldr	r2, [pc, #84]	; (8003c6c <UART_SetConfig+0x118>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c20:	4419      	add	r1, r3
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009a      	lsls	r2, r3, #2
 8003c2c:	441a      	add	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <UART_SetConfig+0x118>)
 8003c3a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2064      	movs	r0, #100	; 0x64
 8003c42:	fb00 f303 	mul.w	r3, r0, r3
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	3332      	adds	r3, #50	; 0x32
 8003c4c:	4a07      	ldr	r2, [pc, #28]	; (8003c6c <UART_SetConfig+0x118>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	f003 020f 	and.w	r2, r3, #15
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	440a      	add	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c60:	bf00      	nop
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40013800 	.word	0x40013800
 8003c6c:	51eb851f 	.word	0x51eb851f

08003c70 <atoi>:
 8003c70:	220a      	movs	r2, #10
 8003c72:	2100      	movs	r1, #0
 8003c74:	f000 b9a6 	b.w	8003fc4 <strtol>

08003c78 <__errno>:
 8003c78:	4b01      	ldr	r3, [pc, #4]	; (8003c80 <__errno+0x8>)
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	2000000c 	.word	0x2000000c

08003c84 <__libc_init_array>:
 8003c84:	b570      	push	{r4, r5, r6, lr}
 8003c86:	2500      	movs	r5, #0
 8003c88:	4e0c      	ldr	r6, [pc, #48]	; (8003cbc <__libc_init_array+0x38>)
 8003c8a:	4c0d      	ldr	r4, [pc, #52]	; (8003cc0 <__libc_init_array+0x3c>)
 8003c8c:	1ba4      	subs	r4, r4, r6
 8003c8e:	10a4      	asrs	r4, r4, #2
 8003c90:	42a5      	cmp	r5, r4
 8003c92:	d109      	bne.n	8003ca8 <__libc_init_array+0x24>
 8003c94:	f001 f8e2 	bl	8004e5c <_init>
 8003c98:	2500      	movs	r5, #0
 8003c9a:	4e0a      	ldr	r6, [pc, #40]	; (8003cc4 <__libc_init_array+0x40>)
 8003c9c:	4c0a      	ldr	r4, [pc, #40]	; (8003cc8 <__libc_init_array+0x44>)
 8003c9e:	1ba4      	subs	r4, r4, r6
 8003ca0:	10a4      	asrs	r4, r4, #2
 8003ca2:	42a5      	cmp	r5, r4
 8003ca4:	d105      	bne.n	8003cb2 <__libc_init_array+0x2e>
 8003ca6:	bd70      	pop	{r4, r5, r6, pc}
 8003ca8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cac:	4798      	blx	r3
 8003cae:	3501      	adds	r5, #1
 8003cb0:	e7ee      	b.n	8003c90 <__libc_init_array+0xc>
 8003cb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cb6:	4798      	blx	r3
 8003cb8:	3501      	adds	r5, #1
 8003cba:	e7f2      	b.n	8003ca2 <__libc_init_array+0x1e>
 8003cbc:	08005370 	.word	0x08005370
 8003cc0:	08005370 	.word	0x08005370
 8003cc4:	08005370 	.word	0x08005370
 8003cc8:	08005374 	.word	0x08005374

08003ccc <memcpy>:
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	1e43      	subs	r3, r0, #1
 8003cd0:	440a      	add	r2, r1
 8003cd2:	4291      	cmp	r1, r2
 8003cd4:	d100      	bne.n	8003cd8 <memcpy+0xc>
 8003cd6:	bd10      	pop	{r4, pc}
 8003cd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ce0:	e7f7      	b.n	8003cd2 <memcpy+0x6>

08003ce2 <memset>:
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4402      	add	r2, r0
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d100      	bne.n	8003cec <memset+0xa>
 8003cea:	4770      	bx	lr
 8003cec:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf0:	e7f9      	b.n	8003ce6 <memset+0x4>
	...

08003cf4 <iprintf>:
 8003cf4:	b40f      	push	{r0, r1, r2, r3}
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <iprintf+0x2c>)
 8003cf8:	b513      	push	{r0, r1, r4, lr}
 8003cfa:	681c      	ldr	r4, [r3, #0]
 8003cfc:	b124      	cbz	r4, 8003d08 <iprintf+0x14>
 8003cfe:	69a3      	ldr	r3, [r4, #24]
 8003d00:	b913      	cbnz	r3, 8003d08 <iprintf+0x14>
 8003d02:	4620      	mov	r0, r4
 8003d04:	f000 fb24 	bl	8004350 <__sinit>
 8003d08:	ab05      	add	r3, sp, #20
 8003d0a:	9a04      	ldr	r2, [sp, #16]
 8003d0c:	68a1      	ldr	r1, [r4, #8]
 8003d0e:	4620      	mov	r0, r4
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	f000 fcf7 	bl	8004704 <_vfiprintf_r>
 8003d16:	b002      	add	sp, #8
 8003d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d1c:	b004      	add	sp, #16
 8003d1e:	4770      	bx	lr
 8003d20:	2000000c 	.word	0x2000000c

08003d24 <putchar>:
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <putchar+0x24>)
 8003d28:	4605      	mov	r5, r0
 8003d2a:	681c      	ldr	r4, [r3, #0]
 8003d2c:	b124      	cbz	r4, 8003d38 <putchar+0x14>
 8003d2e:	69a3      	ldr	r3, [r4, #24]
 8003d30:	b913      	cbnz	r3, 8003d38 <putchar+0x14>
 8003d32:	4620      	mov	r0, r4
 8003d34:	f000 fb0c 	bl	8004350 <__sinit>
 8003d38:	68a2      	ldr	r2, [r4, #8]
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d42:	f000 bf7d 	b.w	8004c40 <_putc_r>
 8003d46:	bf00      	nop
 8003d48:	2000000c 	.word	0x2000000c

08003d4c <_puts_r>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	460e      	mov	r6, r1
 8003d50:	4605      	mov	r5, r0
 8003d52:	b118      	cbz	r0, 8003d5c <_puts_r+0x10>
 8003d54:	6983      	ldr	r3, [r0, #24]
 8003d56:	b90b      	cbnz	r3, 8003d5c <_puts_r+0x10>
 8003d58:	f000 fafa 	bl	8004350 <__sinit>
 8003d5c:	69ab      	ldr	r3, [r5, #24]
 8003d5e:	68ac      	ldr	r4, [r5, #8]
 8003d60:	b913      	cbnz	r3, 8003d68 <_puts_r+0x1c>
 8003d62:	4628      	mov	r0, r5
 8003d64:	f000 faf4 	bl	8004350 <__sinit>
 8003d68:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <_puts_r+0xac>)
 8003d6a:	429c      	cmp	r4, r3
 8003d6c:	d117      	bne.n	8003d9e <_puts_r+0x52>
 8003d6e:	686c      	ldr	r4, [r5, #4]
 8003d70:	89a3      	ldrh	r3, [r4, #12]
 8003d72:	071b      	lsls	r3, r3, #28
 8003d74:	d51d      	bpl.n	8003db2 <_puts_r+0x66>
 8003d76:	6923      	ldr	r3, [r4, #16]
 8003d78:	b1db      	cbz	r3, 8003db2 <_puts_r+0x66>
 8003d7a:	3e01      	subs	r6, #1
 8003d7c:	68a3      	ldr	r3, [r4, #8]
 8003d7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d82:	3b01      	subs	r3, #1
 8003d84:	60a3      	str	r3, [r4, #8]
 8003d86:	b9e9      	cbnz	r1, 8003dc4 <_puts_r+0x78>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	da2e      	bge.n	8003dea <_puts_r+0x9e>
 8003d8c:	4622      	mov	r2, r4
 8003d8e:	210a      	movs	r1, #10
 8003d90:	4628      	mov	r0, r5
 8003d92:	f000 f92d 	bl	8003ff0 <__swbuf_r>
 8003d96:	3001      	adds	r0, #1
 8003d98:	d011      	beq.n	8003dbe <_puts_r+0x72>
 8003d9a:	200a      	movs	r0, #10
 8003d9c:	e011      	b.n	8003dc2 <_puts_r+0x76>
 8003d9e:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <_puts_r+0xb0>)
 8003da0:	429c      	cmp	r4, r3
 8003da2:	d101      	bne.n	8003da8 <_puts_r+0x5c>
 8003da4:	68ac      	ldr	r4, [r5, #8]
 8003da6:	e7e3      	b.n	8003d70 <_puts_r+0x24>
 8003da8:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <_puts_r+0xb4>)
 8003daa:	429c      	cmp	r4, r3
 8003dac:	bf08      	it	eq
 8003dae:	68ec      	ldreq	r4, [r5, #12]
 8003db0:	e7de      	b.n	8003d70 <_puts_r+0x24>
 8003db2:	4621      	mov	r1, r4
 8003db4:	4628      	mov	r0, r5
 8003db6:	f000 f96d 	bl	8004094 <__swsetup_r>
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	d0dd      	beq.n	8003d7a <_puts_r+0x2e>
 8003dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	da04      	bge.n	8003dd2 <_puts_r+0x86>
 8003dc8:	69a2      	ldr	r2, [r4, #24]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	dc06      	bgt.n	8003ddc <_puts_r+0x90>
 8003dce:	290a      	cmp	r1, #10
 8003dd0:	d004      	beq.n	8003ddc <_puts_r+0x90>
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	6022      	str	r2, [r4, #0]
 8003dd8:	7019      	strb	r1, [r3, #0]
 8003dda:	e7cf      	b.n	8003d7c <_puts_r+0x30>
 8003ddc:	4622      	mov	r2, r4
 8003dde:	4628      	mov	r0, r5
 8003de0:	f000 f906 	bl	8003ff0 <__swbuf_r>
 8003de4:	3001      	adds	r0, #1
 8003de6:	d1c9      	bne.n	8003d7c <_puts_r+0x30>
 8003de8:	e7e9      	b.n	8003dbe <_puts_r+0x72>
 8003dea:	200a      	movs	r0, #10
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	6022      	str	r2, [r4, #0]
 8003df2:	7018      	strb	r0, [r3, #0]
 8003df4:	e7e5      	b.n	8003dc2 <_puts_r+0x76>
 8003df6:	bf00      	nop
 8003df8:	080051f0 	.word	0x080051f0
 8003dfc:	08005210 	.word	0x08005210
 8003e00:	080051d0 	.word	0x080051d0

08003e04 <puts>:
 8003e04:	4b02      	ldr	r3, [pc, #8]	; (8003e10 <puts+0xc>)
 8003e06:	4601      	mov	r1, r0
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	f7ff bf9f 	b.w	8003d4c <_puts_r>
 8003e0e:	bf00      	nop
 8003e10:	2000000c 	.word	0x2000000c

08003e14 <strcpy>:
 8003e14:	4603      	mov	r3, r0
 8003e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e1a:	f803 2b01 	strb.w	r2, [r3], #1
 8003e1e:	2a00      	cmp	r2, #0
 8003e20:	d1f9      	bne.n	8003e16 <strcpy+0x2>
 8003e22:	4770      	bx	lr

08003e24 <strtok>:
 8003e24:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <strtok+0x50>)
 8003e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e2a:	681d      	ldr	r5, [r3, #0]
 8003e2c:	4606      	mov	r6, r0
 8003e2e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003e30:	460f      	mov	r7, r1
 8003e32:	b9b4      	cbnz	r4, 8003e62 <strtok+0x3e>
 8003e34:	2050      	movs	r0, #80	; 0x50
 8003e36:	f000 fb7d 	bl	8004534 <malloc>
 8003e3a:	65a8      	str	r0, [r5, #88]	; 0x58
 8003e3c:	e9c0 4400 	strd	r4, r4, [r0]
 8003e40:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003e44:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003e48:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003e4c:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003e50:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003e54:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003e58:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003e5c:	6184      	str	r4, [r0, #24]
 8003e5e:	7704      	strb	r4, [r0, #28]
 8003e60:	6244      	str	r4, [r0, #36]	; 0x24
 8003e62:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003e64:	4639      	mov	r1, r7
 8003e66:	4630      	mov	r0, r6
 8003e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f000 b803 	b.w	8003e78 <__strtok_r>
 8003e72:	bf00      	nop
 8003e74:	2000000c 	.word	0x2000000c

08003e78 <__strtok_r>:
 8003e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e7a:	b918      	cbnz	r0, 8003e84 <__strtok_r+0xc>
 8003e7c:	6810      	ldr	r0, [r2, #0]
 8003e7e:	b908      	cbnz	r0, 8003e84 <__strtok_r+0xc>
 8003e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e82:	4620      	mov	r0, r4
 8003e84:	4604      	mov	r4, r0
 8003e86:	460f      	mov	r7, r1
 8003e88:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003e8c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003e90:	b91e      	cbnz	r6, 8003e9a <__strtok_r+0x22>
 8003e92:	b96d      	cbnz	r5, 8003eb0 <__strtok_r+0x38>
 8003e94:	6015      	str	r5, [r2, #0]
 8003e96:	4628      	mov	r0, r5
 8003e98:	e7f2      	b.n	8003e80 <__strtok_r+0x8>
 8003e9a:	42b5      	cmp	r5, r6
 8003e9c:	d1f6      	bne.n	8003e8c <__strtok_r+0x14>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1ef      	bne.n	8003e82 <__strtok_r+0xa>
 8003ea2:	6014      	str	r4, [r2, #0]
 8003ea4:	7003      	strb	r3, [r0, #0]
 8003ea6:	e7eb      	b.n	8003e80 <__strtok_r+0x8>
 8003ea8:	462b      	mov	r3, r5
 8003eaa:	e00d      	b.n	8003ec8 <__strtok_r+0x50>
 8003eac:	b926      	cbnz	r6, 8003eb8 <__strtok_r+0x40>
 8003eae:	461c      	mov	r4, r3
 8003eb0:	4623      	mov	r3, r4
 8003eb2:	460f      	mov	r7, r1
 8003eb4:	f813 5b01 	ldrb.w	r5, [r3], #1
 8003eb8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003ebc:	42b5      	cmp	r5, r6
 8003ebe:	d1f5      	bne.n	8003eac <__strtok_r+0x34>
 8003ec0:	2d00      	cmp	r5, #0
 8003ec2:	d0f1      	beq.n	8003ea8 <__strtok_r+0x30>
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	7021      	strb	r1, [r4, #0]
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	e7d9      	b.n	8003e80 <__strtok_r+0x8>

08003ecc <_strtol_l.isra.0>:
 8003ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed0:	4680      	mov	r8, r0
 8003ed2:	4689      	mov	r9, r1
 8003ed4:	4692      	mov	sl, r2
 8003ed6:	461e      	mov	r6, r3
 8003ed8:	460f      	mov	r7, r1
 8003eda:	463d      	mov	r5, r7
 8003edc:	9808      	ldr	r0, [sp, #32]
 8003ede:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ee2:	f000 fabf 	bl	8004464 <__locale_ctype_ptr_l>
 8003ee6:	4420      	add	r0, r4
 8003ee8:	7843      	ldrb	r3, [r0, #1]
 8003eea:	f013 0308 	ands.w	r3, r3, #8
 8003eee:	d132      	bne.n	8003f56 <_strtol_l.isra.0+0x8a>
 8003ef0:	2c2d      	cmp	r4, #45	; 0x2d
 8003ef2:	d132      	bne.n	8003f5a <_strtol_l.isra.0+0x8e>
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	787c      	ldrb	r4, [r7, #1]
 8003ef8:	1cbd      	adds	r5, r7, #2
 8003efa:	2e00      	cmp	r6, #0
 8003efc:	d05d      	beq.n	8003fba <_strtol_l.isra.0+0xee>
 8003efe:	2e10      	cmp	r6, #16
 8003f00:	d109      	bne.n	8003f16 <_strtol_l.isra.0+0x4a>
 8003f02:	2c30      	cmp	r4, #48	; 0x30
 8003f04:	d107      	bne.n	8003f16 <_strtol_l.isra.0+0x4a>
 8003f06:	782b      	ldrb	r3, [r5, #0]
 8003f08:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003f0c:	2b58      	cmp	r3, #88	; 0x58
 8003f0e:	d14f      	bne.n	8003fb0 <_strtol_l.isra.0+0xe4>
 8003f10:	2610      	movs	r6, #16
 8003f12:	786c      	ldrb	r4, [r5, #1]
 8003f14:	3502      	adds	r5, #2
 8003f16:	2a00      	cmp	r2, #0
 8003f18:	bf14      	ite	ne
 8003f1a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003f1e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003f22:	2700      	movs	r7, #0
 8003f24:	fbb1 fcf6 	udiv	ip, r1, r6
 8003f28:	4638      	mov	r0, r7
 8003f2a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003f2e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003f32:	2b09      	cmp	r3, #9
 8003f34:	d817      	bhi.n	8003f66 <_strtol_l.isra.0+0x9a>
 8003f36:	461c      	mov	r4, r3
 8003f38:	42a6      	cmp	r6, r4
 8003f3a:	dd23      	ble.n	8003f84 <_strtol_l.isra.0+0xb8>
 8003f3c:	1c7b      	adds	r3, r7, #1
 8003f3e:	d007      	beq.n	8003f50 <_strtol_l.isra.0+0x84>
 8003f40:	4584      	cmp	ip, r0
 8003f42:	d31c      	bcc.n	8003f7e <_strtol_l.isra.0+0xb2>
 8003f44:	d101      	bne.n	8003f4a <_strtol_l.isra.0+0x7e>
 8003f46:	45a6      	cmp	lr, r4
 8003f48:	db19      	blt.n	8003f7e <_strtol_l.isra.0+0xb2>
 8003f4a:	2701      	movs	r7, #1
 8003f4c:	fb00 4006 	mla	r0, r0, r6, r4
 8003f50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f54:	e7eb      	b.n	8003f2e <_strtol_l.isra.0+0x62>
 8003f56:	462f      	mov	r7, r5
 8003f58:	e7bf      	b.n	8003eda <_strtol_l.isra.0+0xe>
 8003f5a:	2c2b      	cmp	r4, #43	; 0x2b
 8003f5c:	bf04      	itt	eq
 8003f5e:	1cbd      	addeq	r5, r7, #2
 8003f60:	787c      	ldrbeq	r4, [r7, #1]
 8003f62:	461a      	mov	r2, r3
 8003f64:	e7c9      	b.n	8003efa <_strtol_l.isra.0+0x2e>
 8003f66:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003f6a:	2b19      	cmp	r3, #25
 8003f6c:	d801      	bhi.n	8003f72 <_strtol_l.isra.0+0xa6>
 8003f6e:	3c37      	subs	r4, #55	; 0x37
 8003f70:	e7e2      	b.n	8003f38 <_strtol_l.isra.0+0x6c>
 8003f72:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003f76:	2b19      	cmp	r3, #25
 8003f78:	d804      	bhi.n	8003f84 <_strtol_l.isra.0+0xb8>
 8003f7a:	3c57      	subs	r4, #87	; 0x57
 8003f7c:	e7dc      	b.n	8003f38 <_strtol_l.isra.0+0x6c>
 8003f7e:	f04f 37ff 	mov.w	r7, #4294967295
 8003f82:	e7e5      	b.n	8003f50 <_strtol_l.isra.0+0x84>
 8003f84:	1c7b      	adds	r3, r7, #1
 8003f86:	d108      	bne.n	8003f9a <_strtol_l.isra.0+0xce>
 8003f88:	2322      	movs	r3, #34	; 0x22
 8003f8a:	4608      	mov	r0, r1
 8003f8c:	f8c8 3000 	str.w	r3, [r8]
 8003f90:	f1ba 0f00 	cmp.w	sl, #0
 8003f94:	d107      	bne.n	8003fa6 <_strtol_l.isra.0+0xda>
 8003f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f9a:	b102      	cbz	r2, 8003f9e <_strtol_l.isra.0+0xd2>
 8003f9c:	4240      	negs	r0, r0
 8003f9e:	f1ba 0f00 	cmp.w	sl, #0
 8003fa2:	d0f8      	beq.n	8003f96 <_strtol_l.isra.0+0xca>
 8003fa4:	b10f      	cbz	r7, 8003faa <_strtol_l.isra.0+0xde>
 8003fa6:	f105 39ff 	add.w	r9, r5, #4294967295
 8003faa:	f8ca 9000 	str.w	r9, [sl]
 8003fae:	e7f2      	b.n	8003f96 <_strtol_l.isra.0+0xca>
 8003fb0:	2430      	movs	r4, #48	; 0x30
 8003fb2:	2e00      	cmp	r6, #0
 8003fb4:	d1af      	bne.n	8003f16 <_strtol_l.isra.0+0x4a>
 8003fb6:	2608      	movs	r6, #8
 8003fb8:	e7ad      	b.n	8003f16 <_strtol_l.isra.0+0x4a>
 8003fba:	2c30      	cmp	r4, #48	; 0x30
 8003fbc:	d0a3      	beq.n	8003f06 <_strtol_l.isra.0+0x3a>
 8003fbe:	260a      	movs	r6, #10
 8003fc0:	e7a9      	b.n	8003f16 <_strtol_l.isra.0+0x4a>
	...

08003fc4 <strtol>:
 8003fc4:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <strtol+0x24>)
 8003fc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fc8:	681c      	ldr	r4, [r3, #0]
 8003fca:	4d08      	ldr	r5, [pc, #32]	; (8003fec <strtol+0x28>)
 8003fcc:	6a23      	ldr	r3, [r4, #32]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	bf08      	it	eq
 8003fd2:	462b      	moveq	r3, r5
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	460a      	mov	r2, r1
 8003fda:	4601      	mov	r1, r0
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f7ff ff75 	bl	8003ecc <_strtol_l.isra.0>
 8003fe2:	b003      	add	sp, #12
 8003fe4:	bd30      	pop	{r4, r5, pc}
 8003fe6:	bf00      	nop
 8003fe8:	2000000c 	.word	0x2000000c
 8003fec:	20000070 	.word	0x20000070

08003ff0 <__swbuf_r>:
 8003ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff2:	460e      	mov	r6, r1
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	4605      	mov	r5, r0
 8003ff8:	b118      	cbz	r0, 8004002 <__swbuf_r+0x12>
 8003ffa:	6983      	ldr	r3, [r0, #24]
 8003ffc:	b90b      	cbnz	r3, 8004002 <__swbuf_r+0x12>
 8003ffe:	f000 f9a7 	bl	8004350 <__sinit>
 8004002:	4b21      	ldr	r3, [pc, #132]	; (8004088 <__swbuf_r+0x98>)
 8004004:	429c      	cmp	r4, r3
 8004006:	d12a      	bne.n	800405e <__swbuf_r+0x6e>
 8004008:	686c      	ldr	r4, [r5, #4]
 800400a:	69a3      	ldr	r3, [r4, #24]
 800400c:	60a3      	str	r3, [r4, #8]
 800400e:	89a3      	ldrh	r3, [r4, #12]
 8004010:	071a      	lsls	r2, r3, #28
 8004012:	d52e      	bpl.n	8004072 <__swbuf_r+0x82>
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	b363      	cbz	r3, 8004072 <__swbuf_r+0x82>
 8004018:	6923      	ldr	r3, [r4, #16]
 800401a:	6820      	ldr	r0, [r4, #0]
 800401c:	b2f6      	uxtb	r6, r6
 800401e:	1ac0      	subs	r0, r0, r3
 8004020:	6963      	ldr	r3, [r4, #20]
 8004022:	4637      	mov	r7, r6
 8004024:	4283      	cmp	r3, r0
 8004026:	dc04      	bgt.n	8004032 <__swbuf_r+0x42>
 8004028:	4621      	mov	r1, r4
 800402a:	4628      	mov	r0, r5
 800402c:	f000 f926 	bl	800427c <_fflush_r>
 8004030:	bb28      	cbnz	r0, 800407e <__swbuf_r+0x8e>
 8004032:	68a3      	ldr	r3, [r4, #8]
 8004034:	3001      	adds	r0, #1
 8004036:	3b01      	subs	r3, #1
 8004038:	60a3      	str	r3, [r4, #8]
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	6022      	str	r2, [r4, #0]
 8004040:	701e      	strb	r6, [r3, #0]
 8004042:	6963      	ldr	r3, [r4, #20]
 8004044:	4283      	cmp	r3, r0
 8004046:	d004      	beq.n	8004052 <__swbuf_r+0x62>
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	07db      	lsls	r3, r3, #31
 800404c:	d519      	bpl.n	8004082 <__swbuf_r+0x92>
 800404e:	2e0a      	cmp	r6, #10
 8004050:	d117      	bne.n	8004082 <__swbuf_r+0x92>
 8004052:	4621      	mov	r1, r4
 8004054:	4628      	mov	r0, r5
 8004056:	f000 f911 	bl	800427c <_fflush_r>
 800405a:	b190      	cbz	r0, 8004082 <__swbuf_r+0x92>
 800405c:	e00f      	b.n	800407e <__swbuf_r+0x8e>
 800405e:	4b0b      	ldr	r3, [pc, #44]	; (800408c <__swbuf_r+0x9c>)
 8004060:	429c      	cmp	r4, r3
 8004062:	d101      	bne.n	8004068 <__swbuf_r+0x78>
 8004064:	68ac      	ldr	r4, [r5, #8]
 8004066:	e7d0      	b.n	800400a <__swbuf_r+0x1a>
 8004068:	4b09      	ldr	r3, [pc, #36]	; (8004090 <__swbuf_r+0xa0>)
 800406a:	429c      	cmp	r4, r3
 800406c:	bf08      	it	eq
 800406e:	68ec      	ldreq	r4, [r5, #12]
 8004070:	e7cb      	b.n	800400a <__swbuf_r+0x1a>
 8004072:	4621      	mov	r1, r4
 8004074:	4628      	mov	r0, r5
 8004076:	f000 f80d 	bl	8004094 <__swsetup_r>
 800407a:	2800      	cmp	r0, #0
 800407c:	d0cc      	beq.n	8004018 <__swbuf_r+0x28>
 800407e:	f04f 37ff 	mov.w	r7, #4294967295
 8004082:	4638      	mov	r0, r7
 8004084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004086:	bf00      	nop
 8004088:	080051f0 	.word	0x080051f0
 800408c:	08005210 	.word	0x08005210
 8004090:	080051d0 	.word	0x080051d0

08004094 <__swsetup_r>:
 8004094:	4b32      	ldr	r3, [pc, #200]	; (8004160 <__swsetup_r+0xcc>)
 8004096:	b570      	push	{r4, r5, r6, lr}
 8004098:	681d      	ldr	r5, [r3, #0]
 800409a:	4606      	mov	r6, r0
 800409c:	460c      	mov	r4, r1
 800409e:	b125      	cbz	r5, 80040aa <__swsetup_r+0x16>
 80040a0:	69ab      	ldr	r3, [r5, #24]
 80040a2:	b913      	cbnz	r3, 80040aa <__swsetup_r+0x16>
 80040a4:	4628      	mov	r0, r5
 80040a6:	f000 f953 	bl	8004350 <__sinit>
 80040aa:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <__swsetup_r+0xd0>)
 80040ac:	429c      	cmp	r4, r3
 80040ae:	d10f      	bne.n	80040d0 <__swsetup_r+0x3c>
 80040b0:	686c      	ldr	r4, [r5, #4]
 80040b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	0715      	lsls	r5, r2, #28
 80040ba:	d42c      	bmi.n	8004116 <__swsetup_r+0x82>
 80040bc:	06d0      	lsls	r0, r2, #27
 80040be:	d411      	bmi.n	80040e4 <__swsetup_r+0x50>
 80040c0:	2209      	movs	r2, #9
 80040c2:	6032      	str	r2, [r6, #0]
 80040c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c8:	81a3      	strh	r3, [r4, #12]
 80040ca:	f04f 30ff 	mov.w	r0, #4294967295
 80040ce:	e03e      	b.n	800414e <__swsetup_r+0xba>
 80040d0:	4b25      	ldr	r3, [pc, #148]	; (8004168 <__swsetup_r+0xd4>)
 80040d2:	429c      	cmp	r4, r3
 80040d4:	d101      	bne.n	80040da <__swsetup_r+0x46>
 80040d6:	68ac      	ldr	r4, [r5, #8]
 80040d8:	e7eb      	b.n	80040b2 <__swsetup_r+0x1e>
 80040da:	4b24      	ldr	r3, [pc, #144]	; (800416c <__swsetup_r+0xd8>)
 80040dc:	429c      	cmp	r4, r3
 80040de:	bf08      	it	eq
 80040e0:	68ec      	ldreq	r4, [r5, #12]
 80040e2:	e7e6      	b.n	80040b2 <__swsetup_r+0x1e>
 80040e4:	0751      	lsls	r1, r2, #29
 80040e6:	d512      	bpl.n	800410e <__swsetup_r+0x7a>
 80040e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040ea:	b141      	cbz	r1, 80040fe <__swsetup_r+0x6a>
 80040ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040f0:	4299      	cmp	r1, r3
 80040f2:	d002      	beq.n	80040fa <__swsetup_r+0x66>
 80040f4:	4630      	mov	r0, r6
 80040f6:	f000 fa37 	bl	8004568 <_free_r>
 80040fa:	2300      	movs	r3, #0
 80040fc:	6363      	str	r3, [r4, #52]	; 0x34
 80040fe:	89a3      	ldrh	r3, [r4, #12]
 8004100:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004104:	81a3      	strh	r3, [r4, #12]
 8004106:	2300      	movs	r3, #0
 8004108:	6063      	str	r3, [r4, #4]
 800410a:	6923      	ldr	r3, [r4, #16]
 800410c:	6023      	str	r3, [r4, #0]
 800410e:	89a3      	ldrh	r3, [r4, #12]
 8004110:	f043 0308 	orr.w	r3, r3, #8
 8004114:	81a3      	strh	r3, [r4, #12]
 8004116:	6923      	ldr	r3, [r4, #16]
 8004118:	b94b      	cbnz	r3, 800412e <__swsetup_r+0x9a>
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004124:	d003      	beq.n	800412e <__swsetup_r+0x9a>
 8004126:	4621      	mov	r1, r4
 8004128:	4630      	mov	r0, r6
 800412a:	f000 f9c3 	bl	80044b4 <__smakebuf_r>
 800412e:	89a2      	ldrh	r2, [r4, #12]
 8004130:	f012 0301 	ands.w	r3, r2, #1
 8004134:	d00c      	beq.n	8004150 <__swsetup_r+0xbc>
 8004136:	2300      	movs	r3, #0
 8004138:	60a3      	str	r3, [r4, #8]
 800413a:	6963      	ldr	r3, [r4, #20]
 800413c:	425b      	negs	r3, r3
 800413e:	61a3      	str	r3, [r4, #24]
 8004140:	6923      	ldr	r3, [r4, #16]
 8004142:	b953      	cbnz	r3, 800415a <__swsetup_r+0xc6>
 8004144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004148:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800414c:	d1ba      	bne.n	80040c4 <__swsetup_r+0x30>
 800414e:	bd70      	pop	{r4, r5, r6, pc}
 8004150:	0792      	lsls	r2, r2, #30
 8004152:	bf58      	it	pl
 8004154:	6963      	ldrpl	r3, [r4, #20]
 8004156:	60a3      	str	r3, [r4, #8]
 8004158:	e7f2      	b.n	8004140 <__swsetup_r+0xac>
 800415a:	2000      	movs	r0, #0
 800415c:	e7f7      	b.n	800414e <__swsetup_r+0xba>
 800415e:	bf00      	nop
 8004160:	2000000c 	.word	0x2000000c
 8004164:	080051f0 	.word	0x080051f0
 8004168:	08005210 	.word	0x08005210
 800416c:	080051d0 	.word	0x080051d0

08004170 <__sflush_r>:
 8004170:	898a      	ldrh	r2, [r1, #12]
 8004172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004176:	4605      	mov	r5, r0
 8004178:	0710      	lsls	r0, r2, #28
 800417a:	460c      	mov	r4, r1
 800417c:	d458      	bmi.n	8004230 <__sflush_r+0xc0>
 800417e:	684b      	ldr	r3, [r1, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	dc05      	bgt.n	8004190 <__sflush_r+0x20>
 8004184:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	dc02      	bgt.n	8004190 <__sflush_r+0x20>
 800418a:	2000      	movs	r0, #0
 800418c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004192:	2e00      	cmp	r6, #0
 8004194:	d0f9      	beq.n	800418a <__sflush_r+0x1a>
 8004196:	2300      	movs	r3, #0
 8004198:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800419c:	682f      	ldr	r7, [r5, #0]
 800419e:	6a21      	ldr	r1, [r4, #32]
 80041a0:	602b      	str	r3, [r5, #0]
 80041a2:	d032      	beq.n	800420a <__sflush_r+0x9a>
 80041a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041a6:	89a3      	ldrh	r3, [r4, #12]
 80041a8:	075a      	lsls	r2, r3, #29
 80041aa:	d505      	bpl.n	80041b8 <__sflush_r+0x48>
 80041ac:	6863      	ldr	r3, [r4, #4]
 80041ae:	1ac0      	subs	r0, r0, r3
 80041b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041b2:	b10b      	cbz	r3, 80041b8 <__sflush_r+0x48>
 80041b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041b6:	1ac0      	subs	r0, r0, r3
 80041b8:	2300      	movs	r3, #0
 80041ba:	4602      	mov	r2, r0
 80041bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041be:	6a21      	ldr	r1, [r4, #32]
 80041c0:	4628      	mov	r0, r5
 80041c2:	47b0      	blx	r6
 80041c4:	1c43      	adds	r3, r0, #1
 80041c6:	89a3      	ldrh	r3, [r4, #12]
 80041c8:	d106      	bne.n	80041d8 <__sflush_r+0x68>
 80041ca:	6829      	ldr	r1, [r5, #0]
 80041cc:	291d      	cmp	r1, #29
 80041ce:	d848      	bhi.n	8004262 <__sflush_r+0xf2>
 80041d0:	4a29      	ldr	r2, [pc, #164]	; (8004278 <__sflush_r+0x108>)
 80041d2:	40ca      	lsrs	r2, r1
 80041d4:	07d6      	lsls	r6, r2, #31
 80041d6:	d544      	bpl.n	8004262 <__sflush_r+0xf2>
 80041d8:	2200      	movs	r2, #0
 80041da:	6062      	str	r2, [r4, #4]
 80041dc:	6922      	ldr	r2, [r4, #16]
 80041de:	04d9      	lsls	r1, r3, #19
 80041e0:	6022      	str	r2, [r4, #0]
 80041e2:	d504      	bpl.n	80041ee <__sflush_r+0x7e>
 80041e4:	1c42      	adds	r2, r0, #1
 80041e6:	d101      	bne.n	80041ec <__sflush_r+0x7c>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	b903      	cbnz	r3, 80041ee <__sflush_r+0x7e>
 80041ec:	6560      	str	r0, [r4, #84]	; 0x54
 80041ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041f0:	602f      	str	r7, [r5, #0]
 80041f2:	2900      	cmp	r1, #0
 80041f4:	d0c9      	beq.n	800418a <__sflush_r+0x1a>
 80041f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041fa:	4299      	cmp	r1, r3
 80041fc:	d002      	beq.n	8004204 <__sflush_r+0x94>
 80041fe:	4628      	mov	r0, r5
 8004200:	f000 f9b2 	bl	8004568 <_free_r>
 8004204:	2000      	movs	r0, #0
 8004206:	6360      	str	r0, [r4, #52]	; 0x34
 8004208:	e7c0      	b.n	800418c <__sflush_r+0x1c>
 800420a:	2301      	movs	r3, #1
 800420c:	4628      	mov	r0, r5
 800420e:	47b0      	blx	r6
 8004210:	1c41      	adds	r1, r0, #1
 8004212:	d1c8      	bne.n	80041a6 <__sflush_r+0x36>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0c5      	beq.n	80041a6 <__sflush_r+0x36>
 800421a:	2b1d      	cmp	r3, #29
 800421c:	d001      	beq.n	8004222 <__sflush_r+0xb2>
 800421e:	2b16      	cmp	r3, #22
 8004220:	d101      	bne.n	8004226 <__sflush_r+0xb6>
 8004222:	602f      	str	r7, [r5, #0]
 8004224:	e7b1      	b.n	800418a <__sflush_r+0x1a>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800422c:	81a3      	strh	r3, [r4, #12]
 800422e:	e7ad      	b.n	800418c <__sflush_r+0x1c>
 8004230:	690f      	ldr	r7, [r1, #16]
 8004232:	2f00      	cmp	r7, #0
 8004234:	d0a9      	beq.n	800418a <__sflush_r+0x1a>
 8004236:	0793      	lsls	r3, r2, #30
 8004238:	bf18      	it	ne
 800423a:	2300      	movne	r3, #0
 800423c:	680e      	ldr	r6, [r1, #0]
 800423e:	bf08      	it	eq
 8004240:	694b      	ldreq	r3, [r1, #20]
 8004242:	eba6 0807 	sub.w	r8, r6, r7
 8004246:	600f      	str	r7, [r1, #0]
 8004248:	608b      	str	r3, [r1, #8]
 800424a:	f1b8 0f00 	cmp.w	r8, #0
 800424e:	dd9c      	ble.n	800418a <__sflush_r+0x1a>
 8004250:	4643      	mov	r3, r8
 8004252:	463a      	mov	r2, r7
 8004254:	6a21      	ldr	r1, [r4, #32]
 8004256:	4628      	mov	r0, r5
 8004258:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800425a:	47b0      	blx	r6
 800425c:	2800      	cmp	r0, #0
 800425e:	dc06      	bgt.n	800426e <__sflush_r+0xfe>
 8004260:	89a3      	ldrh	r3, [r4, #12]
 8004262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004266:	81a3      	strh	r3, [r4, #12]
 8004268:	f04f 30ff 	mov.w	r0, #4294967295
 800426c:	e78e      	b.n	800418c <__sflush_r+0x1c>
 800426e:	4407      	add	r7, r0
 8004270:	eba8 0800 	sub.w	r8, r8, r0
 8004274:	e7e9      	b.n	800424a <__sflush_r+0xda>
 8004276:	bf00      	nop
 8004278:	20400001 	.word	0x20400001

0800427c <_fflush_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	690b      	ldr	r3, [r1, #16]
 8004280:	4605      	mov	r5, r0
 8004282:	460c      	mov	r4, r1
 8004284:	b1db      	cbz	r3, 80042be <_fflush_r+0x42>
 8004286:	b118      	cbz	r0, 8004290 <_fflush_r+0x14>
 8004288:	6983      	ldr	r3, [r0, #24]
 800428a:	b90b      	cbnz	r3, 8004290 <_fflush_r+0x14>
 800428c:	f000 f860 	bl	8004350 <__sinit>
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <_fflush_r+0x48>)
 8004292:	429c      	cmp	r4, r3
 8004294:	d109      	bne.n	80042aa <_fflush_r+0x2e>
 8004296:	686c      	ldr	r4, [r5, #4]
 8004298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800429c:	b17b      	cbz	r3, 80042be <_fflush_r+0x42>
 800429e:	4621      	mov	r1, r4
 80042a0:	4628      	mov	r0, r5
 80042a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042a6:	f7ff bf63 	b.w	8004170 <__sflush_r>
 80042aa:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <_fflush_r+0x4c>)
 80042ac:	429c      	cmp	r4, r3
 80042ae:	d101      	bne.n	80042b4 <_fflush_r+0x38>
 80042b0:	68ac      	ldr	r4, [r5, #8]
 80042b2:	e7f1      	b.n	8004298 <_fflush_r+0x1c>
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <_fflush_r+0x50>)
 80042b6:	429c      	cmp	r4, r3
 80042b8:	bf08      	it	eq
 80042ba:	68ec      	ldreq	r4, [r5, #12]
 80042bc:	e7ec      	b.n	8004298 <_fflush_r+0x1c>
 80042be:	2000      	movs	r0, #0
 80042c0:	bd38      	pop	{r3, r4, r5, pc}
 80042c2:	bf00      	nop
 80042c4:	080051f0 	.word	0x080051f0
 80042c8:	08005210 	.word	0x08005210
 80042cc:	080051d0 	.word	0x080051d0

080042d0 <std>:
 80042d0:	2300      	movs	r3, #0
 80042d2:	b510      	push	{r4, lr}
 80042d4:	4604      	mov	r4, r0
 80042d6:	e9c0 3300 	strd	r3, r3, [r0]
 80042da:	6083      	str	r3, [r0, #8]
 80042dc:	8181      	strh	r1, [r0, #12]
 80042de:	6643      	str	r3, [r0, #100]	; 0x64
 80042e0:	81c2      	strh	r2, [r0, #14]
 80042e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042e6:	6183      	str	r3, [r0, #24]
 80042e8:	4619      	mov	r1, r3
 80042ea:	2208      	movs	r2, #8
 80042ec:	305c      	adds	r0, #92	; 0x5c
 80042ee:	f7ff fcf8 	bl	8003ce2 <memset>
 80042f2:	4b05      	ldr	r3, [pc, #20]	; (8004308 <std+0x38>)
 80042f4:	6224      	str	r4, [r4, #32]
 80042f6:	6263      	str	r3, [r4, #36]	; 0x24
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <std+0x3c>)
 80042fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80042fc:	4b04      	ldr	r3, [pc, #16]	; (8004310 <std+0x40>)
 80042fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004300:	4b04      	ldr	r3, [pc, #16]	; (8004314 <std+0x44>)
 8004302:	6323      	str	r3, [r4, #48]	; 0x30
 8004304:	bd10      	pop	{r4, pc}
 8004306:	bf00      	nop
 8004308:	08004ccd 	.word	0x08004ccd
 800430c:	08004cef 	.word	0x08004cef
 8004310:	08004d27 	.word	0x08004d27
 8004314:	08004d4b 	.word	0x08004d4b

08004318 <_cleanup_r>:
 8004318:	4901      	ldr	r1, [pc, #4]	; (8004320 <_cleanup_r+0x8>)
 800431a:	f000 b885 	b.w	8004428 <_fwalk_reent>
 800431e:	bf00      	nop
 8004320:	0800427d 	.word	0x0800427d

08004324 <__sfmoreglue>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	2568      	movs	r5, #104	; 0x68
 8004328:	1e4a      	subs	r2, r1, #1
 800432a:	4355      	muls	r5, r2
 800432c:	460e      	mov	r6, r1
 800432e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004332:	f000 f965 	bl	8004600 <_malloc_r>
 8004336:	4604      	mov	r4, r0
 8004338:	b140      	cbz	r0, 800434c <__sfmoreglue+0x28>
 800433a:	2100      	movs	r1, #0
 800433c:	e9c0 1600 	strd	r1, r6, [r0]
 8004340:	300c      	adds	r0, #12
 8004342:	60a0      	str	r0, [r4, #8]
 8004344:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004348:	f7ff fccb 	bl	8003ce2 <memset>
 800434c:	4620      	mov	r0, r4
 800434e:	bd70      	pop	{r4, r5, r6, pc}

08004350 <__sinit>:
 8004350:	6983      	ldr	r3, [r0, #24]
 8004352:	b510      	push	{r4, lr}
 8004354:	4604      	mov	r4, r0
 8004356:	bb33      	cbnz	r3, 80043a6 <__sinit+0x56>
 8004358:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800435c:	6503      	str	r3, [r0, #80]	; 0x50
 800435e:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <__sinit+0x58>)
 8004360:	4a12      	ldr	r2, [pc, #72]	; (80043ac <__sinit+0x5c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6282      	str	r2, [r0, #40]	; 0x28
 8004366:	4298      	cmp	r0, r3
 8004368:	bf04      	itt	eq
 800436a:	2301      	moveq	r3, #1
 800436c:	6183      	streq	r3, [r0, #24]
 800436e:	f000 f81f 	bl	80043b0 <__sfp>
 8004372:	6060      	str	r0, [r4, #4]
 8004374:	4620      	mov	r0, r4
 8004376:	f000 f81b 	bl	80043b0 <__sfp>
 800437a:	60a0      	str	r0, [r4, #8]
 800437c:	4620      	mov	r0, r4
 800437e:	f000 f817 	bl	80043b0 <__sfp>
 8004382:	2200      	movs	r2, #0
 8004384:	60e0      	str	r0, [r4, #12]
 8004386:	2104      	movs	r1, #4
 8004388:	6860      	ldr	r0, [r4, #4]
 800438a:	f7ff ffa1 	bl	80042d0 <std>
 800438e:	2201      	movs	r2, #1
 8004390:	2109      	movs	r1, #9
 8004392:	68a0      	ldr	r0, [r4, #8]
 8004394:	f7ff ff9c 	bl	80042d0 <std>
 8004398:	2202      	movs	r2, #2
 800439a:	2112      	movs	r1, #18
 800439c:	68e0      	ldr	r0, [r4, #12]
 800439e:	f7ff ff97 	bl	80042d0 <std>
 80043a2:	2301      	movs	r3, #1
 80043a4:	61a3      	str	r3, [r4, #24]
 80043a6:	bd10      	pop	{r4, pc}
 80043a8:	080051cc 	.word	0x080051cc
 80043ac:	08004319 	.word	0x08004319

080043b0 <__sfp>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <__sfp+0x70>)
 80043b4:	4607      	mov	r7, r0
 80043b6:	681e      	ldr	r6, [r3, #0]
 80043b8:	69b3      	ldr	r3, [r6, #24]
 80043ba:	b913      	cbnz	r3, 80043c2 <__sfp+0x12>
 80043bc:	4630      	mov	r0, r6
 80043be:	f7ff ffc7 	bl	8004350 <__sinit>
 80043c2:	3648      	adds	r6, #72	; 0x48
 80043c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	d503      	bpl.n	80043d4 <__sfp+0x24>
 80043cc:	6833      	ldr	r3, [r6, #0]
 80043ce:	b133      	cbz	r3, 80043de <__sfp+0x2e>
 80043d0:	6836      	ldr	r6, [r6, #0]
 80043d2:	e7f7      	b.n	80043c4 <__sfp+0x14>
 80043d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043d8:	b16d      	cbz	r5, 80043f6 <__sfp+0x46>
 80043da:	3468      	adds	r4, #104	; 0x68
 80043dc:	e7f4      	b.n	80043c8 <__sfp+0x18>
 80043de:	2104      	movs	r1, #4
 80043e0:	4638      	mov	r0, r7
 80043e2:	f7ff ff9f 	bl	8004324 <__sfmoreglue>
 80043e6:	6030      	str	r0, [r6, #0]
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d1f1      	bne.n	80043d0 <__sfp+0x20>
 80043ec:	230c      	movs	r3, #12
 80043ee:	4604      	mov	r4, r0
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	4620      	mov	r0, r4
 80043f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043f6:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <__sfp+0x74>)
 80043f8:	6665      	str	r5, [r4, #100]	; 0x64
 80043fa:	e9c4 5500 	strd	r5, r5, [r4]
 80043fe:	60a5      	str	r5, [r4, #8]
 8004400:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004404:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004408:	2208      	movs	r2, #8
 800440a:	4629      	mov	r1, r5
 800440c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004410:	f7ff fc67 	bl	8003ce2 <memset>
 8004414:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004418:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800441c:	e7e9      	b.n	80043f2 <__sfp+0x42>
 800441e:	bf00      	nop
 8004420:	080051cc 	.word	0x080051cc
 8004424:	ffff0001 	.word	0xffff0001

08004428 <_fwalk_reent>:
 8004428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800442c:	4680      	mov	r8, r0
 800442e:	4689      	mov	r9, r1
 8004430:	2600      	movs	r6, #0
 8004432:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004436:	b914      	cbnz	r4, 800443e <_fwalk_reent+0x16>
 8004438:	4630      	mov	r0, r6
 800443a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800443e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004442:	3f01      	subs	r7, #1
 8004444:	d501      	bpl.n	800444a <_fwalk_reent+0x22>
 8004446:	6824      	ldr	r4, [r4, #0]
 8004448:	e7f5      	b.n	8004436 <_fwalk_reent+0xe>
 800444a:	89ab      	ldrh	r3, [r5, #12]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d907      	bls.n	8004460 <_fwalk_reent+0x38>
 8004450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004454:	3301      	adds	r3, #1
 8004456:	d003      	beq.n	8004460 <_fwalk_reent+0x38>
 8004458:	4629      	mov	r1, r5
 800445a:	4640      	mov	r0, r8
 800445c:	47c8      	blx	r9
 800445e:	4306      	orrs	r6, r0
 8004460:	3568      	adds	r5, #104	; 0x68
 8004462:	e7ee      	b.n	8004442 <_fwalk_reent+0x1a>

08004464 <__locale_ctype_ptr_l>:
 8004464:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004468:	4770      	bx	lr

0800446a <__swhatbuf_r>:
 800446a:	b570      	push	{r4, r5, r6, lr}
 800446c:	460e      	mov	r6, r1
 800446e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004472:	b096      	sub	sp, #88	; 0x58
 8004474:	2900      	cmp	r1, #0
 8004476:	4614      	mov	r4, r2
 8004478:	461d      	mov	r5, r3
 800447a:	da07      	bge.n	800448c <__swhatbuf_r+0x22>
 800447c:	2300      	movs	r3, #0
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	89b3      	ldrh	r3, [r6, #12]
 8004482:	061a      	lsls	r2, r3, #24
 8004484:	d410      	bmi.n	80044a8 <__swhatbuf_r+0x3e>
 8004486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800448a:	e00e      	b.n	80044aa <__swhatbuf_r+0x40>
 800448c:	466a      	mov	r2, sp
 800448e:	f000 fc8f 	bl	8004db0 <_fstat_r>
 8004492:	2800      	cmp	r0, #0
 8004494:	dbf2      	blt.n	800447c <__swhatbuf_r+0x12>
 8004496:	9a01      	ldr	r2, [sp, #4]
 8004498:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800449c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044a0:	425a      	negs	r2, r3
 80044a2:	415a      	adcs	r2, r3
 80044a4:	602a      	str	r2, [r5, #0]
 80044a6:	e7ee      	b.n	8004486 <__swhatbuf_r+0x1c>
 80044a8:	2340      	movs	r3, #64	; 0x40
 80044aa:	2000      	movs	r0, #0
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	b016      	add	sp, #88	; 0x58
 80044b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080044b4 <__smakebuf_r>:
 80044b4:	898b      	ldrh	r3, [r1, #12]
 80044b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044b8:	079d      	lsls	r5, r3, #30
 80044ba:	4606      	mov	r6, r0
 80044bc:	460c      	mov	r4, r1
 80044be:	d507      	bpl.n	80044d0 <__smakebuf_r+0x1c>
 80044c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	6123      	str	r3, [r4, #16]
 80044c8:	2301      	movs	r3, #1
 80044ca:	6163      	str	r3, [r4, #20]
 80044cc:	b002      	add	sp, #8
 80044ce:	bd70      	pop	{r4, r5, r6, pc}
 80044d0:	ab01      	add	r3, sp, #4
 80044d2:	466a      	mov	r2, sp
 80044d4:	f7ff ffc9 	bl	800446a <__swhatbuf_r>
 80044d8:	9900      	ldr	r1, [sp, #0]
 80044da:	4605      	mov	r5, r0
 80044dc:	4630      	mov	r0, r6
 80044de:	f000 f88f 	bl	8004600 <_malloc_r>
 80044e2:	b948      	cbnz	r0, 80044f8 <__smakebuf_r+0x44>
 80044e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044e8:	059a      	lsls	r2, r3, #22
 80044ea:	d4ef      	bmi.n	80044cc <__smakebuf_r+0x18>
 80044ec:	f023 0303 	bic.w	r3, r3, #3
 80044f0:	f043 0302 	orr.w	r3, r3, #2
 80044f4:	81a3      	strh	r3, [r4, #12]
 80044f6:	e7e3      	b.n	80044c0 <__smakebuf_r+0xc>
 80044f8:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <__smakebuf_r+0x7c>)
 80044fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	6020      	str	r0, [r4, #0]
 8004500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004504:	81a3      	strh	r3, [r4, #12]
 8004506:	9b00      	ldr	r3, [sp, #0]
 8004508:	6120      	str	r0, [r4, #16]
 800450a:	6163      	str	r3, [r4, #20]
 800450c:	9b01      	ldr	r3, [sp, #4]
 800450e:	b15b      	cbz	r3, 8004528 <__smakebuf_r+0x74>
 8004510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004514:	4630      	mov	r0, r6
 8004516:	f000 fc5d 	bl	8004dd4 <_isatty_r>
 800451a:	b128      	cbz	r0, 8004528 <__smakebuf_r+0x74>
 800451c:	89a3      	ldrh	r3, [r4, #12]
 800451e:	f023 0303 	bic.w	r3, r3, #3
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	81a3      	strh	r3, [r4, #12]
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	431d      	orrs	r5, r3
 800452c:	81a5      	strh	r5, [r4, #12]
 800452e:	e7cd      	b.n	80044cc <__smakebuf_r+0x18>
 8004530:	08004319 	.word	0x08004319

08004534 <malloc>:
 8004534:	4b02      	ldr	r3, [pc, #8]	; (8004540 <malloc+0xc>)
 8004536:	4601      	mov	r1, r0
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	f000 b861 	b.w	8004600 <_malloc_r>
 800453e:	bf00      	nop
 8004540:	2000000c 	.word	0x2000000c

08004544 <__ascii_mbtowc>:
 8004544:	b082      	sub	sp, #8
 8004546:	b901      	cbnz	r1, 800454a <__ascii_mbtowc+0x6>
 8004548:	a901      	add	r1, sp, #4
 800454a:	b142      	cbz	r2, 800455e <__ascii_mbtowc+0x1a>
 800454c:	b14b      	cbz	r3, 8004562 <__ascii_mbtowc+0x1e>
 800454e:	7813      	ldrb	r3, [r2, #0]
 8004550:	600b      	str	r3, [r1, #0]
 8004552:	7812      	ldrb	r2, [r2, #0]
 8004554:	1c10      	adds	r0, r2, #0
 8004556:	bf18      	it	ne
 8004558:	2001      	movne	r0, #1
 800455a:	b002      	add	sp, #8
 800455c:	4770      	bx	lr
 800455e:	4610      	mov	r0, r2
 8004560:	e7fb      	b.n	800455a <__ascii_mbtowc+0x16>
 8004562:	f06f 0001 	mvn.w	r0, #1
 8004566:	e7f8      	b.n	800455a <__ascii_mbtowc+0x16>

08004568 <_free_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4605      	mov	r5, r0
 800456c:	2900      	cmp	r1, #0
 800456e:	d043      	beq.n	80045f8 <_free_r+0x90>
 8004570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004574:	1f0c      	subs	r4, r1, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	bfb8      	it	lt
 800457a:	18e4      	addlt	r4, r4, r3
 800457c:	f000 fc5a 	bl	8004e34 <__malloc_lock>
 8004580:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <_free_r+0x94>)
 8004582:	6813      	ldr	r3, [r2, #0]
 8004584:	4610      	mov	r0, r2
 8004586:	b933      	cbnz	r3, 8004596 <_free_r+0x2e>
 8004588:	6063      	str	r3, [r4, #4]
 800458a:	6014      	str	r4, [r2, #0]
 800458c:	4628      	mov	r0, r5
 800458e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004592:	f000 bc50 	b.w	8004e36 <__malloc_unlock>
 8004596:	42a3      	cmp	r3, r4
 8004598:	d90b      	bls.n	80045b2 <_free_r+0x4a>
 800459a:	6821      	ldr	r1, [r4, #0]
 800459c:	1862      	adds	r2, r4, r1
 800459e:	4293      	cmp	r3, r2
 80045a0:	bf01      	itttt	eq
 80045a2:	681a      	ldreq	r2, [r3, #0]
 80045a4:	685b      	ldreq	r3, [r3, #4]
 80045a6:	1852      	addeq	r2, r2, r1
 80045a8:	6022      	streq	r2, [r4, #0]
 80045aa:	6063      	str	r3, [r4, #4]
 80045ac:	6004      	str	r4, [r0, #0]
 80045ae:	e7ed      	b.n	800458c <_free_r+0x24>
 80045b0:	4613      	mov	r3, r2
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	b10a      	cbz	r2, 80045ba <_free_r+0x52>
 80045b6:	42a2      	cmp	r2, r4
 80045b8:	d9fa      	bls.n	80045b0 <_free_r+0x48>
 80045ba:	6819      	ldr	r1, [r3, #0]
 80045bc:	1858      	adds	r0, r3, r1
 80045be:	42a0      	cmp	r0, r4
 80045c0:	d10b      	bne.n	80045da <_free_r+0x72>
 80045c2:	6820      	ldr	r0, [r4, #0]
 80045c4:	4401      	add	r1, r0
 80045c6:	1858      	adds	r0, r3, r1
 80045c8:	4282      	cmp	r2, r0
 80045ca:	6019      	str	r1, [r3, #0]
 80045cc:	d1de      	bne.n	800458c <_free_r+0x24>
 80045ce:	6810      	ldr	r0, [r2, #0]
 80045d0:	6852      	ldr	r2, [r2, #4]
 80045d2:	4401      	add	r1, r0
 80045d4:	6019      	str	r1, [r3, #0]
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	e7d8      	b.n	800458c <_free_r+0x24>
 80045da:	d902      	bls.n	80045e2 <_free_r+0x7a>
 80045dc:	230c      	movs	r3, #12
 80045de:	602b      	str	r3, [r5, #0]
 80045e0:	e7d4      	b.n	800458c <_free_r+0x24>
 80045e2:	6820      	ldr	r0, [r4, #0]
 80045e4:	1821      	adds	r1, r4, r0
 80045e6:	428a      	cmp	r2, r1
 80045e8:	bf01      	itttt	eq
 80045ea:	6811      	ldreq	r1, [r2, #0]
 80045ec:	6852      	ldreq	r2, [r2, #4]
 80045ee:	1809      	addeq	r1, r1, r0
 80045f0:	6021      	streq	r1, [r4, #0]
 80045f2:	6062      	str	r2, [r4, #4]
 80045f4:	605c      	str	r4, [r3, #4]
 80045f6:	e7c9      	b.n	800458c <_free_r+0x24>
 80045f8:	bd38      	pop	{r3, r4, r5, pc}
 80045fa:	bf00      	nop
 80045fc:	200001fc 	.word	0x200001fc

08004600 <_malloc_r>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	1ccd      	adds	r5, r1, #3
 8004604:	f025 0503 	bic.w	r5, r5, #3
 8004608:	3508      	adds	r5, #8
 800460a:	2d0c      	cmp	r5, #12
 800460c:	bf38      	it	cc
 800460e:	250c      	movcc	r5, #12
 8004610:	2d00      	cmp	r5, #0
 8004612:	4606      	mov	r6, r0
 8004614:	db01      	blt.n	800461a <_malloc_r+0x1a>
 8004616:	42a9      	cmp	r1, r5
 8004618:	d903      	bls.n	8004622 <_malloc_r+0x22>
 800461a:	230c      	movs	r3, #12
 800461c:	6033      	str	r3, [r6, #0]
 800461e:	2000      	movs	r0, #0
 8004620:	bd70      	pop	{r4, r5, r6, pc}
 8004622:	f000 fc07 	bl	8004e34 <__malloc_lock>
 8004626:	4a21      	ldr	r2, [pc, #132]	; (80046ac <_malloc_r+0xac>)
 8004628:	6814      	ldr	r4, [r2, #0]
 800462a:	4621      	mov	r1, r4
 800462c:	b991      	cbnz	r1, 8004654 <_malloc_r+0x54>
 800462e:	4c20      	ldr	r4, [pc, #128]	; (80046b0 <_malloc_r+0xb0>)
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	b91b      	cbnz	r3, 800463c <_malloc_r+0x3c>
 8004634:	4630      	mov	r0, r6
 8004636:	f000 fb39 	bl	8004cac <_sbrk_r>
 800463a:	6020      	str	r0, [r4, #0]
 800463c:	4629      	mov	r1, r5
 800463e:	4630      	mov	r0, r6
 8004640:	f000 fb34 	bl	8004cac <_sbrk_r>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d124      	bne.n	8004692 <_malloc_r+0x92>
 8004648:	230c      	movs	r3, #12
 800464a:	4630      	mov	r0, r6
 800464c:	6033      	str	r3, [r6, #0]
 800464e:	f000 fbf2 	bl	8004e36 <__malloc_unlock>
 8004652:	e7e4      	b.n	800461e <_malloc_r+0x1e>
 8004654:	680b      	ldr	r3, [r1, #0]
 8004656:	1b5b      	subs	r3, r3, r5
 8004658:	d418      	bmi.n	800468c <_malloc_r+0x8c>
 800465a:	2b0b      	cmp	r3, #11
 800465c:	d90f      	bls.n	800467e <_malloc_r+0x7e>
 800465e:	600b      	str	r3, [r1, #0]
 8004660:	18cc      	adds	r4, r1, r3
 8004662:	50cd      	str	r5, [r1, r3]
 8004664:	4630      	mov	r0, r6
 8004666:	f000 fbe6 	bl	8004e36 <__malloc_unlock>
 800466a:	f104 000b 	add.w	r0, r4, #11
 800466e:	1d23      	adds	r3, r4, #4
 8004670:	f020 0007 	bic.w	r0, r0, #7
 8004674:	1ac3      	subs	r3, r0, r3
 8004676:	d0d3      	beq.n	8004620 <_malloc_r+0x20>
 8004678:	425a      	negs	r2, r3
 800467a:	50e2      	str	r2, [r4, r3]
 800467c:	e7d0      	b.n	8004620 <_malloc_r+0x20>
 800467e:	684b      	ldr	r3, [r1, #4]
 8004680:	428c      	cmp	r4, r1
 8004682:	bf16      	itet	ne
 8004684:	6063      	strne	r3, [r4, #4]
 8004686:	6013      	streq	r3, [r2, #0]
 8004688:	460c      	movne	r4, r1
 800468a:	e7eb      	b.n	8004664 <_malloc_r+0x64>
 800468c:	460c      	mov	r4, r1
 800468e:	6849      	ldr	r1, [r1, #4]
 8004690:	e7cc      	b.n	800462c <_malloc_r+0x2c>
 8004692:	1cc4      	adds	r4, r0, #3
 8004694:	f024 0403 	bic.w	r4, r4, #3
 8004698:	42a0      	cmp	r0, r4
 800469a:	d005      	beq.n	80046a8 <_malloc_r+0xa8>
 800469c:	1a21      	subs	r1, r4, r0
 800469e:	4630      	mov	r0, r6
 80046a0:	f000 fb04 	bl	8004cac <_sbrk_r>
 80046a4:	3001      	adds	r0, #1
 80046a6:	d0cf      	beq.n	8004648 <_malloc_r+0x48>
 80046a8:	6025      	str	r5, [r4, #0]
 80046aa:	e7db      	b.n	8004664 <_malloc_r+0x64>
 80046ac:	200001fc 	.word	0x200001fc
 80046b0:	20000200 	.word	0x20000200

080046b4 <__sfputc_r>:
 80046b4:	6893      	ldr	r3, [r2, #8]
 80046b6:	b410      	push	{r4}
 80046b8:	3b01      	subs	r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	6093      	str	r3, [r2, #8]
 80046be:	da07      	bge.n	80046d0 <__sfputc_r+0x1c>
 80046c0:	6994      	ldr	r4, [r2, #24]
 80046c2:	42a3      	cmp	r3, r4
 80046c4:	db01      	blt.n	80046ca <__sfputc_r+0x16>
 80046c6:	290a      	cmp	r1, #10
 80046c8:	d102      	bne.n	80046d0 <__sfputc_r+0x1c>
 80046ca:	bc10      	pop	{r4}
 80046cc:	f7ff bc90 	b.w	8003ff0 <__swbuf_r>
 80046d0:	6813      	ldr	r3, [r2, #0]
 80046d2:	1c58      	adds	r0, r3, #1
 80046d4:	6010      	str	r0, [r2, #0]
 80046d6:	7019      	strb	r1, [r3, #0]
 80046d8:	4608      	mov	r0, r1
 80046da:	bc10      	pop	{r4}
 80046dc:	4770      	bx	lr

080046de <__sfputs_r>:
 80046de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e0:	4606      	mov	r6, r0
 80046e2:	460f      	mov	r7, r1
 80046e4:	4614      	mov	r4, r2
 80046e6:	18d5      	adds	r5, r2, r3
 80046e8:	42ac      	cmp	r4, r5
 80046ea:	d101      	bne.n	80046f0 <__sfputs_r+0x12>
 80046ec:	2000      	movs	r0, #0
 80046ee:	e007      	b.n	8004700 <__sfputs_r+0x22>
 80046f0:	463a      	mov	r2, r7
 80046f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f6:	4630      	mov	r0, r6
 80046f8:	f7ff ffdc 	bl	80046b4 <__sfputc_r>
 80046fc:	1c43      	adds	r3, r0, #1
 80046fe:	d1f3      	bne.n	80046e8 <__sfputs_r+0xa>
 8004700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004704 <_vfiprintf_r>:
 8004704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004708:	460c      	mov	r4, r1
 800470a:	b09d      	sub	sp, #116	; 0x74
 800470c:	4617      	mov	r7, r2
 800470e:	461d      	mov	r5, r3
 8004710:	4606      	mov	r6, r0
 8004712:	b118      	cbz	r0, 800471c <_vfiprintf_r+0x18>
 8004714:	6983      	ldr	r3, [r0, #24]
 8004716:	b90b      	cbnz	r3, 800471c <_vfiprintf_r+0x18>
 8004718:	f7ff fe1a 	bl	8004350 <__sinit>
 800471c:	4b7c      	ldr	r3, [pc, #496]	; (8004910 <_vfiprintf_r+0x20c>)
 800471e:	429c      	cmp	r4, r3
 8004720:	d158      	bne.n	80047d4 <_vfiprintf_r+0xd0>
 8004722:	6874      	ldr	r4, [r6, #4]
 8004724:	89a3      	ldrh	r3, [r4, #12]
 8004726:	0718      	lsls	r0, r3, #28
 8004728:	d55e      	bpl.n	80047e8 <_vfiprintf_r+0xe4>
 800472a:	6923      	ldr	r3, [r4, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d05b      	beq.n	80047e8 <_vfiprintf_r+0xe4>
 8004730:	2300      	movs	r3, #0
 8004732:	9309      	str	r3, [sp, #36]	; 0x24
 8004734:	2320      	movs	r3, #32
 8004736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800473a:	2330      	movs	r3, #48	; 0x30
 800473c:	f04f 0b01 	mov.w	fp, #1
 8004740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004744:	9503      	str	r5, [sp, #12]
 8004746:	46b8      	mov	r8, r7
 8004748:	4645      	mov	r5, r8
 800474a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800474e:	b10b      	cbz	r3, 8004754 <_vfiprintf_r+0x50>
 8004750:	2b25      	cmp	r3, #37	; 0x25
 8004752:	d154      	bne.n	80047fe <_vfiprintf_r+0xfa>
 8004754:	ebb8 0a07 	subs.w	sl, r8, r7
 8004758:	d00b      	beq.n	8004772 <_vfiprintf_r+0x6e>
 800475a:	4653      	mov	r3, sl
 800475c:	463a      	mov	r2, r7
 800475e:	4621      	mov	r1, r4
 8004760:	4630      	mov	r0, r6
 8004762:	f7ff ffbc 	bl	80046de <__sfputs_r>
 8004766:	3001      	adds	r0, #1
 8004768:	f000 80c2 	beq.w	80048f0 <_vfiprintf_r+0x1ec>
 800476c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800476e:	4453      	add	r3, sl
 8004770:	9309      	str	r3, [sp, #36]	; 0x24
 8004772:	f898 3000 	ldrb.w	r3, [r8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 80ba 	beq.w	80048f0 <_vfiprintf_r+0x1ec>
 800477c:	2300      	movs	r3, #0
 800477e:	f04f 32ff 	mov.w	r2, #4294967295
 8004782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004786:	9304      	str	r3, [sp, #16]
 8004788:	9307      	str	r3, [sp, #28]
 800478a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800478e:	931a      	str	r3, [sp, #104]	; 0x68
 8004790:	46a8      	mov	r8, r5
 8004792:	2205      	movs	r2, #5
 8004794:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004798:	485e      	ldr	r0, [pc, #376]	; (8004914 <_vfiprintf_r+0x210>)
 800479a:	f000 fb3d 	bl	8004e18 <memchr>
 800479e:	9b04      	ldr	r3, [sp, #16]
 80047a0:	bb78      	cbnz	r0, 8004802 <_vfiprintf_r+0xfe>
 80047a2:	06d9      	lsls	r1, r3, #27
 80047a4:	bf44      	itt	mi
 80047a6:	2220      	movmi	r2, #32
 80047a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80047ac:	071a      	lsls	r2, r3, #28
 80047ae:	bf44      	itt	mi
 80047b0:	222b      	movmi	r2, #43	; 0x2b
 80047b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80047b6:	782a      	ldrb	r2, [r5, #0]
 80047b8:	2a2a      	cmp	r2, #42	; 0x2a
 80047ba:	d02a      	beq.n	8004812 <_vfiprintf_r+0x10e>
 80047bc:	46a8      	mov	r8, r5
 80047be:	2000      	movs	r0, #0
 80047c0:	250a      	movs	r5, #10
 80047c2:	9a07      	ldr	r2, [sp, #28]
 80047c4:	4641      	mov	r1, r8
 80047c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047ca:	3b30      	subs	r3, #48	; 0x30
 80047cc:	2b09      	cmp	r3, #9
 80047ce:	d969      	bls.n	80048a4 <_vfiprintf_r+0x1a0>
 80047d0:	b360      	cbz	r0, 800482c <_vfiprintf_r+0x128>
 80047d2:	e024      	b.n	800481e <_vfiprintf_r+0x11a>
 80047d4:	4b50      	ldr	r3, [pc, #320]	; (8004918 <_vfiprintf_r+0x214>)
 80047d6:	429c      	cmp	r4, r3
 80047d8:	d101      	bne.n	80047de <_vfiprintf_r+0xda>
 80047da:	68b4      	ldr	r4, [r6, #8]
 80047dc:	e7a2      	b.n	8004724 <_vfiprintf_r+0x20>
 80047de:	4b4f      	ldr	r3, [pc, #316]	; (800491c <_vfiprintf_r+0x218>)
 80047e0:	429c      	cmp	r4, r3
 80047e2:	bf08      	it	eq
 80047e4:	68f4      	ldreq	r4, [r6, #12]
 80047e6:	e79d      	b.n	8004724 <_vfiprintf_r+0x20>
 80047e8:	4621      	mov	r1, r4
 80047ea:	4630      	mov	r0, r6
 80047ec:	f7ff fc52 	bl	8004094 <__swsetup_r>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d09d      	beq.n	8004730 <_vfiprintf_r+0x2c>
 80047f4:	f04f 30ff 	mov.w	r0, #4294967295
 80047f8:	b01d      	add	sp, #116	; 0x74
 80047fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fe:	46a8      	mov	r8, r5
 8004800:	e7a2      	b.n	8004748 <_vfiprintf_r+0x44>
 8004802:	4a44      	ldr	r2, [pc, #272]	; (8004914 <_vfiprintf_r+0x210>)
 8004804:	4645      	mov	r5, r8
 8004806:	1a80      	subs	r0, r0, r2
 8004808:	fa0b f000 	lsl.w	r0, fp, r0
 800480c:	4318      	orrs	r0, r3
 800480e:	9004      	str	r0, [sp, #16]
 8004810:	e7be      	b.n	8004790 <_vfiprintf_r+0x8c>
 8004812:	9a03      	ldr	r2, [sp, #12]
 8004814:	1d11      	adds	r1, r2, #4
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	9103      	str	r1, [sp, #12]
 800481a:	2a00      	cmp	r2, #0
 800481c:	db01      	blt.n	8004822 <_vfiprintf_r+0x11e>
 800481e:	9207      	str	r2, [sp, #28]
 8004820:	e004      	b.n	800482c <_vfiprintf_r+0x128>
 8004822:	4252      	negs	r2, r2
 8004824:	f043 0302 	orr.w	r3, r3, #2
 8004828:	9207      	str	r2, [sp, #28]
 800482a:	9304      	str	r3, [sp, #16]
 800482c:	f898 3000 	ldrb.w	r3, [r8]
 8004830:	2b2e      	cmp	r3, #46	; 0x2e
 8004832:	d10e      	bne.n	8004852 <_vfiprintf_r+0x14e>
 8004834:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004838:	2b2a      	cmp	r3, #42	; 0x2a
 800483a:	d138      	bne.n	80048ae <_vfiprintf_r+0x1aa>
 800483c:	9b03      	ldr	r3, [sp, #12]
 800483e:	f108 0802 	add.w	r8, r8, #2
 8004842:	1d1a      	adds	r2, r3, #4
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	9203      	str	r2, [sp, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	bfb8      	it	lt
 800484c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004850:	9305      	str	r3, [sp, #20]
 8004852:	4d33      	ldr	r5, [pc, #204]	; (8004920 <_vfiprintf_r+0x21c>)
 8004854:	2203      	movs	r2, #3
 8004856:	f898 1000 	ldrb.w	r1, [r8]
 800485a:	4628      	mov	r0, r5
 800485c:	f000 fadc 	bl	8004e18 <memchr>
 8004860:	b140      	cbz	r0, 8004874 <_vfiprintf_r+0x170>
 8004862:	2340      	movs	r3, #64	; 0x40
 8004864:	1b40      	subs	r0, r0, r5
 8004866:	fa03 f000 	lsl.w	r0, r3, r0
 800486a:	9b04      	ldr	r3, [sp, #16]
 800486c:	f108 0801 	add.w	r8, r8, #1
 8004870:	4303      	orrs	r3, r0
 8004872:	9304      	str	r3, [sp, #16]
 8004874:	f898 1000 	ldrb.w	r1, [r8]
 8004878:	2206      	movs	r2, #6
 800487a:	482a      	ldr	r0, [pc, #168]	; (8004924 <_vfiprintf_r+0x220>)
 800487c:	f108 0701 	add.w	r7, r8, #1
 8004880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004884:	f000 fac8 	bl	8004e18 <memchr>
 8004888:	2800      	cmp	r0, #0
 800488a:	d037      	beq.n	80048fc <_vfiprintf_r+0x1f8>
 800488c:	4b26      	ldr	r3, [pc, #152]	; (8004928 <_vfiprintf_r+0x224>)
 800488e:	bb1b      	cbnz	r3, 80048d8 <_vfiprintf_r+0x1d4>
 8004890:	9b03      	ldr	r3, [sp, #12]
 8004892:	3307      	adds	r3, #7
 8004894:	f023 0307 	bic.w	r3, r3, #7
 8004898:	3308      	adds	r3, #8
 800489a:	9303      	str	r3, [sp, #12]
 800489c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800489e:	444b      	add	r3, r9
 80048a0:	9309      	str	r3, [sp, #36]	; 0x24
 80048a2:	e750      	b.n	8004746 <_vfiprintf_r+0x42>
 80048a4:	fb05 3202 	mla	r2, r5, r2, r3
 80048a8:	2001      	movs	r0, #1
 80048aa:	4688      	mov	r8, r1
 80048ac:	e78a      	b.n	80047c4 <_vfiprintf_r+0xc0>
 80048ae:	2300      	movs	r3, #0
 80048b0:	250a      	movs	r5, #10
 80048b2:	4619      	mov	r1, r3
 80048b4:	f108 0801 	add.w	r8, r8, #1
 80048b8:	9305      	str	r3, [sp, #20]
 80048ba:	4640      	mov	r0, r8
 80048bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048c0:	3a30      	subs	r2, #48	; 0x30
 80048c2:	2a09      	cmp	r2, #9
 80048c4:	d903      	bls.n	80048ce <_vfiprintf_r+0x1ca>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0c3      	beq.n	8004852 <_vfiprintf_r+0x14e>
 80048ca:	9105      	str	r1, [sp, #20]
 80048cc:	e7c1      	b.n	8004852 <_vfiprintf_r+0x14e>
 80048ce:	fb05 2101 	mla	r1, r5, r1, r2
 80048d2:	2301      	movs	r3, #1
 80048d4:	4680      	mov	r8, r0
 80048d6:	e7f0      	b.n	80048ba <_vfiprintf_r+0x1b6>
 80048d8:	ab03      	add	r3, sp, #12
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4622      	mov	r2, r4
 80048de:	4b13      	ldr	r3, [pc, #76]	; (800492c <_vfiprintf_r+0x228>)
 80048e0:	a904      	add	r1, sp, #16
 80048e2:	4630      	mov	r0, r6
 80048e4:	f3af 8000 	nop.w
 80048e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80048ec:	4681      	mov	r9, r0
 80048ee:	d1d5      	bne.n	800489c <_vfiprintf_r+0x198>
 80048f0:	89a3      	ldrh	r3, [r4, #12]
 80048f2:	065b      	lsls	r3, r3, #25
 80048f4:	f53f af7e 	bmi.w	80047f4 <_vfiprintf_r+0xf0>
 80048f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048fa:	e77d      	b.n	80047f8 <_vfiprintf_r+0xf4>
 80048fc:	ab03      	add	r3, sp, #12
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	4622      	mov	r2, r4
 8004902:	4b0a      	ldr	r3, [pc, #40]	; (800492c <_vfiprintf_r+0x228>)
 8004904:	a904      	add	r1, sp, #16
 8004906:	4630      	mov	r0, r6
 8004908:	f000 f888 	bl	8004a1c <_printf_i>
 800490c:	e7ec      	b.n	80048e8 <_vfiprintf_r+0x1e4>
 800490e:	bf00      	nop
 8004910:	080051f0 	.word	0x080051f0
 8004914:	0800523a 	.word	0x0800523a
 8004918:	08005210 	.word	0x08005210
 800491c:	080051d0 	.word	0x080051d0
 8004920:	08005240 	.word	0x08005240
 8004924:	08005244 	.word	0x08005244
 8004928:	00000000 	.word	0x00000000
 800492c:	080046df 	.word	0x080046df

08004930 <_printf_common>:
 8004930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004934:	4691      	mov	r9, r2
 8004936:	461f      	mov	r7, r3
 8004938:	688a      	ldr	r2, [r1, #8]
 800493a:	690b      	ldr	r3, [r1, #16]
 800493c:	4606      	mov	r6, r0
 800493e:	4293      	cmp	r3, r2
 8004940:	bfb8      	it	lt
 8004942:	4613      	movlt	r3, r2
 8004944:	f8c9 3000 	str.w	r3, [r9]
 8004948:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800494c:	460c      	mov	r4, r1
 800494e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004952:	b112      	cbz	r2, 800495a <_printf_common+0x2a>
 8004954:	3301      	adds	r3, #1
 8004956:	f8c9 3000 	str.w	r3, [r9]
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	0699      	lsls	r1, r3, #26
 800495e:	bf42      	ittt	mi
 8004960:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004964:	3302      	addmi	r3, #2
 8004966:	f8c9 3000 	strmi.w	r3, [r9]
 800496a:	6825      	ldr	r5, [r4, #0]
 800496c:	f015 0506 	ands.w	r5, r5, #6
 8004970:	d107      	bne.n	8004982 <_printf_common+0x52>
 8004972:	f104 0a19 	add.w	sl, r4, #25
 8004976:	68e3      	ldr	r3, [r4, #12]
 8004978:	f8d9 2000 	ldr.w	r2, [r9]
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	42ab      	cmp	r3, r5
 8004980:	dc29      	bgt.n	80049d6 <_printf_common+0xa6>
 8004982:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	3300      	adds	r3, #0
 800498a:	bf18      	it	ne
 800498c:	2301      	movne	r3, #1
 800498e:	0692      	lsls	r2, r2, #26
 8004990:	d42e      	bmi.n	80049f0 <_printf_common+0xc0>
 8004992:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004996:	4639      	mov	r1, r7
 8004998:	4630      	mov	r0, r6
 800499a:	47c0      	blx	r8
 800499c:	3001      	adds	r0, #1
 800499e:	d021      	beq.n	80049e4 <_printf_common+0xb4>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	68e5      	ldr	r5, [r4, #12]
 80049a4:	f003 0306 	and.w	r3, r3, #6
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	bf18      	it	ne
 80049ac:	2500      	movne	r5, #0
 80049ae:	f8d9 2000 	ldr.w	r2, [r9]
 80049b2:	f04f 0900 	mov.w	r9, #0
 80049b6:	bf08      	it	eq
 80049b8:	1aad      	subeq	r5, r5, r2
 80049ba:	68a3      	ldr	r3, [r4, #8]
 80049bc:	6922      	ldr	r2, [r4, #16]
 80049be:	bf08      	it	eq
 80049c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049c4:	4293      	cmp	r3, r2
 80049c6:	bfc4      	itt	gt
 80049c8:	1a9b      	subgt	r3, r3, r2
 80049ca:	18ed      	addgt	r5, r5, r3
 80049cc:	341a      	adds	r4, #26
 80049ce:	454d      	cmp	r5, r9
 80049d0:	d11a      	bne.n	8004a08 <_printf_common+0xd8>
 80049d2:	2000      	movs	r0, #0
 80049d4:	e008      	b.n	80049e8 <_printf_common+0xb8>
 80049d6:	2301      	movs	r3, #1
 80049d8:	4652      	mov	r2, sl
 80049da:	4639      	mov	r1, r7
 80049dc:	4630      	mov	r0, r6
 80049de:	47c0      	blx	r8
 80049e0:	3001      	adds	r0, #1
 80049e2:	d103      	bne.n	80049ec <_printf_common+0xbc>
 80049e4:	f04f 30ff 	mov.w	r0, #4294967295
 80049e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ec:	3501      	adds	r5, #1
 80049ee:	e7c2      	b.n	8004976 <_printf_common+0x46>
 80049f0:	2030      	movs	r0, #48	; 0x30
 80049f2:	18e1      	adds	r1, r4, r3
 80049f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049fe:	4422      	add	r2, r4
 8004a00:	3302      	adds	r3, #2
 8004a02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a06:	e7c4      	b.n	8004992 <_printf_common+0x62>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	4622      	mov	r2, r4
 8004a0c:	4639      	mov	r1, r7
 8004a0e:	4630      	mov	r0, r6
 8004a10:	47c0      	blx	r8
 8004a12:	3001      	adds	r0, #1
 8004a14:	d0e6      	beq.n	80049e4 <_printf_common+0xb4>
 8004a16:	f109 0901 	add.w	r9, r9, #1
 8004a1a:	e7d8      	b.n	80049ce <_printf_common+0x9e>

08004a1c <_printf_i>:
 8004a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004a24:	460c      	mov	r4, r1
 8004a26:	7e09      	ldrb	r1, [r1, #24]
 8004a28:	b085      	sub	sp, #20
 8004a2a:	296e      	cmp	r1, #110	; 0x6e
 8004a2c:	4617      	mov	r7, r2
 8004a2e:	4606      	mov	r6, r0
 8004a30:	4698      	mov	r8, r3
 8004a32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a34:	f000 80b3 	beq.w	8004b9e <_printf_i+0x182>
 8004a38:	d822      	bhi.n	8004a80 <_printf_i+0x64>
 8004a3a:	2963      	cmp	r1, #99	; 0x63
 8004a3c:	d036      	beq.n	8004aac <_printf_i+0x90>
 8004a3e:	d80a      	bhi.n	8004a56 <_printf_i+0x3a>
 8004a40:	2900      	cmp	r1, #0
 8004a42:	f000 80b9 	beq.w	8004bb8 <_printf_i+0x19c>
 8004a46:	2958      	cmp	r1, #88	; 0x58
 8004a48:	f000 8083 	beq.w	8004b52 <_printf_i+0x136>
 8004a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004a54:	e032      	b.n	8004abc <_printf_i+0xa0>
 8004a56:	2964      	cmp	r1, #100	; 0x64
 8004a58:	d001      	beq.n	8004a5e <_printf_i+0x42>
 8004a5a:	2969      	cmp	r1, #105	; 0x69
 8004a5c:	d1f6      	bne.n	8004a4c <_printf_i+0x30>
 8004a5e:	6820      	ldr	r0, [r4, #0]
 8004a60:	6813      	ldr	r3, [r2, #0]
 8004a62:	0605      	lsls	r5, r0, #24
 8004a64:	f103 0104 	add.w	r1, r3, #4
 8004a68:	d52a      	bpl.n	8004ac0 <_printf_i+0xa4>
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6011      	str	r1, [r2, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	da03      	bge.n	8004a7a <_printf_i+0x5e>
 8004a72:	222d      	movs	r2, #45	; 0x2d
 8004a74:	425b      	negs	r3, r3
 8004a76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004a7a:	486f      	ldr	r0, [pc, #444]	; (8004c38 <_printf_i+0x21c>)
 8004a7c:	220a      	movs	r2, #10
 8004a7e:	e039      	b.n	8004af4 <_printf_i+0xd8>
 8004a80:	2973      	cmp	r1, #115	; 0x73
 8004a82:	f000 809d 	beq.w	8004bc0 <_printf_i+0x1a4>
 8004a86:	d808      	bhi.n	8004a9a <_printf_i+0x7e>
 8004a88:	296f      	cmp	r1, #111	; 0x6f
 8004a8a:	d020      	beq.n	8004ace <_printf_i+0xb2>
 8004a8c:	2970      	cmp	r1, #112	; 0x70
 8004a8e:	d1dd      	bne.n	8004a4c <_printf_i+0x30>
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	f043 0320 	orr.w	r3, r3, #32
 8004a96:	6023      	str	r3, [r4, #0]
 8004a98:	e003      	b.n	8004aa2 <_printf_i+0x86>
 8004a9a:	2975      	cmp	r1, #117	; 0x75
 8004a9c:	d017      	beq.n	8004ace <_printf_i+0xb2>
 8004a9e:	2978      	cmp	r1, #120	; 0x78
 8004aa0:	d1d4      	bne.n	8004a4c <_printf_i+0x30>
 8004aa2:	2378      	movs	r3, #120	; 0x78
 8004aa4:	4865      	ldr	r0, [pc, #404]	; (8004c3c <_printf_i+0x220>)
 8004aa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004aaa:	e055      	b.n	8004b58 <_printf_i+0x13c>
 8004aac:	6813      	ldr	r3, [r2, #0]
 8004aae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ab2:	1d19      	adds	r1, r3, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6011      	str	r1, [r2, #0]
 8004ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004abc:	2301      	movs	r3, #1
 8004abe:	e08c      	b.n	8004bda <_printf_i+0x1be>
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ac6:	6011      	str	r1, [r2, #0]
 8004ac8:	bf18      	it	ne
 8004aca:	b21b      	sxthne	r3, r3
 8004acc:	e7cf      	b.n	8004a6e <_printf_i+0x52>
 8004ace:	6813      	ldr	r3, [r2, #0]
 8004ad0:	6825      	ldr	r5, [r4, #0]
 8004ad2:	1d18      	adds	r0, r3, #4
 8004ad4:	6010      	str	r0, [r2, #0]
 8004ad6:	0628      	lsls	r0, r5, #24
 8004ad8:	d501      	bpl.n	8004ade <_printf_i+0xc2>
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	e002      	b.n	8004ae4 <_printf_i+0xc8>
 8004ade:	0668      	lsls	r0, r5, #25
 8004ae0:	d5fb      	bpl.n	8004ada <_printf_i+0xbe>
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	296f      	cmp	r1, #111	; 0x6f
 8004ae6:	bf14      	ite	ne
 8004ae8:	220a      	movne	r2, #10
 8004aea:	2208      	moveq	r2, #8
 8004aec:	4852      	ldr	r0, [pc, #328]	; (8004c38 <_printf_i+0x21c>)
 8004aee:	2100      	movs	r1, #0
 8004af0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004af4:	6865      	ldr	r5, [r4, #4]
 8004af6:	2d00      	cmp	r5, #0
 8004af8:	60a5      	str	r5, [r4, #8]
 8004afa:	f2c0 8095 	blt.w	8004c28 <_printf_i+0x20c>
 8004afe:	6821      	ldr	r1, [r4, #0]
 8004b00:	f021 0104 	bic.w	r1, r1, #4
 8004b04:	6021      	str	r1, [r4, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d13d      	bne.n	8004b86 <_printf_i+0x16a>
 8004b0a:	2d00      	cmp	r5, #0
 8004b0c:	f040 808e 	bne.w	8004c2c <_printf_i+0x210>
 8004b10:	4665      	mov	r5, ip
 8004b12:	2a08      	cmp	r2, #8
 8004b14:	d10b      	bne.n	8004b2e <_printf_i+0x112>
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	07db      	lsls	r3, r3, #31
 8004b1a:	d508      	bpl.n	8004b2e <_printf_i+0x112>
 8004b1c:	6923      	ldr	r3, [r4, #16]
 8004b1e:	6862      	ldr	r2, [r4, #4]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	bfde      	ittt	le
 8004b24:	2330      	movle	r3, #48	; 0x30
 8004b26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b2e:	ebac 0305 	sub.w	r3, ip, r5
 8004b32:	6123      	str	r3, [r4, #16]
 8004b34:	f8cd 8000 	str.w	r8, [sp]
 8004b38:	463b      	mov	r3, r7
 8004b3a:	aa03      	add	r2, sp, #12
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4630      	mov	r0, r6
 8004b40:	f7ff fef6 	bl	8004930 <_printf_common>
 8004b44:	3001      	adds	r0, #1
 8004b46:	d14d      	bne.n	8004be4 <_printf_i+0x1c8>
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	b005      	add	sp, #20
 8004b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b52:	4839      	ldr	r0, [pc, #228]	; (8004c38 <_printf_i+0x21c>)
 8004b54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004b58:	6813      	ldr	r3, [r2, #0]
 8004b5a:	6821      	ldr	r1, [r4, #0]
 8004b5c:	1d1d      	adds	r5, r3, #4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6015      	str	r5, [r2, #0]
 8004b62:	060a      	lsls	r2, r1, #24
 8004b64:	d50b      	bpl.n	8004b7e <_printf_i+0x162>
 8004b66:	07ca      	lsls	r2, r1, #31
 8004b68:	bf44      	itt	mi
 8004b6a:	f041 0120 	orrmi.w	r1, r1, #32
 8004b6e:	6021      	strmi	r1, [r4, #0]
 8004b70:	b91b      	cbnz	r3, 8004b7a <_printf_i+0x15e>
 8004b72:	6822      	ldr	r2, [r4, #0]
 8004b74:	f022 0220 	bic.w	r2, r2, #32
 8004b78:	6022      	str	r2, [r4, #0]
 8004b7a:	2210      	movs	r2, #16
 8004b7c:	e7b7      	b.n	8004aee <_printf_i+0xd2>
 8004b7e:	064d      	lsls	r5, r1, #25
 8004b80:	bf48      	it	mi
 8004b82:	b29b      	uxthmi	r3, r3
 8004b84:	e7ef      	b.n	8004b66 <_printf_i+0x14a>
 8004b86:	4665      	mov	r5, ip
 8004b88:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b8c:	fb02 3311 	mls	r3, r2, r1, r3
 8004b90:	5cc3      	ldrb	r3, [r0, r3]
 8004b92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b96:	460b      	mov	r3, r1
 8004b98:	2900      	cmp	r1, #0
 8004b9a:	d1f5      	bne.n	8004b88 <_printf_i+0x16c>
 8004b9c:	e7b9      	b.n	8004b12 <_printf_i+0xf6>
 8004b9e:	6813      	ldr	r3, [r2, #0]
 8004ba0:	6825      	ldr	r5, [r4, #0]
 8004ba2:	1d18      	adds	r0, r3, #4
 8004ba4:	6961      	ldr	r1, [r4, #20]
 8004ba6:	6010      	str	r0, [r2, #0]
 8004ba8:	0628      	lsls	r0, r5, #24
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	d501      	bpl.n	8004bb2 <_printf_i+0x196>
 8004bae:	6019      	str	r1, [r3, #0]
 8004bb0:	e002      	b.n	8004bb8 <_printf_i+0x19c>
 8004bb2:	066a      	lsls	r2, r5, #25
 8004bb4:	d5fb      	bpl.n	8004bae <_printf_i+0x192>
 8004bb6:	8019      	strh	r1, [r3, #0]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4665      	mov	r5, ip
 8004bbc:	6123      	str	r3, [r4, #16]
 8004bbe:	e7b9      	b.n	8004b34 <_printf_i+0x118>
 8004bc0:	6813      	ldr	r3, [r2, #0]
 8004bc2:	1d19      	adds	r1, r3, #4
 8004bc4:	6011      	str	r1, [r2, #0]
 8004bc6:	681d      	ldr	r5, [r3, #0]
 8004bc8:	6862      	ldr	r2, [r4, #4]
 8004bca:	2100      	movs	r1, #0
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f000 f923 	bl	8004e18 <memchr>
 8004bd2:	b108      	cbz	r0, 8004bd8 <_printf_i+0x1bc>
 8004bd4:	1b40      	subs	r0, r0, r5
 8004bd6:	6060      	str	r0, [r4, #4]
 8004bd8:	6863      	ldr	r3, [r4, #4]
 8004bda:	6123      	str	r3, [r4, #16]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be2:	e7a7      	b.n	8004b34 <_printf_i+0x118>
 8004be4:	6923      	ldr	r3, [r4, #16]
 8004be6:	462a      	mov	r2, r5
 8004be8:	4639      	mov	r1, r7
 8004bea:	4630      	mov	r0, r6
 8004bec:	47c0      	blx	r8
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d0aa      	beq.n	8004b48 <_printf_i+0x12c>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	079b      	lsls	r3, r3, #30
 8004bf6:	d413      	bmi.n	8004c20 <_printf_i+0x204>
 8004bf8:	68e0      	ldr	r0, [r4, #12]
 8004bfa:	9b03      	ldr	r3, [sp, #12]
 8004bfc:	4298      	cmp	r0, r3
 8004bfe:	bfb8      	it	lt
 8004c00:	4618      	movlt	r0, r3
 8004c02:	e7a3      	b.n	8004b4c <_printf_i+0x130>
 8004c04:	2301      	movs	r3, #1
 8004c06:	464a      	mov	r2, r9
 8004c08:	4639      	mov	r1, r7
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	47c0      	blx	r8
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d09a      	beq.n	8004b48 <_printf_i+0x12c>
 8004c12:	3501      	adds	r5, #1
 8004c14:	68e3      	ldr	r3, [r4, #12]
 8004c16:	9a03      	ldr	r2, [sp, #12]
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	42ab      	cmp	r3, r5
 8004c1c:	dcf2      	bgt.n	8004c04 <_printf_i+0x1e8>
 8004c1e:	e7eb      	b.n	8004bf8 <_printf_i+0x1dc>
 8004c20:	2500      	movs	r5, #0
 8004c22:	f104 0919 	add.w	r9, r4, #25
 8004c26:	e7f5      	b.n	8004c14 <_printf_i+0x1f8>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1ac      	bne.n	8004b86 <_printf_i+0x16a>
 8004c2c:	7803      	ldrb	r3, [r0, #0]
 8004c2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c36:	e76c      	b.n	8004b12 <_printf_i+0xf6>
 8004c38:	0800524b 	.word	0x0800524b
 8004c3c:	0800525c 	.word	0x0800525c

08004c40 <_putc_r>:
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	460d      	mov	r5, r1
 8004c44:	4614      	mov	r4, r2
 8004c46:	4606      	mov	r6, r0
 8004c48:	b118      	cbz	r0, 8004c52 <_putc_r+0x12>
 8004c4a:	6983      	ldr	r3, [r0, #24]
 8004c4c:	b90b      	cbnz	r3, 8004c52 <_putc_r+0x12>
 8004c4e:	f7ff fb7f 	bl	8004350 <__sinit>
 8004c52:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <_putc_r+0x60>)
 8004c54:	429c      	cmp	r4, r3
 8004c56:	d112      	bne.n	8004c7e <_putc_r+0x3e>
 8004c58:	6874      	ldr	r4, [r6, #4]
 8004c5a:	68a3      	ldr	r3, [r4, #8]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	60a3      	str	r3, [r4, #8]
 8004c62:	da16      	bge.n	8004c92 <_putc_r+0x52>
 8004c64:	69a2      	ldr	r2, [r4, #24]
 8004c66:	4293      	cmp	r3, r2
 8004c68:	db02      	blt.n	8004c70 <_putc_r+0x30>
 8004c6a:	b2eb      	uxtb	r3, r5
 8004c6c:	2b0a      	cmp	r3, #10
 8004c6e:	d110      	bne.n	8004c92 <_putc_r+0x52>
 8004c70:	4622      	mov	r2, r4
 8004c72:	4629      	mov	r1, r5
 8004c74:	4630      	mov	r0, r6
 8004c76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c7a:	f7ff b9b9 	b.w	8003ff0 <__swbuf_r>
 8004c7e:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <_putc_r+0x64>)
 8004c80:	429c      	cmp	r4, r3
 8004c82:	d101      	bne.n	8004c88 <_putc_r+0x48>
 8004c84:	68b4      	ldr	r4, [r6, #8]
 8004c86:	e7e8      	b.n	8004c5a <_putc_r+0x1a>
 8004c88:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <_putc_r+0x68>)
 8004c8a:	429c      	cmp	r4, r3
 8004c8c:	bf08      	it	eq
 8004c8e:	68f4      	ldreq	r4, [r6, #12]
 8004c90:	e7e3      	b.n	8004c5a <_putc_r+0x1a>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	b2e8      	uxtb	r0, r5
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	6022      	str	r2, [r4, #0]
 8004c9a:	701d      	strb	r5, [r3, #0]
 8004c9c:	bd70      	pop	{r4, r5, r6, pc}
 8004c9e:	bf00      	nop
 8004ca0:	080051f0 	.word	0x080051f0
 8004ca4:	08005210 	.word	0x08005210
 8004ca8:	080051d0 	.word	0x080051d0

08004cac <_sbrk_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	2300      	movs	r3, #0
 8004cb0:	4c05      	ldr	r4, [pc, #20]	; (8004cc8 <_sbrk_r+0x1c>)
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	4608      	mov	r0, r1
 8004cb6:	6023      	str	r3, [r4, #0]
 8004cb8:	f7fc f8bc 	bl	8000e34 <_sbrk>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d102      	bne.n	8004cc6 <_sbrk_r+0x1a>
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	b103      	cbz	r3, 8004cc6 <_sbrk_r+0x1a>
 8004cc4:	602b      	str	r3, [r5, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	2000102c 	.word	0x2000102c

08004ccc <__sread>:
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	460c      	mov	r4, r1
 8004cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd4:	f000 f8b0 	bl	8004e38 <_read_r>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	bfab      	itete	ge
 8004cdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cde:	89a3      	ldrhlt	r3, [r4, #12]
 8004ce0:	181b      	addge	r3, r3, r0
 8004ce2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ce6:	bfac      	ite	ge
 8004ce8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cea:	81a3      	strhlt	r3, [r4, #12]
 8004cec:	bd10      	pop	{r4, pc}

08004cee <__swrite>:
 8004cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf2:	461f      	mov	r7, r3
 8004cf4:	898b      	ldrh	r3, [r1, #12]
 8004cf6:	4605      	mov	r5, r0
 8004cf8:	05db      	lsls	r3, r3, #23
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	4616      	mov	r6, r2
 8004cfe:	d505      	bpl.n	8004d0c <__swrite+0x1e>
 8004d00:	2302      	movs	r3, #2
 8004d02:	2200      	movs	r2, #0
 8004d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d08:	f000 f874 	bl	8004df4 <_lseek_r>
 8004d0c:	89a3      	ldrh	r3, [r4, #12]
 8004d0e:	4632      	mov	r2, r6
 8004d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d22:	f000 b823 	b.w	8004d6c <_write_r>

08004d26 <__sseek>:
 8004d26:	b510      	push	{r4, lr}
 8004d28:	460c      	mov	r4, r1
 8004d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d2e:	f000 f861 	bl	8004df4 <_lseek_r>
 8004d32:	1c43      	adds	r3, r0, #1
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	bf15      	itete	ne
 8004d38:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d42:	81a3      	strheq	r3, [r4, #12]
 8004d44:	bf18      	it	ne
 8004d46:	81a3      	strhne	r3, [r4, #12]
 8004d48:	bd10      	pop	{r4, pc}

08004d4a <__sclose>:
 8004d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d4e:	f000 b81f 	b.w	8004d90 <_close_r>

08004d52 <__ascii_wctomb>:
 8004d52:	b149      	cbz	r1, 8004d68 <__ascii_wctomb+0x16>
 8004d54:	2aff      	cmp	r2, #255	; 0xff
 8004d56:	bf8b      	itete	hi
 8004d58:	238a      	movhi	r3, #138	; 0x8a
 8004d5a:	700a      	strbls	r2, [r1, #0]
 8004d5c:	6003      	strhi	r3, [r0, #0]
 8004d5e:	2001      	movls	r0, #1
 8004d60:	bf88      	it	hi
 8004d62:	f04f 30ff 	movhi.w	r0, #4294967295
 8004d66:	4770      	bx	lr
 8004d68:	4608      	mov	r0, r1
 8004d6a:	4770      	bx	lr

08004d6c <_write_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4605      	mov	r5, r0
 8004d70:	4608      	mov	r0, r1
 8004d72:	4611      	mov	r1, r2
 8004d74:	2200      	movs	r2, #0
 8004d76:	4c05      	ldr	r4, [pc, #20]	; (8004d8c <_write_r+0x20>)
 8004d78:	6022      	str	r2, [r4, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f7fc f80d 	bl	8000d9a <_write>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	d102      	bne.n	8004d8a <_write_r+0x1e>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	b103      	cbz	r3, 8004d8a <_write_r+0x1e>
 8004d88:	602b      	str	r3, [r5, #0]
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	2000102c 	.word	0x2000102c

08004d90 <_close_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	2300      	movs	r3, #0
 8004d94:	4c05      	ldr	r4, [pc, #20]	; (8004dac <_close_r+0x1c>)
 8004d96:	4605      	mov	r5, r0
 8004d98:	4608      	mov	r0, r1
 8004d9a:	6023      	str	r3, [r4, #0]
 8004d9c:	f7fc f819 	bl	8000dd2 <_close>
 8004da0:	1c43      	adds	r3, r0, #1
 8004da2:	d102      	bne.n	8004daa <_close_r+0x1a>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	b103      	cbz	r3, 8004daa <_close_r+0x1a>
 8004da8:	602b      	str	r3, [r5, #0]
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
 8004dac:	2000102c 	.word	0x2000102c

08004db0 <_fstat_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	2300      	movs	r3, #0
 8004db4:	4c06      	ldr	r4, [pc, #24]	; (8004dd0 <_fstat_r+0x20>)
 8004db6:	4605      	mov	r5, r0
 8004db8:	4608      	mov	r0, r1
 8004dba:	4611      	mov	r1, r2
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	f7fc f813 	bl	8000de8 <_fstat>
 8004dc2:	1c43      	adds	r3, r0, #1
 8004dc4:	d102      	bne.n	8004dcc <_fstat_r+0x1c>
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	b103      	cbz	r3, 8004dcc <_fstat_r+0x1c>
 8004dca:	602b      	str	r3, [r5, #0]
 8004dcc:	bd38      	pop	{r3, r4, r5, pc}
 8004dce:	bf00      	nop
 8004dd0:	2000102c 	.word	0x2000102c

08004dd4 <_isatty_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	4c05      	ldr	r4, [pc, #20]	; (8004df0 <_isatty_r+0x1c>)
 8004dda:	4605      	mov	r5, r0
 8004ddc:	4608      	mov	r0, r1
 8004dde:	6023      	str	r3, [r4, #0]
 8004de0:	f7fc f811 	bl	8000e06 <_isatty>
 8004de4:	1c43      	adds	r3, r0, #1
 8004de6:	d102      	bne.n	8004dee <_isatty_r+0x1a>
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	b103      	cbz	r3, 8004dee <_isatty_r+0x1a>
 8004dec:	602b      	str	r3, [r5, #0]
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
 8004df0:	2000102c 	.word	0x2000102c

08004df4 <_lseek_r>:
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	4605      	mov	r5, r0
 8004df8:	4608      	mov	r0, r1
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	4c05      	ldr	r4, [pc, #20]	; (8004e14 <_lseek_r+0x20>)
 8004e00:	6022      	str	r2, [r4, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	f7fc f809 	bl	8000e1a <_lseek>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	d102      	bne.n	8004e12 <_lseek_r+0x1e>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	b103      	cbz	r3, 8004e12 <_lseek_r+0x1e>
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	bd38      	pop	{r3, r4, r5, pc}
 8004e14:	2000102c 	.word	0x2000102c

08004e18 <memchr>:
 8004e18:	b510      	push	{r4, lr}
 8004e1a:	b2c9      	uxtb	r1, r1
 8004e1c:	4402      	add	r2, r0
 8004e1e:	4290      	cmp	r0, r2
 8004e20:	4603      	mov	r3, r0
 8004e22:	d101      	bne.n	8004e28 <memchr+0x10>
 8004e24:	2300      	movs	r3, #0
 8004e26:	e003      	b.n	8004e30 <memchr+0x18>
 8004e28:	781c      	ldrb	r4, [r3, #0]
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	428c      	cmp	r4, r1
 8004e2e:	d1f6      	bne.n	8004e1e <memchr+0x6>
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd10      	pop	{r4, pc}

08004e34 <__malloc_lock>:
 8004e34:	4770      	bx	lr

08004e36 <__malloc_unlock>:
 8004e36:	4770      	bx	lr

08004e38 <_read_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	4611      	mov	r1, r2
 8004e40:	2200      	movs	r2, #0
 8004e42:	4c05      	ldr	r4, [pc, #20]	; (8004e58 <_read_r+0x20>)
 8004e44:	6022      	str	r2, [r4, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	f7fb ff8a 	bl	8000d60 <_read>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d102      	bne.n	8004e56 <_read_r+0x1e>
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	b103      	cbz	r3, 8004e56 <_read_r+0x1e>
 8004e54:	602b      	str	r3, [r5, #0]
 8004e56:	bd38      	pop	{r3, r4, r5, pc}
 8004e58:	2000102c 	.word	0x2000102c

08004e5c <_init>:
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5e:	bf00      	nop
 8004e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e62:	bc08      	pop	{r3}
 8004e64:	469e      	mov	lr, r3
 8004e66:	4770      	bx	lr

08004e68 <_fini>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	bf00      	nop
 8004e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6e:	bc08      	pop	{r3}
 8004e70:	469e      	mov	lr, r3
 8004e72:	4770      	bx	lr
