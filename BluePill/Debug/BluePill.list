
BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004084  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08004190  08004190  00014190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800465c  0800465c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800465c  0800465c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800465c  0800465c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800465c  0800465c  0001465c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f0  200001dc  08004840  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bcc  08004840  00020bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec9f  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021aa  00000000  00000000  0002eea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a58  00000000  00000000  00031050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000978  00000000  00000000  00031aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018ec5  00000000  00000000  00032420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a274  00000000  00000000  0004b2e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000857f8  00000000  00000000  00055559  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dad51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033d8  00000000  00000000  000dadcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001dc 	.word	0x200001dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004178 	.word	0x08004178

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e0 	.word	0x200001e0
 8000148:	08004178 	.word	0x08004178

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <FL_clean>:
 */

#include "FL.h"

void FL_clean(I2C_HandleTypeDef hi2c2)
{
 8000160:	b084      	sub	sp, #16
 8000162:	b580      	push	{r7, lr}
 8000164:	b082      	sub	sp, #8
 8000166:	af00      	add	r7, sp, #0
 8000168:	f107 0c10 	add.w	ip, r7, #16
 800016c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int i;
	memset(&command, 0, sizeof(command));
 8000170:	2264      	movs	r2, #100	; 0x64
 8000172:	2100      	movs	r1, #0
 8000174:	4810      	ldr	r0, [pc, #64]	; (80001b8 <FL_clean+0x58>)
 8000176:	f002 ff42 	bl	8002ffe <memset>
	command.i2c_scan_cmd.i2c_handle = hi2c2;
 800017a:	4b0f      	ldr	r3, [pc, #60]	; (80001b8 <FL_clean+0x58>)
 800017c:	3304      	adds	r3, #4
 800017e:	f107 0110 	add.w	r1, r7, #16
 8000182:	2254      	movs	r2, #84	; 0x54
 8000184:	4618      	mov	r0, r3
 8000186:	f002 ff2f 	bl	8002fe8 <memcpy>
	for(i = 0; i < LINE_BUFLEN; i++)
 800018a:	2300      	movs	r3, #0
 800018c:	607b      	str	r3, [r7, #4]
 800018e:	e008      	b.n	80001a2 <FL_clean+0x42>
		input.line_rx_buffer[i] = 0;
 8000190:	4a0a      	ldr	r2, [pc, #40]	; (80001bc <FL_clean+0x5c>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4413      	add	r3, r2
 8000196:	3301      	adds	r3, #1
 8000198:	2200      	movs	r2, #0
 800019a:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LINE_BUFLEN; i++)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	3301      	adds	r3, #1
 80001a0:	607b      	str	r3, [r7, #4]
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001a8:	dbf2      	blt.n	8000190 <FL_clean+0x30>

}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr
 80001b8:	20000618 	.word	0x20000618
 80001bc:	20000208 	.word	0x20000208

080001c0 <FL_uart_decode>:

int FL_uart_decode()
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af00      	add	r7, sp, #0
	FL_debug("Entered FL_uart_decode function");
 80001c6:	4846      	ldr	r0, [pc, #280]	; (80002e0 <FL_uart_decode+0x120>)
 80001c8:	f000 f950 	bl	800046c <FL_debug>

	char delim[2] = ","; 	// This string will be used to parse the main input string
 80001cc:	232c      	movs	r3, #44	; 0x2c
 80001ce:	80bb      	strh	r3, [r7, #4]
	char *token;			// This pointer will hold current parsed string
	memset(arg_buffer, '\0', sizeof(arg_buffer));
 80001d0:	2228      	movs	r2, #40	; 0x28
 80001d2:	2100      	movs	r1, #0
 80001d4:	4843      	ldr	r0, [pc, #268]	; (80002e4 <FL_uart_decode+0x124>)
 80001d6:	f002 ff12 	bl	8002ffe <memset>
	memset(single_arg, '\0',  sizeof(single_arg));
 80001da:	2280      	movs	r2, #128	; 0x80
 80001dc:	2100      	movs	r1, #0
 80001de:	4842      	ldr	r0, [pc, #264]	; (80002e8 <FL_uart_decode+0x128>)
 80001e0:	f002 ff0d 	bl	8002ffe <memset>
	arg_cnt = 0;
 80001e4:	4b41      	ldr	r3, [pc, #260]	; (80002ec <FL_uart_decode+0x12c>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
	 * source 2, storing the token:
	 * https://www.tutorialspoint.com/c_standard_library/c_function_strtok.htm
	 */

	/* get the first token */
	token = strtok(input.line_rx_buffer, delim);
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	4619      	mov	r1, r3
 80001ee:	4840      	ldr	r0, [pc, #256]	; (80002f0 <FL_uart_decode+0x130>)
 80001f0:	f002 ffa6 	bl	8003140 <strtok>
 80001f4:	60f8      	str	r0, [r7, #12]

	/* walk through other tokens */
	while( token != NULL ) {
 80001f6:	e012      	b.n	800021e <FL_uart_decode+0x5e>
		printf( " %s\n", token );
 80001f8:	68f9      	ldr	r1, [r7, #12]
 80001fa:	483e      	ldr	r0, [pc, #248]	; (80002f4 <FL_uart_decode+0x134>)
 80001fc:	f002 ff08 	bl	8003010 <iprintf>
		arg_buffer[arg_cnt++] = token; // Store the token for later use
 8000200:	4b3a      	ldr	r3, [pc, #232]	; (80002ec <FL_uart_decode+0x12c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	1c5a      	adds	r2, r3, #1
 8000206:	4939      	ldr	r1, [pc, #228]	; (80002ec <FL_uart_decode+0x12c>)
 8000208:	600a      	str	r2, [r1, #0]
 800020a:	4936      	ldr	r1, [pc, #216]	; (80002e4 <FL_uart_decode+0x124>)
 800020c:	68fa      	ldr	r2, [r7, #12]
 800020e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		token = strtok(NULL, delim);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4619      	mov	r1, r3
 8000216:	2000      	movs	r0, #0
 8000218:	f002 ff92 	bl	8003140 <strtok>
 800021c:	60f8      	str	r0, [r7, #12]
	while( token != NULL ) {
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d1e9      	bne.n	80001f8 <FL_uart_decode+0x38>
	}

	// Some debugging
	int i;
	if(debug_enable)
 8000224:	4b34      	ldr	r3, [pc, #208]	; (80002f8 <FL_uart_decode+0x138>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d013      	beq.n	8000254 <FL_uart_decode+0x94>
	{
		for(i = 0; i < arg_cnt; i++)
 800022c:	2300      	movs	r3, #0
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	e00b      	b.n	800024a <FL_uart_decode+0x8a>
		{
			printf("Arg buffer [%d] = %s\n", i, arg_buffer[i]);
 8000232:	4a2c      	ldr	r2, [pc, #176]	; (80002e4 <FL_uart_decode+0x124>)
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023a:	461a      	mov	r2, r3
 800023c:	68b9      	ldr	r1, [r7, #8]
 800023e:	482f      	ldr	r0, [pc, #188]	; (80002fc <FL_uart_decode+0x13c>)
 8000240:	f002 fee6 	bl	8003010 <iprintf>
		for(i = 0; i < arg_cnt; i++)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	3301      	adds	r3, #1
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	4b28      	ldr	r3, [pc, #160]	; (80002ec <FL_uart_decode+0x12c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	68ba      	ldr	r2, [r7, #8]
 8000250:	429a      	cmp	r2, r3
 8000252:	dbee      	blt.n	8000232 <FL_uart_decode+0x72>
		}
	}

	// The first argument is the name of the command
	// Determine which command is sent
	command.cmd_no = FL_get_cmd(arg_buffer[0]);
 8000254:	4b23      	ldr	r3, [pc, #140]	; (80002e4 <FL_uart_decode+0x124>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f861 	bl	8000320 <FL_get_cmd>
 800025e:	4602      	mov	r2, r0
 8000260:	4b27      	ldr	r3, [pc, #156]	; (8000300 <FL_uart_decode+0x140>)
 8000262:	601a      	str	r2, [r3, #0]

	if(command.cmd_no == COMMAND_ERROR)
 8000264:	4b26      	ldr	r3, [pc, #152]	; (8000300 <FL_uart_decode+0x140>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d107      	bne.n	800027c <FL_uart_decode+0xbc>
	{
		FL_error_handler("FL.c", "FL_uart_decode","Unsupported Command");
 800026c:	4a25      	ldr	r2, [pc, #148]	; (8000304 <FL_uart_decode+0x144>)
 800026e:	4926      	ldr	r1, [pc, #152]	; (8000308 <FL_uart_decode+0x148>)
 8000270:	4826      	ldr	r0, [pc, #152]	; (800030c <FL_uart_decode+0x14c>)
 8000272:	f000 f8e3 	bl	800043c <FL_error_handler>
		return -1;
 8000276:	f04f 33ff 	mov.w	r3, #4294967295
 800027a:	e02c      	b.n	80002d6 <FL_uart_decode+0x116>

	/*
	 * Preparation for argument conversion
	 * Each command has its own arguments and should be parsed accordingly
	 */
	arg_cnt--; 	// The first argument is the command name, compensate for it
 800027c:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <FL_uart_decode+0x12c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	3b01      	subs	r3, #1
 8000282:	4a1a      	ldr	r2, [pc, #104]	; (80002ec <FL_uart_decode+0x12c>)
 8000284:	6013      	str	r3, [r2, #0]

	switch(command.cmd_no)
 8000286:	4b1e      	ldr	r3, [pc, #120]	; (8000300 <FL_uart_decode+0x140>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d002      	beq.n	8000294 <FL_uart_decode+0xd4>
 800028e:	2b02      	cmp	r3, #2
 8000290:	d01c      	beq.n	80002cc <FL_uart_decode+0x10c>
 8000292:	e017      	b.n	80002c4 <FL_uart_decode+0x104>
	{
		case COMMAND_SET_RES:
		{
			if(arg_cnt != SET_RES_ARGS)
 8000294:	4b15      	ldr	r3, [pc, #84]	; (80002ec <FL_uart_decode+0x12c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b02      	cmp	r3, #2
 800029a:	d00c      	beq.n	80002b6 <FL_uart_decode+0xf6>
			{
				FL_error_handler("FL.c", "FL_uart_decode","Wrong number of arguments arguments\n");
 800029c:	4a1c      	ldr	r2, [pc, #112]	; (8000310 <FL_uart_decode+0x150>)
 800029e:	491a      	ldr	r1, [pc, #104]	; (8000308 <FL_uart_decode+0x148>)
 80002a0:	481a      	ldr	r0, [pc, #104]	; (800030c <FL_uart_decode+0x14c>)
 80002a2:	f000 f8cb 	bl	800043c <FL_error_handler>
				printf("Expected %d arguments, got %d arguments\n", SET_RES_ARGS, arg_cnt);
 80002a6:	4b11      	ldr	r3, [pc, #68]	; (80002ec <FL_uart_decode+0x12c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	461a      	mov	r2, r3
 80002ac:	2102      	movs	r1, #2
 80002ae:	4819      	ldr	r0, [pc, #100]	; (8000314 <FL_uart_decode+0x154>)
 80002b0:	f002 feae 	bl	8003010 <iprintf>
			}
			else
			{
				FL_convert_args(command.cmd_no, arg_buffer);
			}
		}break;
 80002b4:	e00b      	b.n	80002ce <FL_uart_decode+0x10e>
				FL_convert_args(command.cmd_no, arg_buffer);
 80002b6:	4b12      	ldr	r3, [pc, #72]	; (8000300 <FL_uart_decode+0x140>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	490a      	ldr	r1, [pc, #40]	; (80002e4 <FL_uart_decode+0x124>)
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f873 	bl	80003a8 <FL_convert_args>
		}break;
 80002c2:	e004      	b.n	80002ce <FL_uart_decode+0x10e>
		{
			// No arguments to gather
		}break;
		default:
		{
			FL_debug("Don't know about this default case1");
 80002c4:	4814      	ldr	r0, [pc, #80]	; (8000318 <FL_uart_decode+0x158>)
 80002c6:	f000 f8d1 	bl	800046c <FL_debug>
 80002ca:	e000      	b.n	80002ce <FL_uart_decode+0x10e>
		}break;
 80002cc:	bf00      	nop
		}
	}
	FL_debug("Exiting FL_uart_decode function");
 80002ce:	4813      	ldr	r0, [pc, #76]	; (800031c <FL_uart_decode+0x15c>)
 80002d0:	f000 f8cc 	bl	800046c <FL_debug>
	return 0;
 80002d4:	2300      	movs	r3, #0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3710      	adds	r7, #16
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	08004190 	.word	0x08004190
 80002e4:	20000680 	.word	0x20000680
 80002e8:	200006ac 	.word	0x200006ac
 80002ec:	20000204 	.word	0x20000204
 80002f0:	20000209 	.word	0x20000209
 80002f4:	080041b0 	.word	0x080041b0
 80002f8:	2000072c 	.word	0x2000072c
 80002fc:	080041b8 	.word	0x080041b8
 8000300:	20000618 	.word	0x20000618
 8000304:	080041d0 	.word	0x080041d0
 8000308:	080041e4 	.word	0x080041e4
 800030c:	080041f4 	.word	0x080041f4
 8000310:	080041fc 	.word	0x080041fc
 8000314:	08004224 	.word	0x08004224
 8000318:	08004250 	.word	0x08004250
 800031c:	08004274 	.word	0x08004274

08000320 <FL_get_cmd>:
/*
 *  This function takes the first argument passed to the FL and tries to
 *  determine which command is sent
 */
int FL_get_cmd(char *str)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	FL_debug("Entered FL_get_cmd function");
 8000328:	481a      	ldr	r0, [pc, #104]	; (8000394 <FL_get_cmd+0x74>)
 800032a:	f000 f89f 	bl	800046c <FL_debug>

	char set_res[] = "set_res";
 800032e:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <FL_get_cmd+0x78>)
 8000330:	f107 0314 	add.w	r3, r7, #20
 8000334:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000338:	e883 0003 	stmia.w	r3, {r0, r1}
	char i2c_scan[] = "i2c_scan";
 800033c:	4a17      	ldr	r2, [pc, #92]	; (800039c <FL_get_cmd+0x7c>)
 800033e:	f107 0308 	add.w	r3, r7, #8
 8000342:	ca07      	ldmia	r2, {r0, r1, r2}
 8000344:	c303      	stmia	r3!, {r0, r1}
 8000346:	701a      	strb	r2, [r3, #0]
	int ret = COMMAND_ERROR;
 8000348:	2300      	movs	r3, #0
 800034a:	61fb      	str	r3, [r7, #28]

	if(strcmp(str, set_res) == 0)
 800034c:	f107 0314 	add.w	r3, r7, #20
 8000350:	4619      	mov	r1, r3
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f7ff fefa 	bl	800014c <strcmp>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d104      	bne.n	8000368 <FL_get_cmd+0x48>
	{
		FL_debug("command = set_res");
 800035e:	4810      	ldr	r0, [pc, #64]	; (80003a0 <FL_get_cmd+0x80>)
 8000360:	f000 f884 	bl	800046c <FL_debug>
		ret = COMMAND_SET_RES;
 8000364:	2301      	movs	r3, #1
 8000366:	61fb      	str	r3, [r7, #28]
	}

	if(strcmp(str, i2c_scan) == 0)
 8000368:	f107 0308 	add.w	r3, r7, #8
 800036c:	4619      	mov	r1, r3
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f7ff feec 	bl	800014c <strcmp>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d104      	bne.n	8000384 <FL_get_cmd+0x64>
	{
		FL_debug("command = set_res");
 800037a:	4809      	ldr	r0, [pc, #36]	; (80003a0 <FL_get_cmd+0x80>)
 800037c:	f000 f876 	bl	800046c <FL_debug>
		ret = COMMAND_I2C_SCAN;
 8000380:	2302      	movs	r3, #2
 8000382:	61fb      	str	r3, [r7, #28]
//		{
//			FL_debug("command = unrecognized");
//			ret = COMMAND_ERROR;
//		}

	FL_debug("Exiting FL_get_cmd function");
 8000384:	4807      	ldr	r0, [pc, #28]	; (80003a4 <FL_get_cmd+0x84>)
 8000386:	f000 f871 	bl	800046c <FL_debug>
	return ret;
 800038a:	69fb      	ldr	r3, [r7, #28]
}
 800038c:	4618      	mov	r0, r3
 800038e:	3720      	adds	r7, #32
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	08004294 	.word	0x08004294
 8000398:	080042e0 	.word	0x080042e0
 800039c:	080042e8 	.word	0x080042e8
 80003a0:	080042b0 	.word	0x080042b0
 80003a4:	080042c4 	.word	0x080042c4

080003a8 <FL_convert_args>:

int FL_convert_args(int cmd_no, char **args)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
	FL_debug("Entered FL_convert_args function");
 80003b2:	481c      	ldr	r0, [pc, #112]	; (8000424 <FL_convert_args+0x7c>)
 80003b4:	f000 f85a 	bl	800046c <FL_debug>
	switch(cmd_no)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d12a      	bne.n	8000414 <FL_convert_args+0x6c>
	{
		case COMMAND_SET_RES:
		{
			// Copy a string from args into single_arg.
			// See FL.h for more details
			strcpy(single_arg, args[1]);
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	3304      	adds	r3, #4
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4619      	mov	r1, r3
 80003c6:	4818      	ldr	r0, [pc, #96]	; (8000428 <FL_convert_args+0x80>)
 80003c8:	f002 feb2 	bl	8003130 <strcpy>
			if(debug_enable)
 80003cc:	4b17      	ldr	r3, [pc, #92]	; (800042c <FL_convert_args+0x84>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d003      	beq.n	80003dc <FL_convert_args+0x34>
				printf("Single arg = %s\n", single_arg);
 80003d4:	4914      	ldr	r1, [pc, #80]	; (8000428 <FL_convert_args+0x80>)
 80003d6:	4816      	ldr	r0, [pc, #88]	; (8000430 <FL_convert_args+0x88>)
 80003d8:	f002 fe1a 	bl	8003010 <iprintf>
			command.set_res_cmd.digipot_no = atoi(single_arg);
 80003dc:	4812      	ldr	r0, [pc, #72]	; (8000428 <FL_convert_args+0x80>)
 80003de:	f002 fdd5 	bl	8002f8c <atoi>
 80003e2:	4602      	mov	r2, r0
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <FL_convert_args+0x8c>)
 80003e6:	65da      	str	r2, [r3, #92]	; 0x5c

			strcpy(single_arg, args[2]);
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	3308      	adds	r3, #8
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4619      	mov	r1, r3
 80003f0:	480d      	ldr	r0, [pc, #52]	; (8000428 <FL_convert_args+0x80>)
 80003f2:	f002 fe9d 	bl	8003130 <strcpy>
			if(debug_enable)
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <FL_convert_args+0x84>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d003      	beq.n	8000406 <FL_convert_args+0x5e>
				printf("Single arg = %s\n", single_arg);
 80003fe:	490a      	ldr	r1, [pc, #40]	; (8000428 <FL_convert_args+0x80>)
 8000400:	480b      	ldr	r0, [pc, #44]	; (8000430 <FL_convert_args+0x88>)
 8000402:	f002 fe05 	bl	8003010 <iprintf>
			command.set_res_cmd.res = atoi(single_arg);
 8000406:	4808      	ldr	r0, [pc, #32]	; (8000428 <FL_convert_args+0x80>)
 8000408:	f002 fdc0 	bl	8002f8c <atoi>
 800040c:	4602      	mov	r2, r0
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <FL_convert_args+0x8c>)
 8000410:	661a      	str	r2, [r3, #96]	; 0x60

		}break;
 8000412:	e002      	b.n	800041a <FL_convert_args+0x72>
		default:
		{
			FL_debug("Don't know about this default case2");
 8000414:	4808      	ldr	r0, [pc, #32]	; (8000438 <FL_convert_args+0x90>)
 8000416:	f000 f829 	bl	800046c <FL_debug>
		}
	}

	return 0;
 800041a:	2300      	movs	r3, #0
	FL_debug("Exiting FL_convert_args function");
}
 800041c:	4618      	mov	r0, r3
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	080042f4 	.word	0x080042f4
 8000428:	200006ac 	.word	0x200006ac
 800042c:	2000072c 	.word	0x2000072c
 8000430:	08004318 	.word	0x08004318
 8000434:	20000618 	.word	0x20000618
 8000438:	0800432c 	.word	0x0800432c

0800043c <FL_error_handler>:


void FL_error_handler(char *file_name, char *function_name, char *msg)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	607a      	str	r2, [r7, #4]
	printf("ERROR in %s\t%s\n", file_name, function_name);
 8000448:	68ba      	ldr	r2, [r7, #8]
 800044a:	68f9      	ldr	r1, [r7, #12]
 800044c:	4805      	ldr	r0, [pc, #20]	; (8000464 <FL_error_handler+0x28>)
 800044e:	f002 fddf 	bl	8003010 <iprintf>
	printf("message:\t%s\n", msg);
 8000452:	6879      	ldr	r1, [r7, #4]
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <FL_error_handler+0x2c>)
 8000456:	f002 fddb 	bl	8003010 <iprintf>
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	08004350 	.word	0x08004350
 8000468:	08004360 	.word	0x08004360

0800046c <FL_debug>:

void FL_debug(char *s)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	if(debug_enable)
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <FL_debug+0x20>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d002      	beq.n	8000482 <FL_debug+0x16>
	{
		printf("%s\n",s);
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f002 fe4f 	bl	8003120 <puts>
	}
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	2000072c 	.word	0x2000072c

08000490 <IOL_set_res>:
 */

#include "IOL.h"

void IOL_set_res()
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af02      	add	r7, sp, #8
	uint8_t wiper = 0x00;
 8000496:	2300      	movs	r3, #0
 8000498:	71fb      	strb	r3, [r7, #7]

	switch(command.set_res_cmd.digipot_no) /* According to the datasheet, the following values are the memory addresses of the individual subdigipots */
 800049a:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <IOL_set_res+0x84>)
 800049c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800049e:	2b03      	cmp	r3, #3
 80004a0:	d816      	bhi.n	80004d0 <IOL_set_res+0x40>
 80004a2:	a201      	add	r2, pc, #4	; (adr r2, 80004a8 <IOL_set_res+0x18>)
 80004a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a8:	080004b9 	.word	0x080004b9
 80004ac:	080004bf 	.word	0x080004bf
 80004b0:	080004c5 	.word	0x080004c5
 80004b4:	080004cb 	.word	0x080004cb
	{
		case 0: wiper = 0x00; break;
 80004b8:	2300      	movs	r3, #0
 80004ba:	71fb      	strb	r3, [r7, #7]
 80004bc:	e010      	b.n	80004e0 <IOL_set_res+0x50>
		case 1: wiper = 0x01; break;
 80004be:	2301      	movs	r3, #1
 80004c0:	71fb      	strb	r3, [r7, #7]
 80004c2:	e00d      	b.n	80004e0 <IOL_set_res+0x50>
		case 2: wiper = 0x06; break;
 80004c4:	2306      	movs	r3, #6
 80004c6:	71fb      	strb	r3, [r7, #7]
 80004c8:	e00a      	b.n	80004e0 <IOL_set_res+0x50>
		case 3: wiper = 0x07; break;
 80004ca:	2307      	movs	r3, #7
 80004cc:	71fb      	strb	r3, [r7, #7]
 80004ce:	e007      	b.n	80004e0 <IOL_set_res+0x50>
		default:
		{
			FL_error_handler("IOL.c", "IOL_set_res", "Unsupported digipot number");
 80004d0:	4a11      	ldr	r2, [pc, #68]	; (8000518 <IOL_set_res+0x88>)
 80004d2:	4912      	ldr	r1, [pc, #72]	; (800051c <IOL_set_res+0x8c>)
 80004d4:	4812      	ldr	r0, [pc, #72]	; (8000520 <IOL_set_res+0x90>)
 80004d6:	f7ff ffb1 	bl	800043c <FL_error_handler>
			wiper = 0x10;
 80004da:	2310      	movs	r3, #16
 80004dc:	71fb      	strb	r3, [r7, #7]
		}break;
 80004de:	bf00      	nop
	}

	uint16_t addr = 0x2c << 1;
 80004e0:	2358      	movs	r3, #88	; 0x58
 80004e2:	80bb      	strh	r3, [r7, #4]
	uint8_t tx[] = { wiper << 4, (uint8_t)command.set_res_cmd.res};
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	011b      	lsls	r3, r3, #4
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	703b      	strb	r3, [r7, #0]
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <IOL_set_res+0x84>)
 80004ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	707b      	strb	r3, [r7, #1]
	uint16_t num = 2;
 80004f4:	2302      	movs	r3, #2
 80004f6:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Master_Transmit(&command.i2c_scan_cmd.i2c_handle, addr, tx, num, HAL_MAX_DELAY );
 80004f8:	8878      	ldrh	r0, [r7, #2]
 80004fa:	463a      	mov	r2, r7
 80004fc:	88b9      	ldrh	r1, [r7, #4]
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	4603      	mov	r3, r0
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <IOL_set_res+0x94>)
 8000508:	f001 f8b0 	bl	800166c <HAL_I2C_Master_Transmit>

}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000618 	.word	0x20000618
 8000518:	08004370 	.word	0x08004370
 800051c:	0800438c 	.word	0x0800438c
 8000520:	08004398 	.word	0x08004398
 8000524:	2000061c 	.word	0x2000061c

08000528 <IOL_i2c_scan>:



void IOL_i2c_scan()
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
	printf("Scanning I2C bus:\r\n");
 800052e:	4819      	ldr	r0, [pc, #100]	; (8000594 <IOL_i2c_scan+0x6c>)
 8000530:	f002 fdf6 	bl	8003120 <puts>
	HAL_StatusTypeDef result;
	uint8_t i;
	for (i=1; i<128; i++)
 8000534:	2301      	movs	r3, #1
 8000536:	71fb      	strb	r3, [r7, #7]
 8000538:	e020      	b.n	800057c <IOL_i2c_scan+0x54>
	   * &hi2c1 is the handle
	   * (uint16_t)(i<<1) is the i2c address left aligned
	   * retries 2
	   * timeout 2
	   */
	  result = HAL_I2C_IsDeviceReady(&command.i2c_scan_cmd.i2c_handle, (uint16_t)(i<<1), 2, 2);
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	b29b      	uxth	r3, r3
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	b299      	uxth	r1, r3
 8000542:	2302      	movs	r3, #2
 8000544:	2202      	movs	r2, #2
 8000546:	4814      	ldr	r0, [pc, #80]	; (8000598 <IOL_i2c_scan+0x70>)
 8000548:	f001 f98e 	bl	8001868 <HAL_I2C_IsDeviceReady>
 800054c:	4603      	mov	r3, r0
 800054e:	71bb      	strb	r3, [r7, #6]
	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d002      	beq.n	800055c <IOL_i2c_scan+0x34>
	  {
		  printf("."); // No ACK received at that address
 8000556:	202e      	movs	r0, #46	; 0x2e
 8000558:	f002 fd72 	bl	8003040 <putchar>
	  }
	  if (result == HAL_OK)
 800055c:	79bb      	ldrb	r3, [r7, #6]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d109      	bne.n	8000576 <IOL_i2c_scan+0x4e>
	  {
		  printf("0x%X", i); // Received an ACK at that address
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	4619      	mov	r1, r3
 8000566:	480d      	ldr	r0, [pc, #52]	; (800059c <IOL_i2c_scan+0x74>)
 8000568:	f002 fd52 	bl	8003010 <iprintf>
		  command.i2c_scan_cmd.addr = i;
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <IOL_i2c_scan+0x78>)
 8000572:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	for (i=1; i<128; i++)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	3301      	adds	r3, #1
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000580:	2b00      	cmp	r3, #0
 8000582:	dada      	bge.n	800053a <IOL_i2c_scan+0x12>
	  }
	}
	printf("\r\n");
 8000584:	4807      	ldr	r0, [pc, #28]	; (80005a4 <IOL_i2c_scan+0x7c>)
 8000586:	f002 fdcb 	bl	8003120 <puts>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	080043a0 	.word	0x080043a0
 8000598:	2000061c 	.word	0x2000061c
 800059c:	080043b4 	.word	0x080043b4
 80005a0:	20000618 	.word	0x20000618
 80005a4:	080043bc 	.word	0x080043bc

080005a8 <LL_exec>:


#include "LL.h"

int LL_exec()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	switch(command.cmd_no)
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <LL_exec+0x38>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d002      	beq.n	80005ba <LL_exec+0x12>
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d006      	beq.n	80005c6 <LL_exec+0x1e>
 80005b8:	e00b      	b.n	80005d2 <LL_exec+0x2a>
	{
	case COMMAND_SET_RES:
	{
		IOL_set_res();
 80005ba:	f7ff ff69 	bl	8000490 <IOL_set_res>
		printf("Executed COMMAND_SET_RES\n");
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <LL_exec+0x3c>)
 80005c0:	f002 fdae 	bl	8003120 <puts>
	}break;
 80005c4:	e008      	b.n	80005d8 <LL_exec+0x30>
	case COMMAND_I2C_SCAN:
	{
		IOL_i2c_scan();
 80005c6:	f7ff ffaf 	bl	8000528 <IOL_i2c_scan>
		printf("Executed COMMAND_SET_RES\n");
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <LL_exec+0x3c>)
 80005cc:	f002 fda8 	bl	8003120 <puts>
	}break;
 80005d0:	e002      	b.n	80005d8 <LL_exec+0x30>
	default:
	{
		printf("Dunno 3\n");
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <LL_exec+0x40>)
 80005d4:	f002 fda4 	bl	8003120 <puts>
	}
	}
	return 0;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000618 	.word	0x20000618
 80005e4:	080043c0 	.word	0x080043c0
 80005e8:	080043dc 	.word	0x080043dc

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b095      	sub	sp, #84	; 0x54
 80005f0:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fb91 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f895 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f931 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f905 	bl	800080c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000602:	f000 f8d5 	bl	80007b0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	int i;
	int error;

	for(i = 0; i < LINE_BUFLEN; i++)
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	e008      	b.n	800061e <main+0x32>
		input.line_rx_buffer[i] = 0;
 800060c:	4a36      	ldr	r2, [pc, #216]	; (80006e8 <main+0xfc>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	3301      	adds	r3, #1
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LINE_BUFLEN; i++)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000624:	dbf2      	blt.n	800060c <main+0x20>

	// Reset some stuff
	input.byte_buffer_rx[0] = 0;
 8000626:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <main+0xfc>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
	input.char_counter = 0;
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <main+0xfc>)
 800062e:	2200      	movs	r2, #0
 8000630:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	input.command_execute_flag = FALSE;
 8000634:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <main+0xfc>)
 8000636:	2200      	movs	r2, #0
 8000638:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	debug_enable = TRUE;
 800063c:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <main+0x100>)
 800063e:	22ff      	movs	r2, #255	; 0xff
 8000640:	701a      	strb	r2, [r3, #0]
	command.i2c_scan_cmd.i2c_handle = hi2c2;
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <main+0x104>)
 8000644:	4a2b      	ldr	r2, [pc, #172]	; (80006f4 <main+0x108>)
 8000646:	3304      	adds	r3, #4
 8000648:	4611      	mov	r1, r2
 800064a:	2254      	movs	r2, #84	; 0x54
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fccb 	bl	8002fe8 <memcpy>
	HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000652:	2201      	movs	r2, #1
 8000654:	4924      	ldr	r1, [pc, #144]	; (80006e8 <main+0xfc>)
 8000656:	4828      	ldr	r0, [pc, #160]	; (80006f8 <main+0x10c>)
 8000658:	f002 f937 	bl	80028ca <HAL_UART_Receive_IT>

	FL_debug("starting the main function");
 800065c:	4827      	ldr	r0, [pc, #156]	; (80006fc <main+0x110>)
 800065e:	f7ff ff05 	bl	800046c <FL_debug>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == TRUE)
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <main+0xfc>)
 8000664:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000668:	2bff      	cmp	r3, #255	; 0xff
 800066a:	d1fa      	bne.n	8000662 <main+0x76>
	  {
		  HAL_GPIO_TogglePin(DebugLed_GPIO_Port, DebugLed_Pin);
 800066c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000670:	4823      	ldr	r0, [pc, #140]	; (8000700 <main+0x114>)
 8000672:	f000 fea9 	bl	80013c8 <HAL_GPIO_TogglePin>
		  FL_debug("");
 8000676:	4823      	ldr	r0, [pc, #140]	; (8000704 <main+0x118>)
 8000678:	f7ff fef8 	bl	800046c <FL_debug>
		  input.command_execute_flag = FALSE;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <main+0xfc>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		  error = FL_uart_decode();
 8000684:	f7ff fd9c 	bl	80001c0 <FL_uart_decode>
 8000688:	6038      	str	r0, [r7, #0]

		  if(error)
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d004      	beq.n	800069a <main+0xae>
		  {
			  FL_error_handler("main.c", "main", "FL_uart_decode() returned an error\n");
 8000690:	4a1d      	ldr	r2, [pc, #116]	; (8000708 <main+0x11c>)
 8000692:	491e      	ldr	r1, [pc, #120]	; (800070c <main+0x120>)
 8000694:	481e      	ldr	r0, [pc, #120]	; (8000710 <main+0x124>)
 8000696:	f7ff fed1 	bl	800043c <FL_error_handler>
		  }

		  printf("back in main.c\n");
 800069a:	481e      	ldr	r0, [pc, #120]	; (8000714 <main+0x128>)
 800069c:	f002 fd40 	bl	8003120 <puts>
		  printf("Command set_res contents:\n");
 80006a0:	481d      	ldr	r0, [pc, #116]	; (8000718 <main+0x12c>)
 80006a2:	f002 fd3d 	bl	8003120 <puts>
		  printf("\tdigipot   : %d\n", command.set_res_cmd.digipot_no);
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <main+0x104>)
 80006a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80006aa:	4619      	mov	r1, r3
 80006ac:	481b      	ldr	r0, [pc, #108]	; (800071c <main+0x130>)
 80006ae:	f002 fcaf 	bl	8003010 <iprintf>
		  printf("\tresistance: %d\n", command.set_res_cmd.res);
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <main+0x104>)
 80006b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b6:	4619      	mov	r1, r3
 80006b8:	4819      	ldr	r0, [pc, #100]	; (8000720 <main+0x134>)
 80006ba:	f002 fca9 	bl	8003010 <iprintf>

		  LL_exec();
 80006be:	f7ff ff73 	bl	80005a8 <LL_exec>
		  FL_clean(hi2c2);
 80006c2:	4c0c      	ldr	r4, [pc, #48]	; (80006f4 <main+0x108>)
 80006c4:	4668      	mov	r0, sp
 80006c6:	f104 0310 	add.w	r3, r4, #16
 80006ca:	2244      	movs	r2, #68	; 0x44
 80006cc:	4619      	mov	r1, r3
 80006ce:	f002 fc8b 	bl	8002fe8 <memcpy>
 80006d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006d6:	f7ff fd43 	bl	8000160 <FL_clean>
		  HAL_GPIO_TogglePin(DebugLed_GPIO_Port, DebugLed_Pin);
 80006da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006de:	4808      	ldr	r0, [pc, #32]	; (8000700 <main+0x114>)
 80006e0:	f000 fe72 	bl	80013c8 <HAL_GPIO_TogglePin>
	  if(input.command_execute_flag == TRUE)
 80006e4:	e7bd      	b.n	8000662 <main+0x76>
 80006e6:	bf00      	nop
 80006e8:	20000208 	.word	0x20000208
 80006ec:	2000072c 	.word	0x2000072c
 80006f0:	20000618 	.word	0x20000618
 80006f4:	20000b30 	.word	0x20000b30
 80006f8:	20000b84 	.word	0x20000b84
 80006fc:	080043e4 	.word	0x080043e4
 8000700:	40010c00 	.word	0x40010c00
 8000704:	08004400 	.word	0x08004400
 8000708:	08004404 	.word	0x08004404
 800070c:	08004428 	.word	0x08004428
 8000710:	08004430 	.word	0x08004430
 8000714:	08004438 	.word	0x08004438
 8000718:	08004448 	.word	0x08004448
 800071c:	08004464 	.word	0x08004464
 8000720:	08004478 	.word	0x08004478

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b090      	sub	sp, #64	; 0x40
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0318 	add.w	r3, r7, #24
 800072e:	2228      	movs	r2, #40	; 0x28
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fc63 	bl	8002ffe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800074a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000762:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0318 	add.w	r3, r7, #24
 800076c:	4618      	mov	r0, r3
 800076e:	f001 fbb1 	bl	8001ed4 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000778:	f000 f8d0 	bl	800091c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077c:	230f      	movs	r3, #15
 800077e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2302      	movs	r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2102      	movs	r1, #2
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fe1c 	bl	80023d4 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007a2:	f000 f8bb 	bl	800091c <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3740      	adds	r7, #64	; 0x40
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_I2C2_Init+0x50>)
 80007b6:	4a13      	ldr	r2, [pc, #76]	; (8000804 <MX_I2C2_Init+0x54>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_I2C2_Init+0x50>)
 80007bc:	4a12      	ldr	r2, [pc, #72]	; (8000808 <MX_I2C2_Init+0x58>)
 80007be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_I2C2_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_I2C2_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_I2C2_Init+0x50>)
 80007ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_I2C2_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_I2C2_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_I2C2_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_I2C2_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_I2C2_Init+0x50>)
 80007ee:	f000 fe05 	bl	80013fc <HAL_I2C_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007f8:	f000 f890 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000b30 	.word	0x20000b30
 8000804:	40005800 	.word	0x40005800
 8000808:	000186a0 	.word	0x000186a0

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_USART2_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000844:	f001 ff62 	bl	800270c <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f865 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000b84 	.word	0x20000b84
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_GPIO_Init+0x90>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <MX_GPIO_Init+0x90>)
 800087a:	f043 0320 	orr.w	r3, r3, #32
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_GPIO_Init+0x90>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0320 	and.w	r3, r3, #32
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_GPIO_Init+0x90>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <MX_GPIO_Init+0x90>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_GPIO_Init+0x90>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_GPIO_Init+0x90>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <MX_GPIO_Init+0x90>)
 80008aa:	f043 0308 	orr.w	r3, r3, #8
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_GPIO_Init+0x90>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0308 	and.w	r3, r3, #8
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DebugLed_GPIO_Port, DebugLed_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c2:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_GPIO_Init+0x94>)
 80008c4:	f000 fd68 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DebugLed_Pin */
  GPIO_InitStruct.Pin = DebugLed_Pin;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DebugLed_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_GPIO_Init+0x94>)
 80008e2:	f000 fbff 	bl	80010e4 <HAL_GPIO_Init>

}
 80008e6:	bf00      	nop
 80008e8:	3720      	adds	r7, #32
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010c00 	.word	0x40010c00

080008f8 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000900:	1d39      	adds	r1, r7, #4
 8000902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000906:	2201      	movs	r2, #1
 8000908:	4803      	ldr	r0, [pc, #12]	; (8000918 <__io_putchar+0x20>)
 800090a:	f001 ff4c 	bl	80027a6 <HAL_UART_Transmit>
	return ch;												//Return the character
 800090e:	687b      	ldr	r3, [r7, #4]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000b84 	.word	0x20000b84

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_MspInit+0x5c>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4a14      	ldr	r2, [pc, #80]	; (8000984 <HAL_MspInit+0x5c>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6193      	str	r3, [r2, #24]
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_MspInit+0x5c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x5c>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_MspInit+0x5c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x5c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_MspInit+0x60>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_MspInit+0x60>)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	40021000 	.word	0x40021000
 8000988:	40010000 	.word	0x40010000

0800098c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <HAL_I2C_MspInit+0x74>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d124      	bne.n	80009f6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_I2C_MspInit+0x78>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <HAL_I2C_MspInit+0x78>)
 80009b2:	f043 0308 	orr.w	r3, r3, #8
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_I2C_MspInit+0x78>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0308 	and.w	r3, r3, #8
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ca:	2312      	movs	r3, #18
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4619      	mov	r1, r3
 80009d8:	480b      	ldr	r0, [pc, #44]	; (8000a08 <HAL_I2C_MspInit+0x7c>)
 80009da:	f000 fb83 	bl	80010e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_I2C_MspInit+0x78>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_I2C_MspInit+0x78>)
 80009e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e8:	61d3      	str	r3, [r2, #28]
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_I2C_MspInit+0x78>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80009f6:	bf00      	nop
 80009f8:	3720      	adds	r7, #32
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40005800 	.word	0x40005800
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40010c00 	.word	0x40010c00

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <HAL_UART_MspInit+0x98>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d137      	bne.n	8000a9c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <HAL_UART_MspInit+0x9c>)
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <HAL_UART_MspInit+0x9c>)
 8000a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a36:	61d3      	str	r3, [r2, #28]
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <HAL_UART_MspInit+0x9c>)
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_UART_MspInit+0x9c>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_UART_MspInit+0x9c>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_UART_MspInit+0x9c>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <HAL_UART_MspInit+0xa0>)
 8000a70:	f000 fb38 	bl	80010e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a74:	2308      	movs	r3, #8
 8000a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	4619      	mov	r1, r3
 8000a86:	4809      	ldr	r0, [pc, #36]	; (8000aac <HAL_UART_MspInit+0xa0>)
 8000a88:	f000 fb2c 	bl	80010e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2026      	movs	r0, #38	; 0x26
 8000a92:	f000 fa7a 	bl	8000f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a96:	2026      	movs	r0, #38	; 0x26
 8000a98:	f000 fa93 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40004400 	.word	0x40004400
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010800 	.word	0x40010800

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <HardFault_Handler+0x4>

08000ac2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <MemManage_Handler+0x4>

08000ac8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <BusFault_Handler+0x4>

08000ace <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <UsageFault_Handler+0x4>

08000ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afc:	f000 f952 	bl	8000da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	char uart_char = USART2->DR;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <USART2_IRQHandler+0x70>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	71fb      	strb	r3, [r7, #7]
	//This way we ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	2b0a      	cmp	r3, #10
 8000b14:	d026      	beq.n	8000b64 <USART2_IRQHandler+0x60>
	{
		//Check for CR and LF characters
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b0d      	cmp	r3, #13
 8000b1a:	d002      	beq.n	8000b22 <USART2_IRQHandler+0x1e>
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8000b20:	d10e      	bne.n	8000b40 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <USART2_IRQHandler+0x74>)
 8000b24:	22ff      	movs	r2, #255	; 0xff
 8000b26:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <USART2_IRQHandler+0x74>)
 8000b2c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <USART2_IRQHandler+0x74>)
 8000b32:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <USART2_IRQHandler+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000b3e:	e011      	b.n	8000b64 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <USART2_IRQHandler+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <USART2_IRQHandler+0x74>)
 8000b4a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <USART2_IRQHandler+0x74>)
 8000b50:	4413      	add	r3, r2
 8000b52:	79fa      	ldrb	r2, [r7, #7]
 8000b54:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <USART2_IRQHandler+0x74>)
 8000b58:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <USART2_IRQHandler+0x74>)
 8000b60:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <USART2_IRQHandler+0x78>)
 8000b66:	f001 ff05 	bl	8002974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40004400 	.word	0x40004400
 8000b78:	20000208 	.word	0x20000208
 8000b7c:	20000b84 	.word	0x20000b84

08000b80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e00a      	b.n	8000ba8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b92:	f3af 8000 	nop.w
 8000b96:	4601      	mov	r1, r0
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	60ba      	str	r2, [r7, #8]
 8000b9e:	b2ca      	uxtb	r2, r1
 8000ba0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf0      	blt.n	8000b92 <_read+0x12>
	}

return len;
 8000bb0:	687b      	ldr	r3, [r7, #4]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	60f8      	str	r0, [r7, #12]
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	e009      	b.n	8000be0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60ba      	str	r2, [r7, #8]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fe8f 	bl	80008f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbf1      	blt.n	8000bcc <_write+0x12>
	}
	return len;
 8000be8:	687b      	ldr	r3, [r7, #4]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_close>:

int _close(int file)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
	return -1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c18:	605a      	str	r2, [r3, #4]
	return 0;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr

08000c26 <_isatty>:

int _isatty(int file)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr

08000c3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b085      	sub	sp, #20
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
	return 0;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
	...

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f002 f986 	bl	8002f94 <__errno>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20005000 	.word	0x20005000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	200001f8 	.word	0x200001f8
 8000cbc:	20000bd0 	.word	0x20000bd0

08000cc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ccc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cce:	e003      	b.n	8000cd8 <LoopCopyDataInit>

08000cd0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000cd2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000cd4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cd6:	3104      	adds	r1, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cd8:	480a      	ldr	r0, [pc, #40]	; (8000d04 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000cdc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cde:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ce0:	d3f6      	bcc.n	8000cd0 <CopyDataInit>
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ce4:	e002      	b.n	8000cec <LoopFillZerobss>

08000ce6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ce8:	f842 3b04 	str.w	r3, [r2], #4

08000cec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000cee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000cf0:	d3f9      	bcc.n	8000ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cf2:	f7ff ffe5 	bl	8000cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f002 f953 	bl	8002fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cfa:	f7ff fc77 	bl	80005ec <main>
  bx lr
 8000cfe:	4770      	bx	lr
  ldr r3, =_sidata
 8000d00:	08004664 	.word	0x08004664
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d08:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8000d0c:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8000d10:	20000bcc 	.word	0x20000bcc

08000d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_2_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_Init+0x28>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_Init+0x28>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f923 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f000 f808 	bl	8000d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d34:	f7ff fdf8 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40022000 	.word	0x40022000

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_InitTick+0x54>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x58>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f93b 	bl	8000fde <HAL_SYSTICK_Config>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00e      	b.n	8000d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b0f      	cmp	r3, #15
 8000d76:	d80a      	bhi.n	8000d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f000 f903 	bl	8000f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d84:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <HAL_InitTick+0x5c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e000      	b.n	8000d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000004 	.word	0x20000004

08000da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_IncTick+0x1c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_IncTick+0x20>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a03      	ldr	r2, [pc, #12]	; (8000dc4 <HAL_IncTick+0x20>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000bc4 	.word	0x20000bc4

08000dc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b02      	ldr	r3, [pc, #8]	; (8000dd8 <HAL_GetTick+0x10>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	20000bc4 	.word	0x20000bc4

08000ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <__NVIC_GetPriorityGrouping+0x18>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	f003 0307 	and.w	r3, r3, #7
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db0b      	blt.n	8000e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 021f 	and.w	r2, r3, #31
 8000e58:	4906      	ldr	r1, [pc, #24]	; (8000e74 <__NVIC_EnableIRQ+0x34>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	2001      	movs	r0, #1
 8000e62:	fa00 f202 	lsl.w	r2, r0, r2
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f7ff ff90 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff2d 	bl	8000ddc <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff42 	bl	8000e24 <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff90 	bl	8000ecc <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5f 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff35 	bl	8000e40 <__NVIC_EnableIRQ>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ffa2 	bl	8000f30 <SysTick_Config>
 8000fec:	4603      	mov	r3, r0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800100a:	2b02      	cmp	r3, #2
 800100c:	d005      	beq.n	800101a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2204      	movs	r2, #4
 8001012:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e051      	b.n	80010be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 020e 	bic.w	r2, r2, #14
 8001028:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 0201 	bic.w	r2, r2, #1
 8001038:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <HAL_DMA_Abort_IT+0xd0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d029      	beq.n	8001098 <HAL_DMA_Abort_IT+0xa0>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a20      	ldr	r2, [pc, #128]	; (80010cc <HAL_DMA_Abort_IT+0xd4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d022      	beq.n	8001094 <HAL_DMA_Abort_IT+0x9c>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a1f      	ldr	r2, [pc, #124]	; (80010d0 <HAL_DMA_Abort_IT+0xd8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d01a      	beq.n	800108e <HAL_DMA_Abort_IT+0x96>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <HAL_DMA_Abort_IT+0xdc>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d012      	beq.n	8001088 <HAL_DMA_Abort_IT+0x90>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <HAL_DMA_Abort_IT+0xe0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d00a      	beq.n	8001082 <HAL_DMA_Abort_IT+0x8a>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <HAL_DMA_Abort_IT+0xe4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d102      	bne.n	800107c <HAL_DMA_Abort_IT+0x84>
 8001076:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800107a:	e00e      	b.n	800109a <HAL_DMA_Abort_IT+0xa2>
 800107c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001080:	e00b      	b.n	800109a <HAL_DMA_Abort_IT+0xa2>
 8001082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001086:	e008      	b.n	800109a <HAL_DMA_Abort_IT+0xa2>
 8001088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108c:	e005      	b.n	800109a <HAL_DMA_Abort_IT+0xa2>
 800108e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001092:	e002      	b.n	800109a <HAL_DMA_Abort_IT+0xa2>
 8001094:	2310      	movs	r3, #16
 8001096:	e000      	b.n	800109a <HAL_DMA_Abort_IT+0xa2>
 8001098:	2301      	movs	r3, #1
 800109a:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <HAL_DMA_Abort_IT+0xe8>)
 800109c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	4798      	blx	r3
    } 
  }
  return status;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40020008 	.word	0x40020008
 80010cc:	4002001c 	.word	0x4002001c
 80010d0:	40020030 	.word	0x40020030
 80010d4:	40020044 	.word	0x40020044
 80010d8:	40020058 	.word	0x40020058
 80010dc:	4002006c 	.word	0x4002006c
 80010e0:	40020000 	.word	0x40020000

080010e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b08b      	sub	sp, #44	; 0x2c
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f6:	e127      	b.n	8001348 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010f8:	2201      	movs	r2, #1
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 8116 	bne.w	8001342 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b12      	cmp	r3, #18
 800111c:	d034      	beq.n	8001188 <HAL_GPIO_Init+0xa4>
 800111e:	2b12      	cmp	r3, #18
 8001120:	d80d      	bhi.n	800113e <HAL_GPIO_Init+0x5a>
 8001122:	2b02      	cmp	r3, #2
 8001124:	d02b      	beq.n	800117e <HAL_GPIO_Init+0x9a>
 8001126:	2b02      	cmp	r3, #2
 8001128:	d804      	bhi.n	8001134 <HAL_GPIO_Init+0x50>
 800112a:	2b00      	cmp	r3, #0
 800112c:	d031      	beq.n	8001192 <HAL_GPIO_Init+0xae>
 800112e:	2b01      	cmp	r3, #1
 8001130:	d01c      	beq.n	800116c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001132:	e048      	b.n	80011c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001134:	2b03      	cmp	r3, #3
 8001136:	d043      	beq.n	80011c0 <HAL_GPIO_Init+0xdc>
 8001138:	2b11      	cmp	r3, #17
 800113a:	d01b      	beq.n	8001174 <HAL_GPIO_Init+0x90>
          break;
 800113c:	e043      	b.n	80011c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800113e:	4a89      	ldr	r2, [pc, #548]	; (8001364 <HAL_GPIO_Init+0x280>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d026      	beq.n	8001192 <HAL_GPIO_Init+0xae>
 8001144:	4a87      	ldr	r2, [pc, #540]	; (8001364 <HAL_GPIO_Init+0x280>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d806      	bhi.n	8001158 <HAL_GPIO_Init+0x74>
 800114a:	4a87      	ldr	r2, [pc, #540]	; (8001368 <HAL_GPIO_Init+0x284>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d020      	beq.n	8001192 <HAL_GPIO_Init+0xae>
 8001150:	4a86      	ldr	r2, [pc, #536]	; (800136c <HAL_GPIO_Init+0x288>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d01d      	beq.n	8001192 <HAL_GPIO_Init+0xae>
          break;
 8001156:	e036      	b.n	80011c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001158:	4a85      	ldr	r2, [pc, #532]	; (8001370 <HAL_GPIO_Init+0x28c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0xae>
 800115e:	4a85      	ldr	r2, [pc, #532]	; (8001374 <HAL_GPIO_Init+0x290>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d016      	beq.n	8001192 <HAL_GPIO_Init+0xae>
 8001164:	4a84      	ldr	r2, [pc, #528]	; (8001378 <HAL_GPIO_Init+0x294>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d013      	beq.n	8001192 <HAL_GPIO_Init+0xae>
          break;
 800116a:	e02c      	b.n	80011c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	623b      	str	r3, [r7, #32]
          break;
 8001172:	e028      	b.n	80011c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	3304      	adds	r3, #4
 800117a:	623b      	str	r3, [r7, #32]
          break;
 800117c:	e023      	b.n	80011c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	3308      	adds	r3, #8
 8001184:	623b      	str	r3, [r7, #32]
          break;
 8001186:	e01e      	b.n	80011c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	330c      	adds	r3, #12
 800118e:	623b      	str	r3, [r7, #32]
          break;
 8001190:	e019      	b.n	80011c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800119a:	2304      	movs	r3, #4
 800119c:	623b      	str	r3, [r7, #32]
          break;
 800119e:	e012      	b.n	80011c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d105      	bne.n	80011b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a8:	2308      	movs	r3, #8
 80011aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69fa      	ldr	r2, [r7, #28]
 80011b0:	611a      	str	r2, [r3, #16]
          break;
 80011b2:	e008      	b.n	80011c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b4:	2308      	movs	r3, #8
 80011b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	615a      	str	r2, [r3, #20]
          break;
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
          break;
 80011c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2bff      	cmp	r3, #255	; 0xff
 80011ca:	d801      	bhi.n	80011d0 <HAL_GPIO_Init+0xec>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	e001      	b.n	80011d4 <HAL_GPIO_Init+0xf0>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3304      	adds	r3, #4
 80011d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	2bff      	cmp	r3, #255	; 0xff
 80011da:	d802      	bhi.n	80011e2 <HAL_GPIO_Init+0xfe>
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	e002      	b.n	80011e8 <HAL_GPIO_Init+0x104>
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	3b08      	subs	r3, #8
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	210f      	movs	r1, #15
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	401a      	ands	r2, r3
 80011fa:	6a39      	ldr	r1, [r7, #32]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	431a      	orrs	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 8096 	beq.w	8001342 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001216:	4b59      	ldr	r3, [pc, #356]	; (800137c <HAL_GPIO_Init+0x298>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a58      	ldr	r2, [pc, #352]	; (800137c <HAL_GPIO_Init+0x298>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b56      	ldr	r3, [pc, #344]	; (800137c <HAL_GPIO_Init+0x298>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800122e:	4a54      	ldr	r2, [pc, #336]	; (8001380 <HAL_GPIO_Init+0x29c>)
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3302      	adds	r3, #2
 8001236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	4013      	ands	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4b      	ldr	r2, [pc, #300]	; (8001384 <HAL_GPIO_Init+0x2a0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x19e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4a      	ldr	r2, [pc, #296]	; (8001388 <HAL_GPIO_Init+0x2a4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x19a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a49      	ldr	r2, [pc, #292]	; (800138c <HAL_GPIO_Init+0x2a8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x196>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a48      	ldr	r2, [pc, #288]	; (8001390 <HAL_GPIO_Init+0x2ac>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x192>
 8001272:	2303      	movs	r3, #3
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x1a0>
 8001276:	2304      	movs	r3, #4
 8001278:	e004      	b.n	8001284 <HAL_GPIO_Init+0x1a0>
 800127a:	2302      	movs	r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x1a0>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x1a0>
 8001282:	2300      	movs	r3, #0
 8001284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001286:	f002 0203 	and.w	r2, r2, #3
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	4093      	lsls	r3, r2
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001294:	493a      	ldr	r1, [pc, #232]	; (8001380 <HAL_GPIO_Init+0x29c>)
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012ae:	4b39      	ldr	r3, [pc, #228]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4938      	ldr	r1, [pc, #224]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
 80012ba:	e006      	b.n	80012ca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	4933      	ldr	r1, [pc, #204]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	492e      	ldr	r1, [pc, #184]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
 80012e2:	e006      	b.n	80012f2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012e4:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	4929      	ldr	r1, [pc, #164]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012fe:	4b25      	ldr	r3, [pc, #148]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	4924      	ldr	r1, [pc, #144]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	608b      	str	r3, [r1, #8]
 800130a:	e006      	b.n	800131a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	43db      	mvns	r3, r3
 8001314:	491f      	ldr	r1, [pc, #124]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 8001316:	4013      	ands	r3, r2
 8001318:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	491a      	ldr	r1, [pc, #104]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	60cb      	str	r3, [r1, #12]
 8001332:	e006      	b.n	8001342 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	43db      	mvns	r3, r3
 800133c:	4915      	ldr	r1, [pc, #84]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 800133e:	4013      	ands	r3, r2
 8001340:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	3301      	adds	r3, #1
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	fa22 f303 	lsr.w	r3, r2, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	f47f aed0 	bne.w	80010f8 <HAL_GPIO_Init+0x14>
  }
}
 8001358:	bf00      	nop
 800135a:	372c      	adds	r7, #44	; 0x2c
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	10210000 	.word	0x10210000
 8001368:	10110000 	.word	0x10110000
 800136c:	10120000 	.word	0x10120000
 8001370:	10310000 	.word	0x10310000
 8001374:	10320000 	.word	0x10320000
 8001378:	10220000 	.word	0x10220000
 800137c:	40021000 	.word	0x40021000
 8001380:	40010000 	.word	0x40010000
 8001384:	40010800 	.word	0x40010800
 8001388:	40010c00 	.word	0x40010c00
 800138c:	40011000 	.word	0x40011000
 8001390:	40011400 	.word	0x40011400
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013b4:	e003      	b.n	80013be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	041a      	lsls	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	611a      	str	r2, [r3, #16]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4013      	ands	r3, r2
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43d9      	mvns	r1, r3
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	400b      	ands	r3, r1
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	611a      	str	r2, [r3, #16]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e11f      	b.n	800164e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d106      	bne.n	8001428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff fab2 	bl	800098c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2224      	movs	r2, #36	; 0x24
 800142c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0201 	bic.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800144e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800145e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001460:	f001 f90e 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8001464:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4a7b      	ldr	r2, [pc, #492]	; (8001658 <HAL_I2C_Init+0x25c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d807      	bhi.n	8001480 <HAL_I2C_Init+0x84>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4a7a      	ldr	r2, [pc, #488]	; (800165c <HAL_I2C_Init+0x260>)
 8001474:	4293      	cmp	r3, r2
 8001476:	bf94      	ite	ls
 8001478:	2301      	movls	r3, #1
 800147a:	2300      	movhi	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	e006      	b.n	800148e <HAL_I2C_Init+0x92>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4a77      	ldr	r2, [pc, #476]	; (8001660 <HAL_I2C_Init+0x264>)
 8001484:	4293      	cmp	r3, r2
 8001486:	bf94      	ite	ls
 8001488:	2301      	movls	r3, #1
 800148a:	2300      	movhi	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0db      	b.n	800164e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4a72      	ldr	r2, [pc, #456]	; (8001664 <HAL_I2C_Init+0x268>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	0c9b      	lsrs	r3, r3, #18
 80014a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	4a64      	ldr	r2, [pc, #400]	; (8001658 <HAL_I2C_Init+0x25c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d802      	bhi.n	80014d0 <HAL_I2C_Init+0xd4>
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	3301      	adds	r3, #1
 80014ce:	e009      	b.n	80014e4 <HAL_I2C_Init+0xe8>
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014d6:	fb02 f303 	mul.w	r3, r2, r3
 80014da:	4a63      	ldr	r2, [pc, #396]	; (8001668 <HAL_I2C_Init+0x26c>)
 80014dc:	fba2 2303 	umull	r2, r3, r2, r3
 80014e0:	099b      	lsrs	r3, r3, #6
 80014e2:	3301      	adds	r3, #1
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	430b      	orrs	r3, r1
 80014ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4956      	ldr	r1, [pc, #344]	; (8001658 <HAL_I2C_Init+0x25c>)
 8001500:	428b      	cmp	r3, r1
 8001502:	d80d      	bhi.n	8001520 <HAL_I2C_Init+0x124>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1e59      	subs	r1, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001512:	3301      	adds	r3, #1
 8001514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001518:	2b04      	cmp	r3, #4
 800151a:	bf38      	it	cc
 800151c:	2304      	movcc	r3, #4
 800151e:	e04f      	b.n	80015c0 <HAL_I2C_Init+0x1c4>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d111      	bne.n	800154c <HAL_I2C_Init+0x150>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1e58      	subs	r0, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	440b      	add	r3, r1
 8001536:	fbb0 f3f3 	udiv	r3, r0, r3
 800153a:	3301      	adds	r3, #1
 800153c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf0c      	ite	eq
 8001544:	2301      	moveq	r3, #1
 8001546:	2300      	movne	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	e012      	b.n	8001572 <HAL_I2C_Init+0x176>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	1e58      	subs	r0, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6859      	ldr	r1, [r3, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	0099      	lsls	r1, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001562:	3301      	adds	r3, #1
 8001564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001568:	2b00      	cmp	r3, #0
 800156a:	bf0c      	ite	eq
 800156c:	2301      	moveq	r3, #1
 800156e:	2300      	movne	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_I2C_Init+0x17e>
 8001576:	2301      	movs	r3, #1
 8001578:	e022      	b.n	80015c0 <HAL_I2C_Init+0x1c4>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10e      	bne.n	80015a0 <HAL_I2C_Init+0x1a4>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1e58      	subs	r0, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6859      	ldr	r1, [r3, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	440b      	add	r3, r1
 8001590:	fbb0 f3f3 	udiv	r3, r0, r3
 8001594:	3301      	adds	r3, #1
 8001596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800159a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159e:	e00f      	b.n	80015c0 <HAL_I2C_Init+0x1c4>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1e58      	subs	r0, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	0099      	lsls	r1, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	6809      	ldr	r1, [r1, #0]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69da      	ldr	r2, [r3, #28]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6911      	ldr	r1, [r2, #16]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68d2      	ldr	r2, [r2, #12]
 80015fa:	4311      	orrs	r1, r2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	430b      	orrs	r3, r1
 8001602:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0201 	orr.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2220      	movs	r2, #32
 800163a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	000186a0 	.word	0x000186a0
 800165c:	001e847f 	.word	0x001e847f
 8001660:	003d08ff 	.word	0x003d08ff
 8001664:	431bde83 	.word	0x431bde83
 8001668:	10624dd3 	.word	0x10624dd3

0800166c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af02      	add	r7, sp, #8
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	461a      	mov	r2, r3
 8001678:	460b      	mov	r3, r1
 800167a:	817b      	strh	r3, [r7, #10]
 800167c:	4613      	mov	r3, r2
 800167e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff fba2 	bl	8000dc8 <HAL_GetTick>
 8001684:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b20      	cmp	r3, #32
 8001690:	f040 80e0 	bne.w	8001854 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2319      	movs	r3, #25
 800169a:	2201      	movs	r2, #1
 800169c:	4970      	ldr	r1, [pc, #448]	; (8001860 <HAL_I2C_Master_Transmit+0x1f4>)
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 fa92 	bl	8001bc8 <I2C_WaitOnFlagUntilTimeout>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016aa:	2302      	movs	r3, #2
 80016ac:	e0d3      	b.n	8001856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d101      	bne.n	80016bc <HAL_I2C_Master_Transmit+0x50>
 80016b8:	2302      	movs	r3, #2
 80016ba:	e0cc      	b.n	8001856 <HAL_I2C_Master_Transmit+0x1ea>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d007      	beq.n	80016e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0201 	orr.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2221      	movs	r2, #33	; 0x21
 80016f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2210      	movs	r2, #16
 80016fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	893a      	ldrh	r2, [r7, #8]
 8001712:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4a50      	ldr	r2, [pc, #320]	; (8001864 <HAL_I2C_Master_Transmit+0x1f8>)
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001724:	8979      	ldrh	r1, [r7, #10]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	6a3a      	ldr	r2, [r7, #32]
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f000 f9ca 	bl	8001ac4 <I2C_MasterRequestWrite>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e08d      	b.n	8001856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001750:	e066      	b.n	8001820 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	6a39      	ldr	r1, [r7, #32]
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 fb0c 	bl	8001d74 <I2C_WaitOnTXEFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00d      	beq.n	800177e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	2b04      	cmp	r3, #4
 8001768:	d107      	bne.n	800177a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001778:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e06b      	b.n	8001856 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	781a      	ldrb	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001798:	b29b      	uxth	r3, r3
 800179a:	3b01      	subs	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a6:	3b01      	subs	r3, #1
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d11b      	bne.n	80017f4 <HAL_I2C_Master_Transmit+0x188>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d017      	beq.n	80017f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	781a      	ldrb	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017de:	b29b      	uxth	r3, r3
 80017e0:	3b01      	subs	r3, #1
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	6a39      	ldr	r1, [r7, #32]
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 fafc 	bl	8001df6 <I2C_WaitOnBTFFlagUntilTimeout>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00d      	beq.n	8001820 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	2b04      	cmp	r3, #4
 800180a:	d107      	bne.n	800181c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800181a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e01a      	b.n	8001856 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001824:	2b00      	cmp	r3, #0
 8001826:	d194      	bne.n	8001752 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2220      	movs	r2, #32
 800183c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	e000      	b.n	8001856 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001854:	2302      	movs	r3, #2
  }
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	00100002 	.word	0x00100002
 8001864:	ffff0000 	.word	0xffff0000

08001868 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af02      	add	r7, sp, #8
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	460b      	mov	r3, r1
 8001876:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff faa6 	bl	8000dc8 <HAL_GetTick>
 800187c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800187e:	2301      	movs	r3, #1
 8001880:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b20      	cmp	r3, #32
 800188c:	f040 8111 	bne.w	8001ab2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2319      	movs	r3, #25
 8001896:	2201      	movs	r2, #1
 8001898:	4988      	ldr	r1, [pc, #544]	; (8001abc <HAL_I2C_IsDeviceReady+0x254>)
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 f994 	bl	8001bc8 <I2C_WaitOnFlagUntilTimeout>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80018a6:	2302      	movs	r3, #2
 80018a8:	e104      	b.n	8001ab4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_I2C_IsDeviceReady+0x50>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e0fd      	b.n	8001ab4 <HAL_I2C_IsDeviceReady+0x24c>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d007      	beq.n	80018de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0201 	orr.w	r2, r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2224      	movs	r2, #36	; 0x24
 80018f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4a70      	ldr	r2, [pc, #448]	; (8001ac0 <HAL_I2C_IsDeviceReady+0x258>)
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001910:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	2200      	movs	r2, #0
 800191a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 f952 	bl	8001bc8 <I2C_WaitOnFlagUntilTimeout>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00d      	beq.n	8001946 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001938:	d103      	bne.n	8001942 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001940:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e0b6      	b.n	8001ab4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001946:	897b      	ldrh	r3, [r7, #10]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001954:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001956:	f7ff fa37 	bl	8000dc8 <HAL_GetTick>
 800195a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b02      	cmp	r3, #2
 8001968:	bf0c      	ite	eq
 800196a:	2301      	moveq	r3, #1
 800196c:	2300      	movne	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001980:	bf0c      	ite	eq
 8001982:	2301      	moveq	r3, #1
 8001984:	2300      	movne	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800198a:	e025      	b.n	80019d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800198c:	f7ff fa1c 	bl	8000dc8 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d302      	bcc.n	80019a2 <HAL_I2C_IsDeviceReady+0x13a>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d103      	bne.n	80019aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	22a0      	movs	r2, #160	; 0xa0
 80019a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	bf0c      	ite	eq
 80019b8:	2301      	moveq	r3, #1
 80019ba:	2300      	movne	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2ba0      	cmp	r3, #160	; 0xa0
 80019e2:	d005      	beq.n	80019f0 <HAL_I2C_IsDeviceReady+0x188>
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <HAL_I2C_IsDeviceReady+0x188>
 80019ea:	7dbb      	ldrb	r3, [r7, #22]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0cd      	beq.n	800198c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2220      	movs	r2, #32
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d129      	bne.n	8001a5a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a14:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2319      	movs	r3, #25
 8001a32:	2201      	movs	r2, #1
 8001a34:	4921      	ldr	r1, [pc, #132]	; (8001abc <HAL_I2C_IsDeviceReady+0x254>)
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 f8c6 	bl	8001bc8 <I2C_WaitOnFlagUntilTimeout>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e036      	b.n	8001ab4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e02c      	b.n	8001ab4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a68:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a72:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2319      	movs	r3, #25
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	490f      	ldr	r1, [pc, #60]	; (8001abc <HAL_I2C_IsDeviceReady+0x254>)
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 f8a2 	bl	8001bc8 <I2C_WaitOnFlagUntilTimeout>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e012      	b.n	8001ab4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	3301      	adds	r3, #1
 8001a92:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f4ff af32 	bcc.w	8001902 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001ab2:	2302      	movs	r3, #2
  }
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	00100002 	.word	0x00100002
 8001ac0:	ffff0000 	.word	0xffff0000

08001ac4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d006      	beq.n	8001aee <I2C_MasterRequestWrite+0x2a>
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d003      	beq.n	8001aee <I2C_MasterRequestWrite+0x2a>
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001aec:	d108      	bne.n	8001b00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	e00b      	b.n	8001b18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	2b12      	cmp	r3, #18
 8001b06:	d107      	bne.n	8001b18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f84f 	bl	8001bc8 <I2C_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00d      	beq.n	8001b4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3e:	d103      	bne.n	8001b48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e035      	b.n	8001bb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b54:	d108      	bne.n	8001b68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b56:	897b      	ldrh	r3, [r7, #10]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b64:	611a      	str	r2, [r3, #16]
 8001b66:	e01b      	b.n	8001ba0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b68:	897b      	ldrh	r3, [r7, #10]
 8001b6a:	11db      	asrs	r3, r3, #7
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f003 0306 	and.w	r3, r3, #6
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f063 030f 	orn	r3, r3, #15
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <I2C_MasterRequestWrite+0xfc>)
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 f875 	bl	8001c76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e010      	b.n	8001bb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b96:	897b      	ldrh	r3, [r7, #10]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <I2C_MasterRequestWrite+0x100>)
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f865 	bl	8001c76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	00010008 	.word	0x00010008
 8001bc4:	00010002 	.word	0x00010002

08001bc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bd8:	e025      	b.n	8001c26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d021      	beq.n	8001c26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001be2:	f7ff f8f1 	bl	8000dc8 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d302      	bcc.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d116      	bne.n	8001c26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2220      	movs	r2, #32
 8001c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f043 0220 	orr.w	r2, r3, #32
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e023      	b.n	8001c6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	0c1b      	lsrs	r3, r3, #16
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d10d      	bne.n	8001c4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bf0c      	ite	eq
 8001c42:	2301      	moveq	r3, #1
 8001c44:	2300      	movne	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	e00c      	b.n	8001c66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4013      	ands	r3, r2
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	bf0c      	ite	eq
 8001c5e:	2301      	moveq	r3, #1
 8001c60:	2300      	movne	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d0b6      	beq.n	8001bda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b084      	sub	sp, #16
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c84:	e051      	b.n	8001d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c94:	d123      	bne.n	8001cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ca4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f043 0204 	orr.w	r2, r3, #4
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e046      	b.n	8001d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d021      	beq.n	8001d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce6:	f7ff f86f 	bl	8000dc8 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d302      	bcc.n	8001cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d116      	bne.n	8001d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2220      	movs	r2, #32
 8001d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f043 0220 	orr.w	r2, r3, #32
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e020      	b.n	8001d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d10c      	bne.n	8001d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	bf14      	ite	ne
 8001d46:	2301      	movne	r3, #1
 8001d48:	2300      	moveq	r3, #0
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	e00b      	b.n	8001d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	43da      	mvns	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf14      	ite	ne
 8001d60:	2301      	movne	r3, #1
 8001d62:	2300      	moveq	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d18d      	bne.n	8001c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d80:	e02d      	b.n	8001dde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f878 	bl	8001e78 <I2C_IsAcknowledgeFailed>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e02d      	b.n	8001dee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d021      	beq.n	8001dde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9a:	f7ff f815 	bl	8000dc8 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d302      	bcc.n	8001db0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d116      	bne.n	8001dde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f043 0220 	orr.w	r2, r3, #32
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e007      	b.n	8001dee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de8:	2b80      	cmp	r3, #128	; 0x80
 8001dea:	d1ca      	bne.n	8001d82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e02:	e02d      	b.n	8001e60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 f837 	bl	8001e78 <I2C_IsAcknowledgeFailed>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e02d      	b.n	8001e70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1a:	d021      	beq.n	8001e60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e1c:	f7fe ffd4 	bl	8000dc8 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d302      	bcc.n	8001e32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d116      	bne.n	8001e60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f043 0220 	orr.w	r2, r3, #32
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e007      	b.n	8001e70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d1ca      	bne.n	8001e04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8e:	d11b      	bne.n	8001ec8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f043 0204 	orr.w	r2, r3, #4
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e26c      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8087 	beq.w	8002002 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef4:	4b92      	ldr	r3, [pc, #584]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d00c      	beq.n	8001f1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f00:	4b8f      	ldr	r3, [pc, #572]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d112      	bne.n	8001f32 <HAL_RCC_OscConfig+0x5e>
 8001f0c:	4b8c      	ldr	r3, [pc, #560]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f18:	d10b      	bne.n	8001f32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1a:	4b89      	ldr	r3, [pc, #548]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d06c      	beq.n	8002000 <HAL_RCC_OscConfig+0x12c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d168      	bne.n	8002000 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e246      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x76>
 8001f3c:	4b80      	ldr	r3, [pc, #512]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a7f      	ldr	r2, [pc, #508]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	e02e      	b.n	8001fa8 <HAL_RCC_OscConfig+0xd4>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x98>
 8001f52:	4b7b      	ldr	r3, [pc, #492]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a7a      	ldr	r2, [pc, #488]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b78      	ldr	r3, [pc, #480]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a77      	ldr	r2, [pc, #476]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e01d      	b.n	8001fa8 <HAL_RCC_OscConfig+0xd4>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0xbc>
 8001f76:	4b72      	ldr	r3, [pc, #456]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a71      	ldr	r2, [pc, #452]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	4b6f      	ldr	r3, [pc, #444]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a6e      	ldr	r2, [pc, #440]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e00b      	b.n	8001fa8 <HAL_RCC_OscConfig+0xd4>
 8001f90:	4b6b      	ldr	r3, [pc, #428]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a6a      	ldr	r2, [pc, #424]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	4b68      	ldr	r3, [pc, #416]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a67      	ldr	r2, [pc, #412]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d013      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7fe ff0a 	bl	8000dc8 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7fe ff06 	bl	8000dc8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1fa      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b5d      	ldr	r3, [pc, #372]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0xe4>
 8001fd6:	e014      	b.n	8002002 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7fe fef6 	bl	8000dc8 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7fe fef2 	bl	8000dc8 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	; 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e1e6      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	4b53      	ldr	r3, [pc, #332]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x10c>
 8001ffe:	e000      	b.n	8002002 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d063      	beq.n	80020d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800200e:	4b4c      	ldr	r3, [pc, #304]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800201a:	4b49      	ldr	r3, [pc, #292]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b08      	cmp	r3, #8
 8002024:	d11c      	bne.n	8002060 <HAL_RCC_OscConfig+0x18c>
 8002026:	4b46      	ldr	r3, [pc, #280]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d116      	bne.n	8002060 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002032:	4b43      	ldr	r3, [pc, #268]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_RCC_OscConfig+0x176>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e1ba      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204a:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4939      	ldr	r1, [pc, #228]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205e:	e03a      	b.n	80020d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d020      	beq.n	80020aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002068:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_RCC_OscConfig+0x270>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7fe feab 	bl	8000dc8 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002076:	f7fe fea7 	bl	8000dc8 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e19b      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002088:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4927      	ldr	r1, [pc, #156]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]
 80020a8:	e015      	b.n	80020d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_RCC_OscConfig+0x270>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe fe8a 	bl	8000dc8 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b8:	f7fe fe86 	bl	8000dc8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e17a      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d03a      	beq.n	8002158 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d019      	beq.n	800211e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ea:	4b17      	ldr	r3, [pc, #92]	; (8002148 <HAL_RCC_OscConfig+0x274>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f0:	f7fe fe6a 	bl	8000dc8 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f8:	f7fe fe66 	bl	8000dc8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e15a      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <HAL_RCC_OscConfig+0x26c>)
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002116:	2001      	movs	r0, #1
 8002118:	f000 fada 	bl	80026d0 <RCC_Delay>
 800211c:	e01c      	b.n	8002158 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_RCC_OscConfig+0x274>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002124:	f7fe fe50 	bl	8000dc8 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212a:	e00f      	b.n	800214c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212c:	f7fe fe4c 	bl	8000dc8 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d908      	bls.n	800214c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e140      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	42420000 	.word	0x42420000
 8002148:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	4b9e      	ldr	r3, [pc, #632]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1e9      	bne.n	800212c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80a6 	beq.w	80022b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216a:	4b97      	ldr	r3, [pc, #604]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10d      	bne.n	8002192 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	4b94      	ldr	r3, [pc, #592]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	4a93      	ldr	r2, [pc, #588]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	61d3      	str	r3, [r2, #28]
 8002182:	4b91      	ldr	r3, [pc, #580]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218e:	2301      	movs	r3, #1
 8002190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002192:	4b8e      	ldr	r3, [pc, #568]	; (80023cc <HAL_RCC_OscConfig+0x4f8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d118      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219e:	4b8b      	ldr	r3, [pc, #556]	; (80023cc <HAL_RCC_OscConfig+0x4f8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a8a      	ldr	r2, [pc, #552]	; (80023cc <HAL_RCC_OscConfig+0x4f8>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021aa:	f7fe fe0d 	bl	8000dc8 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b2:	f7fe fe09 	bl	8000dc8 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b64      	cmp	r3, #100	; 0x64
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e0fd      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c4:	4b81      	ldr	r3, [pc, #516]	; (80023cc <HAL_RCC_OscConfig+0x4f8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x312>
 80021d8:	4b7b      	ldr	r3, [pc, #492]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4a7a      	ldr	r2, [pc, #488]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6213      	str	r3, [r2, #32]
 80021e4:	e02d      	b.n	8002242 <HAL_RCC_OscConfig+0x36e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x334>
 80021ee:	4b76      	ldr	r3, [pc, #472]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4a75      	ldr	r2, [pc, #468]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	6213      	str	r3, [r2, #32]
 80021fa:	4b73      	ldr	r3, [pc, #460]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4a72      	ldr	r2, [pc, #456]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 8002200:	f023 0304 	bic.w	r3, r3, #4
 8002204:	6213      	str	r3, [r2, #32]
 8002206:	e01c      	b.n	8002242 <HAL_RCC_OscConfig+0x36e>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b05      	cmp	r3, #5
 800220e:	d10c      	bne.n	800222a <HAL_RCC_OscConfig+0x356>
 8002210:	4b6d      	ldr	r3, [pc, #436]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4a6c      	ldr	r2, [pc, #432]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 8002216:	f043 0304 	orr.w	r3, r3, #4
 800221a:	6213      	str	r3, [r2, #32]
 800221c:	4b6a      	ldr	r3, [pc, #424]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4a69      	ldr	r2, [pc, #420]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6213      	str	r3, [r2, #32]
 8002228:	e00b      	b.n	8002242 <HAL_RCC_OscConfig+0x36e>
 800222a:	4b67      	ldr	r3, [pc, #412]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4a66      	ldr	r2, [pc, #408]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	6213      	str	r3, [r2, #32]
 8002236:	4b64      	ldr	r3, [pc, #400]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	4a63      	ldr	r2, [pc, #396]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 800223c:	f023 0304 	bic.w	r3, r3, #4
 8002240:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d015      	beq.n	8002276 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224a:	f7fe fdbd 	bl	8000dc8 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7fe fdb9 	bl	8000dc8 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e0ab      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	4b57      	ldr	r3, [pc, #348]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ee      	beq.n	8002252 <HAL_RCC_OscConfig+0x37e>
 8002274:	e014      	b.n	80022a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7fe fda7 	bl	8000dc8 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227c:	e00a      	b.n	8002294 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7fe fda3 	bl	8000dc8 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	f241 3288 	movw	r2, #5000	; 0x1388
 800228c:	4293      	cmp	r3, r2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e095      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002294:	4b4c      	ldr	r3, [pc, #304]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1ee      	bne.n	800227e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d105      	bne.n	80022b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a6:	4b48      	ldr	r3, [pc, #288]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	4a47      	ldr	r2, [pc, #284]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8081 	beq.w	80023be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022bc:	4b42      	ldr	r3, [pc, #264]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d061      	beq.n	800238c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d146      	bne.n	800235e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d0:	4b3f      	ldr	r3, [pc, #252]	; (80023d0 <HAL_RCC_OscConfig+0x4fc>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7fe fd77 	bl	8000dc8 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7fe fd73 	bl	8000dc8 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e067      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f0:	4b35      	ldr	r3, [pc, #212]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f0      	bne.n	80022de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002304:	d108      	bne.n	8002318 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002306:	4b30      	ldr	r3, [pc, #192]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	492d      	ldr	r1, [pc, #180]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002318:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a19      	ldr	r1, [r3, #32]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	430b      	orrs	r3, r1
 800232a:	4927      	ldr	r1, [pc, #156]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002330:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <HAL_RCC_OscConfig+0x4fc>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7fe fd47 	bl	8000dc8 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233e:	f7fe fd43 	bl	8000dc8 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e037      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002350:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x46a>
 800235c:	e02f      	b.n	80023be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235e:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <HAL_RCC_OscConfig+0x4fc>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe fd30 	bl	8000dc8 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7fe fd2c 	bl	8000dc8 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e020      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x498>
 800238a:	e018      	b.n	80023be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e013      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_OscConfig+0x4f4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d106      	bne.n	80023ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d001      	beq.n	80023be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40007000 	.word	0x40007000
 80023d0:	42420060 	.word	0x42420060

080023d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0d0      	b.n	800258a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e8:	4b6a      	ldr	r3, [pc, #424]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d910      	bls.n	8002418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b67      	ldr	r3, [pc, #412]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 0207 	bic.w	r2, r3, #7
 80023fe:	4965      	ldr	r1, [pc, #404]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b63      	ldr	r3, [pc, #396]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0b8      	b.n	800258a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d020      	beq.n	8002466 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002430:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a58      	ldr	r2, [pc, #352]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800243a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002452:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b50      	ldr	r3, [pc, #320]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	494d      	ldr	r1, [pc, #308]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d040      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d115      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e07f      	b.n	800258a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d107      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002492:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e073      	b.n	800258a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e06b      	b.n	800258a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b2:	4b39      	ldr	r3, [pc, #228]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f023 0203 	bic.w	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4936      	ldr	r1, [pc, #216]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c4:	f7fe fc80 	bl	8000dc8 <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024cc:	f7fe fc7c 	bl	8000dc8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e053      	b.n	800258a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 020c 	and.w	r2, r3, #12
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d1eb      	bne.n	80024cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f4:	4b27      	ldr	r3, [pc, #156]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d210      	bcs.n	8002524 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b24      	ldr	r3, [pc, #144]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 0207 	bic.w	r2, r3, #7
 800250a:	4922      	ldr	r1, [pc, #136]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e032      	b.n	800258a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4916      	ldr	r1, [pc, #88]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	490e      	ldr	r1, [pc, #56]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002562:	f000 f821 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8002566:	4601      	mov	r1, r0
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	4a0a      	ldr	r2, [pc, #40]	; (800259c <HAL_RCC_ClockConfig+0x1c8>)
 8002574:	5cd3      	ldrb	r3, [r2, r3]
 8002576:	fa21 f303 	lsr.w	r3, r1, r3
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1cc>)
 800257c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fbde 	bl	8000d44 <HAL_InitTick>

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40022000 	.word	0x40022000
 8002598:	40021000 	.word	0x40021000
 800259c:	080044a0 	.word	0x080044a0
 80025a0:	20000000 	.word	0x20000000
 80025a4:	20000004 	.word	0x20000004

080025a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a8:	b490      	push	{r4, r7}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025ae:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025b0:	1d3c      	adds	r4, r7, #4
 80025b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025b8:	4b28      	ldr	r3, [pc, #160]	; (800265c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025d2:	4b23      	ldr	r3, [pc, #140]	; (8002660 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d002      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x40>
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d003      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0x46>
 80025e6:	e02d      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e8:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025ea:	623b      	str	r3, [r7, #32]
      break;
 80025ec:	e02d      	b.n	800264a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	0c9b      	lsrs	r3, r3, #18
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025fa:	4413      	add	r3, r2
 80025fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002600:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d013      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <HAL_RCC_GetSysClockFreq+0xb8>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	0c5b      	lsrs	r3, r3, #17
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800261a:	4413      	add	r3, r2
 800261c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002620:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	4a0f      	ldr	r2, [pc, #60]	; (8002664 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002626:	fb02 f203 	mul.w	r2, r2, r3
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
 8002632:	e004      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	4a0c      	ldr	r2, [pc, #48]	; (8002668 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	623b      	str	r3, [r7, #32]
      break;
 8002642:	e002      	b.n	800264a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002646:	623b      	str	r3, [r7, #32]
      break;
 8002648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800264a:	6a3b      	ldr	r3, [r7, #32]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3728      	adds	r7, #40	; 0x28
 8002650:	46bd      	mov	sp, r7
 8002652:	bc90      	pop	{r4, r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	0800448c 	.word	0x0800448c
 800265c:	0800449c 	.word	0x0800449c
 8002660:	40021000 	.word	0x40021000
 8002664:	007a1200 	.word	0x007a1200
 8002668:	003d0900 	.word	0x003d0900

0800266c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002670:	4b02      	ldr	r3, [pc, #8]	; (800267c <HAL_RCC_GetHCLKFreq+0x10>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	20000000 	.word	0x20000000

08002680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002684:	f7ff fff2 	bl	800266c <HAL_RCC_GetHCLKFreq>
 8002688:	4601      	mov	r1, r0
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	4a03      	ldr	r2, [pc, #12]	; (80026a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	fa21 f303 	lsr.w	r3, r1, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	080044b0 	.word	0x080044b0

080026a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026ac:	f7ff ffde 	bl	800266c <HAL_RCC_GetHCLKFreq>
 80026b0:	4601      	mov	r1, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	0adb      	lsrs	r3, r3, #11
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4a03      	ldr	r2, [pc, #12]	; (80026cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026be:	5cd3      	ldrb	r3, [r2, r3]
 80026c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	080044b0 	.word	0x080044b0

080026d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026d8:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <RCC_Delay+0x34>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <RCC_Delay+0x38>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0a5b      	lsrs	r3, r3, #9
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026ec:	bf00      	nop
  }
  while (Delay --);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1e5a      	subs	r2, r3, #1
 80026f2:	60fa      	str	r2, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f9      	bne.n	80026ec <RCC_Delay+0x1c>
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000000 	.word	0x20000000
 8002708:	10624dd3 	.word	0x10624dd3

0800270c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e03f      	b.n	800279e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fe f96a 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2224      	movs	r2, #36	; 0x24
 800273c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800274e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fb8d 	bl	8002e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b08a      	sub	sp, #40	; 0x28
 80027aa:	af02      	add	r7, sp, #8
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d17c      	bne.n	80028c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_UART_Transmit+0x2c>
 80027cc:	88fb      	ldrh	r3, [r7, #6]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e075      	b.n	80028c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_UART_Transmit+0x3e>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e06e      	b.n	80028c2 <HAL_UART_Transmit+0x11c>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2221      	movs	r2, #33	; 0x21
 80027f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80027fa:	f7fe fae5 	bl	8000dc8 <HAL_GetTick>
 80027fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	88fa      	ldrh	r2, [r7, #6]
 8002804:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	88fa      	ldrh	r2, [r7, #6]
 800280a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002814:	d108      	bne.n	8002828 <HAL_UART_Transmit+0x82>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d104      	bne.n	8002828 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	e003      	b.n	8002830 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800282c:	2300      	movs	r3, #0
 800282e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002838:	e02a      	b.n	8002890 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2200      	movs	r2, #0
 8002842:	2180      	movs	r1, #128	; 0x80
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f9b0 	bl	8002baa <UART_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e036      	b.n	80028c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10b      	bne.n	8002872 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002868:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	3302      	adds	r3, #2
 800286e:	61bb      	str	r3, [r7, #24]
 8002870:	e007      	b.n	8002882 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	3301      	adds	r3, #1
 8002880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1cf      	bne.n	800283a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2200      	movs	r2, #0
 80028a2:	2140      	movs	r1, #64	; 0x40
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f980 	bl	8002baa <UART_WaitOnFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e006      	b.n	80028c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	4613      	mov	r3, r2
 80028d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d140      	bne.n	8002966 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_UART_Receive_IT+0x26>
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e039      	b.n	8002968 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_UART_Receive_IT+0x38>
 80028fe:	2302      	movs	r3, #2
 8002900:	e032      	b.n	8002968 <HAL_UART_Receive_IT+0x9e>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	88fa      	ldrh	r2, [r7, #6]
 8002914:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	88fa      	ldrh	r2, [r7, #6]
 800291a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2222      	movs	r2, #34	; 0x22
 8002926:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002940:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0220 	orr.w	r2, r2, #32
 8002960:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	e000      	b.n	8002968 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002966:	2302      	movs	r3, #2
  }
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
	...

08002974 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10d      	bne.n	80029c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_UART_IRQHandler+0x52>
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f9d5 	bl	8002d6e <UART_Receive_IT>
      return;
 80029c4:	e0d1      	b.n	8002b6a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80b0 	beq.w	8002b2e <HAL_UART_IRQHandler+0x1ba>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d105      	bne.n	80029e4 <HAL_UART_IRQHandler+0x70>
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 80a5 	beq.w	8002b2e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_UART_IRQHandler+0x90>
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_UART_IRQHandler+0xb0>
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1c:	f043 0202 	orr.w	r2, r3, #2
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <HAL_UART_IRQHandler+0xd0>
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3c:	f043 0204 	orr.w	r2, r3, #4
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00f      	beq.n	8002a6e <HAL_UART_IRQHandler+0xfa>
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d104      	bne.n	8002a62 <HAL_UART_IRQHandler+0xee>
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	f043 0208 	orr.w	r2, r3, #8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d078      	beq.n	8002b68 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <HAL_UART_IRQHandler+0x11c>
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f96f 	bl	8002d6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bf14      	ite	ne
 8002a9e:	2301      	movne	r3, #1
 8002aa0:	2300      	moveq	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_UART_IRQHandler+0x144>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d031      	beq.n	8002b1c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f8c0 	bl	8002c3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d023      	beq.n	8002b14 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ada:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae8:	4a21      	ldr	r2, [pc, #132]	; (8002b70 <HAL_UART_IRQHandler+0x1fc>)
 8002aea:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe fa81 	bl	8000ff8 <HAL_DMA_Abort_IT>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d016      	beq.n	8002b2a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b06:	4610      	mov	r0, r2
 8002b08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0a:	e00e      	b.n	8002b2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f843 	bl	8002b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b12:	e00a      	b.n	8002b2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f83f 	bl	8002b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b1a:	e006      	b.n	8002b2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f83b 	bl	8002b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002b28:	e01e      	b.n	8002b68 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2a:	bf00      	nop
    return;
 8002b2c:	e01c      	b.n	8002b68 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_UART_IRQHandler+0x1d6>
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f8ac 	bl	8002ca0 <UART_Transmit_IT>
    return;
 8002b48:	e00f      	b.n	8002b6a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_UART_IRQHandler+0x1f6>
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f8ed 	bl	8002d3e <UART_EndTransmit_IT>
    return;
 8002b64:	bf00      	nop
 8002b66:	e000      	b.n	8002b6a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002b68:	bf00      	nop
  }
}
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	08002c79 	.word	0x08002c79

08002b74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bba:	e02c      	b.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc2:	d028      	beq.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <UART_WaitOnFlagUntilTimeout+0x30>
 8002bca:	f7fe f8fd 	bl	8000dc8 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d21d      	bcs.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002be8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e00f      	b.n	8002c36 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	bf0c      	ite	eq
 8002c26:	2301      	moveq	r3, #1
 8002c28:	2300      	movne	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d0c3      	beq.n	8002bbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c54:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0201 	bic.w	r2, r2, #1
 8002c64:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f7ff ff80 	bl	8002b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b21      	cmp	r3, #33	; 0x21
 8002cb2:	d13e      	bne.n	8002d32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbc:	d114      	bne.n	8002ce8 <UART_Transmit_IT+0x48>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d110      	bne.n	8002ce8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cda:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	1c9a      	adds	r2, r3, #2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	621a      	str	r2, [r3, #32]
 8002ce6:	e008      	b.n	8002cfa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	1c59      	adds	r1, r3, #1
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6211      	str	r1, [r2, #32]
 8002cf2:	781a      	ldrb	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	4619      	mov	r1, r3
 8002d08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10f      	bne.n	8002d2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e000      	b.n	8002d34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d32:	2302      	movs	r3, #2
  }
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff ff08 	bl	8002b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b22      	cmp	r3, #34	; 0x22
 8002d80:	d170      	bne.n	8002e64 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8a:	d117      	bne.n	8002dbc <UART_Receive_IT+0x4e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d113      	bne.n	8002dbc <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	1c9a      	adds	r2, r3, #2
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	629a      	str	r2, [r3, #40]	; 0x28
 8002dba:	e026      	b.n	8002e0a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dce:	d007      	beq.n	8002de0 <UART_Receive_IT+0x72>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <UART_Receive_IT+0x80>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d106      	bne.n	8002dee <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e008      	b.n	8002e00 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	4619      	mov	r1, r3
 8002e18:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d120      	bne.n	8002e60 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0220 	bic.w	r2, r2, #32
 8002e2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0201 	bic.w	r2, r2, #1
 8002e4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff fe95 	bl	8002b86 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e002      	b.n	8002e66 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e000      	b.n	8002e66 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002e64:	2302      	movs	r3, #2
  }
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002eaa:	f023 030c 	bic.w	r3, r3, #12
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2c      	ldr	r2, [pc, #176]	; (8002f84 <UART_SetConfig+0x114>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d103      	bne.n	8002ee0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ed8:	f7ff fbe6 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	e002      	b.n	8002ee6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ee0:	f7ff fbce 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8002ee4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009a      	lsls	r2, r3, #2
 8002ef0:	441a      	add	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efc:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <UART_SetConfig+0x118>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	0119      	lsls	r1, r3, #4
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009a      	lsls	r2, r3, #2
 8002f10:	441a      	add	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <UART_SetConfig+0x118>)
 8002f1e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	2064      	movs	r0, #100	; 0x64
 8002f26:	fb00 f303 	mul.w	r3, r0, r3
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	3332      	adds	r3, #50	; 0x32
 8002f30:	4a15      	ldr	r2, [pc, #84]	; (8002f88 <UART_SetConfig+0x118>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f3c:	4419      	add	r1, r3
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009a      	lsls	r2, r3, #2
 8002f48:	441a      	add	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <UART_SetConfig+0x118>)
 8002f56:	fba3 0302 	umull	r0, r3, r3, r2
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2064      	movs	r0, #100	; 0x64
 8002f5e:	fb00 f303 	mul.w	r3, r0, r3
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	3332      	adds	r3, #50	; 0x32
 8002f68:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <UART_SetConfig+0x118>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	f003 020f 	and.w	r2, r3, #15
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	440a      	add	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40013800 	.word	0x40013800
 8002f88:	51eb851f 	.word	0x51eb851f

08002f8c <atoi>:
 8002f8c:	220a      	movs	r2, #10
 8002f8e:	2100      	movs	r1, #0
 8002f90:	f000 b9a6 	b.w	80032e0 <strtol>

08002f94 <__errno>:
 8002f94:	4b01      	ldr	r3, [pc, #4]	; (8002f9c <__errno+0x8>)
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	2000000c 	.word	0x2000000c

08002fa0 <__libc_init_array>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	2500      	movs	r5, #0
 8002fa4:	4e0c      	ldr	r6, [pc, #48]	; (8002fd8 <__libc_init_array+0x38>)
 8002fa6:	4c0d      	ldr	r4, [pc, #52]	; (8002fdc <__libc_init_array+0x3c>)
 8002fa8:	1ba4      	subs	r4, r4, r6
 8002faa:	10a4      	asrs	r4, r4, #2
 8002fac:	42a5      	cmp	r5, r4
 8002fae:	d109      	bne.n	8002fc4 <__libc_init_array+0x24>
 8002fb0:	f001 f8e2 	bl	8004178 <_init>
 8002fb4:	2500      	movs	r5, #0
 8002fb6:	4e0a      	ldr	r6, [pc, #40]	; (8002fe0 <__libc_init_array+0x40>)
 8002fb8:	4c0a      	ldr	r4, [pc, #40]	; (8002fe4 <__libc_init_array+0x44>)
 8002fba:	1ba4      	subs	r4, r4, r6
 8002fbc:	10a4      	asrs	r4, r4, #2
 8002fbe:	42a5      	cmp	r5, r4
 8002fc0:	d105      	bne.n	8002fce <__libc_init_array+0x2e>
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fc8:	4798      	blx	r3
 8002fca:	3501      	adds	r5, #1
 8002fcc:	e7ee      	b.n	8002fac <__libc_init_array+0xc>
 8002fce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fd2:	4798      	blx	r3
 8002fd4:	3501      	adds	r5, #1
 8002fd6:	e7f2      	b.n	8002fbe <__libc_init_array+0x1e>
 8002fd8:	0800465c 	.word	0x0800465c
 8002fdc:	0800465c 	.word	0x0800465c
 8002fe0:	0800465c 	.word	0x0800465c
 8002fe4:	08004660 	.word	0x08004660

08002fe8 <memcpy>:
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	1e43      	subs	r3, r0, #1
 8002fec:	440a      	add	r2, r1
 8002fee:	4291      	cmp	r1, r2
 8002ff0:	d100      	bne.n	8002ff4 <memcpy+0xc>
 8002ff2:	bd10      	pop	{r4, pc}
 8002ff4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ff8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ffc:	e7f7      	b.n	8002fee <memcpy+0x6>

08002ffe <memset>:
 8002ffe:	4603      	mov	r3, r0
 8003000:	4402      	add	r2, r0
 8003002:	4293      	cmp	r3, r2
 8003004:	d100      	bne.n	8003008 <memset+0xa>
 8003006:	4770      	bx	lr
 8003008:	f803 1b01 	strb.w	r1, [r3], #1
 800300c:	e7f9      	b.n	8003002 <memset+0x4>
	...

08003010 <iprintf>:
 8003010:	b40f      	push	{r0, r1, r2, r3}
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <iprintf+0x2c>)
 8003014:	b513      	push	{r0, r1, r4, lr}
 8003016:	681c      	ldr	r4, [r3, #0]
 8003018:	b124      	cbz	r4, 8003024 <iprintf+0x14>
 800301a:	69a3      	ldr	r3, [r4, #24]
 800301c:	b913      	cbnz	r3, 8003024 <iprintf+0x14>
 800301e:	4620      	mov	r0, r4
 8003020:	f000 fb24 	bl	800366c <__sinit>
 8003024:	ab05      	add	r3, sp, #20
 8003026:	9a04      	ldr	r2, [sp, #16]
 8003028:	68a1      	ldr	r1, [r4, #8]
 800302a:	4620      	mov	r0, r4
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	f000 fcf7 	bl	8003a20 <_vfiprintf_r>
 8003032:	b002      	add	sp, #8
 8003034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003038:	b004      	add	sp, #16
 800303a:	4770      	bx	lr
 800303c:	2000000c 	.word	0x2000000c

08003040 <putchar>:
 8003040:	b538      	push	{r3, r4, r5, lr}
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <putchar+0x24>)
 8003044:	4605      	mov	r5, r0
 8003046:	681c      	ldr	r4, [r3, #0]
 8003048:	b124      	cbz	r4, 8003054 <putchar+0x14>
 800304a:	69a3      	ldr	r3, [r4, #24]
 800304c:	b913      	cbnz	r3, 8003054 <putchar+0x14>
 800304e:	4620      	mov	r0, r4
 8003050:	f000 fb0c 	bl	800366c <__sinit>
 8003054:	68a2      	ldr	r2, [r4, #8]
 8003056:	4629      	mov	r1, r5
 8003058:	4620      	mov	r0, r4
 800305a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800305e:	f000 bf7d 	b.w	8003f5c <_putc_r>
 8003062:	bf00      	nop
 8003064:	2000000c 	.word	0x2000000c

08003068 <_puts_r>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	460e      	mov	r6, r1
 800306c:	4605      	mov	r5, r0
 800306e:	b118      	cbz	r0, 8003078 <_puts_r+0x10>
 8003070:	6983      	ldr	r3, [r0, #24]
 8003072:	b90b      	cbnz	r3, 8003078 <_puts_r+0x10>
 8003074:	f000 fafa 	bl	800366c <__sinit>
 8003078:	69ab      	ldr	r3, [r5, #24]
 800307a:	68ac      	ldr	r4, [r5, #8]
 800307c:	b913      	cbnz	r3, 8003084 <_puts_r+0x1c>
 800307e:	4628      	mov	r0, r5
 8003080:	f000 faf4 	bl	800366c <__sinit>
 8003084:	4b23      	ldr	r3, [pc, #140]	; (8003114 <_puts_r+0xac>)
 8003086:	429c      	cmp	r4, r3
 8003088:	d117      	bne.n	80030ba <_puts_r+0x52>
 800308a:	686c      	ldr	r4, [r5, #4]
 800308c:	89a3      	ldrh	r3, [r4, #12]
 800308e:	071b      	lsls	r3, r3, #28
 8003090:	d51d      	bpl.n	80030ce <_puts_r+0x66>
 8003092:	6923      	ldr	r3, [r4, #16]
 8003094:	b1db      	cbz	r3, 80030ce <_puts_r+0x66>
 8003096:	3e01      	subs	r6, #1
 8003098:	68a3      	ldr	r3, [r4, #8]
 800309a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800309e:	3b01      	subs	r3, #1
 80030a0:	60a3      	str	r3, [r4, #8]
 80030a2:	b9e9      	cbnz	r1, 80030e0 <_puts_r+0x78>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	da2e      	bge.n	8003106 <_puts_r+0x9e>
 80030a8:	4622      	mov	r2, r4
 80030aa:	210a      	movs	r1, #10
 80030ac:	4628      	mov	r0, r5
 80030ae:	f000 f92d 	bl	800330c <__swbuf_r>
 80030b2:	3001      	adds	r0, #1
 80030b4:	d011      	beq.n	80030da <_puts_r+0x72>
 80030b6:	200a      	movs	r0, #10
 80030b8:	e011      	b.n	80030de <_puts_r+0x76>
 80030ba:	4b17      	ldr	r3, [pc, #92]	; (8003118 <_puts_r+0xb0>)
 80030bc:	429c      	cmp	r4, r3
 80030be:	d101      	bne.n	80030c4 <_puts_r+0x5c>
 80030c0:	68ac      	ldr	r4, [r5, #8]
 80030c2:	e7e3      	b.n	800308c <_puts_r+0x24>
 80030c4:	4b15      	ldr	r3, [pc, #84]	; (800311c <_puts_r+0xb4>)
 80030c6:	429c      	cmp	r4, r3
 80030c8:	bf08      	it	eq
 80030ca:	68ec      	ldreq	r4, [r5, #12]
 80030cc:	e7de      	b.n	800308c <_puts_r+0x24>
 80030ce:	4621      	mov	r1, r4
 80030d0:	4628      	mov	r0, r5
 80030d2:	f000 f96d 	bl	80033b0 <__swsetup_r>
 80030d6:	2800      	cmp	r0, #0
 80030d8:	d0dd      	beq.n	8003096 <_puts_r+0x2e>
 80030da:	f04f 30ff 	mov.w	r0, #4294967295
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	da04      	bge.n	80030ee <_puts_r+0x86>
 80030e4:	69a2      	ldr	r2, [r4, #24]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	dc06      	bgt.n	80030f8 <_puts_r+0x90>
 80030ea:	290a      	cmp	r1, #10
 80030ec:	d004      	beq.n	80030f8 <_puts_r+0x90>
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	6022      	str	r2, [r4, #0]
 80030f4:	7019      	strb	r1, [r3, #0]
 80030f6:	e7cf      	b.n	8003098 <_puts_r+0x30>
 80030f8:	4622      	mov	r2, r4
 80030fa:	4628      	mov	r0, r5
 80030fc:	f000 f906 	bl	800330c <__swbuf_r>
 8003100:	3001      	adds	r0, #1
 8003102:	d1c9      	bne.n	8003098 <_puts_r+0x30>
 8003104:	e7e9      	b.n	80030da <_puts_r+0x72>
 8003106:	200a      	movs	r0, #10
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	6022      	str	r2, [r4, #0]
 800310e:	7018      	strb	r0, [r3, #0]
 8003110:	e7e5      	b.n	80030de <_puts_r+0x76>
 8003112:	bf00      	nop
 8003114:	080044dc 	.word	0x080044dc
 8003118:	080044fc 	.word	0x080044fc
 800311c:	080044bc 	.word	0x080044bc

08003120 <puts>:
 8003120:	4b02      	ldr	r3, [pc, #8]	; (800312c <puts+0xc>)
 8003122:	4601      	mov	r1, r0
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	f7ff bf9f 	b.w	8003068 <_puts_r>
 800312a:	bf00      	nop
 800312c:	2000000c 	.word	0x2000000c

08003130 <strcpy>:
 8003130:	4603      	mov	r3, r0
 8003132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003136:	f803 2b01 	strb.w	r2, [r3], #1
 800313a:	2a00      	cmp	r2, #0
 800313c:	d1f9      	bne.n	8003132 <strcpy+0x2>
 800313e:	4770      	bx	lr

08003140 <strtok>:
 8003140:	4b13      	ldr	r3, [pc, #76]	; (8003190 <strtok+0x50>)
 8003142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003146:	681d      	ldr	r5, [r3, #0]
 8003148:	4606      	mov	r6, r0
 800314a:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800314c:	460f      	mov	r7, r1
 800314e:	b9b4      	cbnz	r4, 800317e <strtok+0x3e>
 8003150:	2050      	movs	r0, #80	; 0x50
 8003152:	f000 fb7d 	bl	8003850 <malloc>
 8003156:	65a8      	str	r0, [r5, #88]	; 0x58
 8003158:	e9c0 4400 	strd	r4, r4, [r0]
 800315c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003160:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003164:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003168:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800316c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003170:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003174:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003178:	6184      	str	r4, [r0, #24]
 800317a:	7704      	strb	r4, [r0, #28]
 800317c:	6244      	str	r4, [r0, #36]	; 0x24
 800317e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003180:	4639      	mov	r1, r7
 8003182:	4630      	mov	r0, r6
 8003184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003188:	2301      	movs	r3, #1
 800318a:	f000 b803 	b.w	8003194 <__strtok_r>
 800318e:	bf00      	nop
 8003190:	2000000c 	.word	0x2000000c

08003194 <__strtok_r>:
 8003194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003196:	b918      	cbnz	r0, 80031a0 <__strtok_r+0xc>
 8003198:	6810      	ldr	r0, [r2, #0]
 800319a:	b908      	cbnz	r0, 80031a0 <__strtok_r+0xc>
 800319c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800319e:	4620      	mov	r0, r4
 80031a0:	4604      	mov	r4, r0
 80031a2:	460f      	mov	r7, r1
 80031a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80031a8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80031ac:	b91e      	cbnz	r6, 80031b6 <__strtok_r+0x22>
 80031ae:	b96d      	cbnz	r5, 80031cc <__strtok_r+0x38>
 80031b0:	6015      	str	r5, [r2, #0]
 80031b2:	4628      	mov	r0, r5
 80031b4:	e7f2      	b.n	800319c <__strtok_r+0x8>
 80031b6:	42b5      	cmp	r5, r6
 80031b8:	d1f6      	bne.n	80031a8 <__strtok_r+0x14>
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1ef      	bne.n	800319e <__strtok_r+0xa>
 80031be:	6014      	str	r4, [r2, #0]
 80031c0:	7003      	strb	r3, [r0, #0]
 80031c2:	e7eb      	b.n	800319c <__strtok_r+0x8>
 80031c4:	462b      	mov	r3, r5
 80031c6:	e00d      	b.n	80031e4 <__strtok_r+0x50>
 80031c8:	b926      	cbnz	r6, 80031d4 <__strtok_r+0x40>
 80031ca:	461c      	mov	r4, r3
 80031cc:	4623      	mov	r3, r4
 80031ce:	460f      	mov	r7, r1
 80031d0:	f813 5b01 	ldrb.w	r5, [r3], #1
 80031d4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80031d8:	42b5      	cmp	r5, r6
 80031da:	d1f5      	bne.n	80031c8 <__strtok_r+0x34>
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d0f1      	beq.n	80031c4 <__strtok_r+0x30>
 80031e0:	2100      	movs	r1, #0
 80031e2:	7021      	strb	r1, [r4, #0]
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e7d9      	b.n	800319c <__strtok_r+0x8>

080031e8 <_strtol_l.isra.0>:
 80031e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031ec:	4680      	mov	r8, r0
 80031ee:	4689      	mov	r9, r1
 80031f0:	4692      	mov	sl, r2
 80031f2:	461e      	mov	r6, r3
 80031f4:	460f      	mov	r7, r1
 80031f6:	463d      	mov	r5, r7
 80031f8:	9808      	ldr	r0, [sp, #32]
 80031fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80031fe:	f000 fabf 	bl	8003780 <__locale_ctype_ptr_l>
 8003202:	4420      	add	r0, r4
 8003204:	7843      	ldrb	r3, [r0, #1]
 8003206:	f013 0308 	ands.w	r3, r3, #8
 800320a:	d132      	bne.n	8003272 <_strtol_l.isra.0+0x8a>
 800320c:	2c2d      	cmp	r4, #45	; 0x2d
 800320e:	d132      	bne.n	8003276 <_strtol_l.isra.0+0x8e>
 8003210:	2201      	movs	r2, #1
 8003212:	787c      	ldrb	r4, [r7, #1]
 8003214:	1cbd      	adds	r5, r7, #2
 8003216:	2e00      	cmp	r6, #0
 8003218:	d05d      	beq.n	80032d6 <_strtol_l.isra.0+0xee>
 800321a:	2e10      	cmp	r6, #16
 800321c:	d109      	bne.n	8003232 <_strtol_l.isra.0+0x4a>
 800321e:	2c30      	cmp	r4, #48	; 0x30
 8003220:	d107      	bne.n	8003232 <_strtol_l.isra.0+0x4a>
 8003222:	782b      	ldrb	r3, [r5, #0]
 8003224:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003228:	2b58      	cmp	r3, #88	; 0x58
 800322a:	d14f      	bne.n	80032cc <_strtol_l.isra.0+0xe4>
 800322c:	2610      	movs	r6, #16
 800322e:	786c      	ldrb	r4, [r5, #1]
 8003230:	3502      	adds	r5, #2
 8003232:	2a00      	cmp	r2, #0
 8003234:	bf14      	ite	ne
 8003236:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800323a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800323e:	2700      	movs	r7, #0
 8003240:	fbb1 fcf6 	udiv	ip, r1, r6
 8003244:	4638      	mov	r0, r7
 8003246:	fb06 1e1c 	mls	lr, r6, ip, r1
 800324a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800324e:	2b09      	cmp	r3, #9
 8003250:	d817      	bhi.n	8003282 <_strtol_l.isra.0+0x9a>
 8003252:	461c      	mov	r4, r3
 8003254:	42a6      	cmp	r6, r4
 8003256:	dd23      	ble.n	80032a0 <_strtol_l.isra.0+0xb8>
 8003258:	1c7b      	adds	r3, r7, #1
 800325a:	d007      	beq.n	800326c <_strtol_l.isra.0+0x84>
 800325c:	4584      	cmp	ip, r0
 800325e:	d31c      	bcc.n	800329a <_strtol_l.isra.0+0xb2>
 8003260:	d101      	bne.n	8003266 <_strtol_l.isra.0+0x7e>
 8003262:	45a6      	cmp	lr, r4
 8003264:	db19      	blt.n	800329a <_strtol_l.isra.0+0xb2>
 8003266:	2701      	movs	r7, #1
 8003268:	fb00 4006 	mla	r0, r0, r6, r4
 800326c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003270:	e7eb      	b.n	800324a <_strtol_l.isra.0+0x62>
 8003272:	462f      	mov	r7, r5
 8003274:	e7bf      	b.n	80031f6 <_strtol_l.isra.0+0xe>
 8003276:	2c2b      	cmp	r4, #43	; 0x2b
 8003278:	bf04      	itt	eq
 800327a:	1cbd      	addeq	r5, r7, #2
 800327c:	787c      	ldrbeq	r4, [r7, #1]
 800327e:	461a      	mov	r2, r3
 8003280:	e7c9      	b.n	8003216 <_strtol_l.isra.0+0x2e>
 8003282:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003286:	2b19      	cmp	r3, #25
 8003288:	d801      	bhi.n	800328e <_strtol_l.isra.0+0xa6>
 800328a:	3c37      	subs	r4, #55	; 0x37
 800328c:	e7e2      	b.n	8003254 <_strtol_l.isra.0+0x6c>
 800328e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003292:	2b19      	cmp	r3, #25
 8003294:	d804      	bhi.n	80032a0 <_strtol_l.isra.0+0xb8>
 8003296:	3c57      	subs	r4, #87	; 0x57
 8003298:	e7dc      	b.n	8003254 <_strtol_l.isra.0+0x6c>
 800329a:	f04f 37ff 	mov.w	r7, #4294967295
 800329e:	e7e5      	b.n	800326c <_strtol_l.isra.0+0x84>
 80032a0:	1c7b      	adds	r3, r7, #1
 80032a2:	d108      	bne.n	80032b6 <_strtol_l.isra.0+0xce>
 80032a4:	2322      	movs	r3, #34	; 0x22
 80032a6:	4608      	mov	r0, r1
 80032a8:	f8c8 3000 	str.w	r3, [r8]
 80032ac:	f1ba 0f00 	cmp.w	sl, #0
 80032b0:	d107      	bne.n	80032c2 <_strtol_l.isra.0+0xda>
 80032b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b6:	b102      	cbz	r2, 80032ba <_strtol_l.isra.0+0xd2>
 80032b8:	4240      	negs	r0, r0
 80032ba:	f1ba 0f00 	cmp.w	sl, #0
 80032be:	d0f8      	beq.n	80032b2 <_strtol_l.isra.0+0xca>
 80032c0:	b10f      	cbz	r7, 80032c6 <_strtol_l.isra.0+0xde>
 80032c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80032c6:	f8ca 9000 	str.w	r9, [sl]
 80032ca:	e7f2      	b.n	80032b2 <_strtol_l.isra.0+0xca>
 80032cc:	2430      	movs	r4, #48	; 0x30
 80032ce:	2e00      	cmp	r6, #0
 80032d0:	d1af      	bne.n	8003232 <_strtol_l.isra.0+0x4a>
 80032d2:	2608      	movs	r6, #8
 80032d4:	e7ad      	b.n	8003232 <_strtol_l.isra.0+0x4a>
 80032d6:	2c30      	cmp	r4, #48	; 0x30
 80032d8:	d0a3      	beq.n	8003222 <_strtol_l.isra.0+0x3a>
 80032da:	260a      	movs	r6, #10
 80032dc:	e7a9      	b.n	8003232 <_strtol_l.isra.0+0x4a>
	...

080032e0 <strtol>:
 80032e0:	4b08      	ldr	r3, [pc, #32]	; (8003304 <strtol+0x24>)
 80032e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032e4:	681c      	ldr	r4, [r3, #0]
 80032e6:	4d08      	ldr	r5, [pc, #32]	; (8003308 <strtol+0x28>)
 80032e8:	6a23      	ldr	r3, [r4, #32]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bf08      	it	eq
 80032ee:	462b      	moveq	r3, r5
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	4613      	mov	r3, r2
 80032f4:	460a      	mov	r2, r1
 80032f6:	4601      	mov	r1, r0
 80032f8:	4620      	mov	r0, r4
 80032fa:	f7ff ff75 	bl	80031e8 <_strtol_l.isra.0>
 80032fe:	b003      	add	sp, #12
 8003300:	bd30      	pop	{r4, r5, pc}
 8003302:	bf00      	nop
 8003304:	2000000c 	.word	0x2000000c
 8003308:	20000070 	.word	0x20000070

0800330c <__swbuf_r>:
 800330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330e:	460e      	mov	r6, r1
 8003310:	4614      	mov	r4, r2
 8003312:	4605      	mov	r5, r0
 8003314:	b118      	cbz	r0, 800331e <__swbuf_r+0x12>
 8003316:	6983      	ldr	r3, [r0, #24]
 8003318:	b90b      	cbnz	r3, 800331e <__swbuf_r+0x12>
 800331a:	f000 f9a7 	bl	800366c <__sinit>
 800331e:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <__swbuf_r+0x98>)
 8003320:	429c      	cmp	r4, r3
 8003322:	d12a      	bne.n	800337a <__swbuf_r+0x6e>
 8003324:	686c      	ldr	r4, [r5, #4]
 8003326:	69a3      	ldr	r3, [r4, #24]
 8003328:	60a3      	str	r3, [r4, #8]
 800332a:	89a3      	ldrh	r3, [r4, #12]
 800332c:	071a      	lsls	r2, r3, #28
 800332e:	d52e      	bpl.n	800338e <__swbuf_r+0x82>
 8003330:	6923      	ldr	r3, [r4, #16]
 8003332:	b363      	cbz	r3, 800338e <__swbuf_r+0x82>
 8003334:	6923      	ldr	r3, [r4, #16]
 8003336:	6820      	ldr	r0, [r4, #0]
 8003338:	b2f6      	uxtb	r6, r6
 800333a:	1ac0      	subs	r0, r0, r3
 800333c:	6963      	ldr	r3, [r4, #20]
 800333e:	4637      	mov	r7, r6
 8003340:	4283      	cmp	r3, r0
 8003342:	dc04      	bgt.n	800334e <__swbuf_r+0x42>
 8003344:	4621      	mov	r1, r4
 8003346:	4628      	mov	r0, r5
 8003348:	f000 f926 	bl	8003598 <_fflush_r>
 800334c:	bb28      	cbnz	r0, 800339a <__swbuf_r+0x8e>
 800334e:	68a3      	ldr	r3, [r4, #8]
 8003350:	3001      	adds	r0, #1
 8003352:	3b01      	subs	r3, #1
 8003354:	60a3      	str	r3, [r4, #8]
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	6022      	str	r2, [r4, #0]
 800335c:	701e      	strb	r6, [r3, #0]
 800335e:	6963      	ldr	r3, [r4, #20]
 8003360:	4283      	cmp	r3, r0
 8003362:	d004      	beq.n	800336e <__swbuf_r+0x62>
 8003364:	89a3      	ldrh	r3, [r4, #12]
 8003366:	07db      	lsls	r3, r3, #31
 8003368:	d519      	bpl.n	800339e <__swbuf_r+0x92>
 800336a:	2e0a      	cmp	r6, #10
 800336c:	d117      	bne.n	800339e <__swbuf_r+0x92>
 800336e:	4621      	mov	r1, r4
 8003370:	4628      	mov	r0, r5
 8003372:	f000 f911 	bl	8003598 <_fflush_r>
 8003376:	b190      	cbz	r0, 800339e <__swbuf_r+0x92>
 8003378:	e00f      	b.n	800339a <__swbuf_r+0x8e>
 800337a:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <__swbuf_r+0x9c>)
 800337c:	429c      	cmp	r4, r3
 800337e:	d101      	bne.n	8003384 <__swbuf_r+0x78>
 8003380:	68ac      	ldr	r4, [r5, #8]
 8003382:	e7d0      	b.n	8003326 <__swbuf_r+0x1a>
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <__swbuf_r+0xa0>)
 8003386:	429c      	cmp	r4, r3
 8003388:	bf08      	it	eq
 800338a:	68ec      	ldreq	r4, [r5, #12]
 800338c:	e7cb      	b.n	8003326 <__swbuf_r+0x1a>
 800338e:	4621      	mov	r1, r4
 8003390:	4628      	mov	r0, r5
 8003392:	f000 f80d 	bl	80033b0 <__swsetup_r>
 8003396:	2800      	cmp	r0, #0
 8003398:	d0cc      	beq.n	8003334 <__swbuf_r+0x28>
 800339a:	f04f 37ff 	mov.w	r7, #4294967295
 800339e:	4638      	mov	r0, r7
 80033a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033a2:	bf00      	nop
 80033a4:	080044dc 	.word	0x080044dc
 80033a8:	080044fc 	.word	0x080044fc
 80033ac:	080044bc 	.word	0x080044bc

080033b0 <__swsetup_r>:
 80033b0:	4b32      	ldr	r3, [pc, #200]	; (800347c <__swsetup_r+0xcc>)
 80033b2:	b570      	push	{r4, r5, r6, lr}
 80033b4:	681d      	ldr	r5, [r3, #0]
 80033b6:	4606      	mov	r6, r0
 80033b8:	460c      	mov	r4, r1
 80033ba:	b125      	cbz	r5, 80033c6 <__swsetup_r+0x16>
 80033bc:	69ab      	ldr	r3, [r5, #24]
 80033be:	b913      	cbnz	r3, 80033c6 <__swsetup_r+0x16>
 80033c0:	4628      	mov	r0, r5
 80033c2:	f000 f953 	bl	800366c <__sinit>
 80033c6:	4b2e      	ldr	r3, [pc, #184]	; (8003480 <__swsetup_r+0xd0>)
 80033c8:	429c      	cmp	r4, r3
 80033ca:	d10f      	bne.n	80033ec <__swsetup_r+0x3c>
 80033cc:	686c      	ldr	r4, [r5, #4]
 80033ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	0715      	lsls	r5, r2, #28
 80033d6:	d42c      	bmi.n	8003432 <__swsetup_r+0x82>
 80033d8:	06d0      	lsls	r0, r2, #27
 80033da:	d411      	bmi.n	8003400 <__swsetup_r+0x50>
 80033dc:	2209      	movs	r2, #9
 80033de:	6032      	str	r2, [r6, #0]
 80033e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033e4:	81a3      	strh	r3, [r4, #12]
 80033e6:	f04f 30ff 	mov.w	r0, #4294967295
 80033ea:	e03e      	b.n	800346a <__swsetup_r+0xba>
 80033ec:	4b25      	ldr	r3, [pc, #148]	; (8003484 <__swsetup_r+0xd4>)
 80033ee:	429c      	cmp	r4, r3
 80033f0:	d101      	bne.n	80033f6 <__swsetup_r+0x46>
 80033f2:	68ac      	ldr	r4, [r5, #8]
 80033f4:	e7eb      	b.n	80033ce <__swsetup_r+0x1e>
 80033f6:	4b24      	ldr	r3, [pc, #144]	; (8003488 <__swsetup_r+0xd8>)
 80033f8:	429c      	cmp	r4, r3
 80033fa:	bf08      	it	eq
 80033fc:	68ec      	ldreq	r4, [r5, #12]
 80033fe:	e7e6      	b.n	80033ce <__swsetup_r+0x1e>
 8003400:	0751      	lsls	r1, r2, #29
 8003402:	d512      	bpl.n	800342a <__swsetup_r+0x7a>
 8003404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003406:	b141      	cbz	r1, 800341a <__swsetup_r+0x6a>
 8003408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800340c:	4299      	cmp	r1, r3
 800340e:	d002      	beq.n	8003416 <__swsetup_r+0x66>
 8003410:	4630      	mov	r0, r6
 8003412:	f000 fa37 	bl	8003884 <_free_r>
 8003416:	2300      	movs	r3, #0
 8003418:	6363      	str	r3, [r4, #52]	; 0x34
 800341a:	89a3      	ldrh	r3, [r4, #12]
 800341c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003420:	81a3      	strh	r3, [r4, #12]
 8003422:	2300      	movs	r3, #0
 8003424:	6063      	str	r3, [r4, #4]
 8003426:	6923      	ldr	r3, [r4, #16]
 8003428:	6023      	str	r3, [r4, #0]
 800342a:	89a3      	ldrh	r3, [r4, #12]
 800342c:	f043 0308 	orr.w	r3, r3, #8
 8003430:	81a3      	strh	r3, [r4, #12]
 8003432:	6923      	ldr	r3, [r4, #16]
 8003434:	b94b      	cbnz	r3, 800344a <__swsetup_r+0x9a>
 8003436:	89a3      	ldrh	r3, [r4, #12]
 8003438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800343c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003440:	d003      	beq.n	800344a <__swsetup_r+0x9a>
 8003442:	4621      	mov	r1, r4
 8003444:	4630      	mov	r0, r6
 8003446:	f000 f9c3 	bl	80037d0 <__smakebuf_r>
 800344a:	89a2      	ldrh	r2, [r4, #12]
 800344c:	f012 0301 	ands.w	r3, r2, #1
 8003450:	d00c      	beq.n	800346c <__swsetup_r+0xbc>
 8003452:	2300      	movs	r3, #0
 8003454:	60a3      	str	r3, [r4, #8]
 8003456:	6963      	ldr	r3, [r4, #20]
 8003458:	425b      	negs	r3, r3
 800345a:	61a3      	str	r3, [r4, #24]
 800345c:	6923      	ldr	r3, [r4, #16]
 800345e:	b953      	cbnz	r3, 8003476 <__swsetup_r+0xc6>
 8003460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003464:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003468:	d1ba      	bne.n	80033e0 <__swsetup_r+0x30>
 800346a:	bd70      	pop	{r4, r5, r6, pc}
 800346c:	0792      	lsls	r2, r2, #30
 800346e:	bf58      	it	pl
 8003470:	6963      	ldrpl	r3, [r4, #20]
 8003472:	60a3      	str	r3, [r4, #8]
 8003474:	e7f2      	b.n	800345c <__swsetup_r+0xac>
 8003476:	2000      	movs	r0, #0
 8003478:	e7f7      	b.n	800346a <__swsetup_r+0xba>
 800347a:	bf00      	nop
 800347c:	2000000c 	.word	0x2000000c
 8003480:	080044dc 	.word	0x080044dc
 8003484:	080044fc 	.word	0x080044fc
 8003488:	080044bc 	.word	0x080044bc

0800348c <__sflush_r>:
 800348c:	898a      	ldrh	r2, [r1, #12]
 800348e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003492:	4605      	mov	r5, r0
 8003494:	0710      	lsls	r0, r2, #28
 8003496:	460c      	mov	r4, r1
 8003498:	d458      	bmi.n	800354c <__sflush_r+0xc0>
 800349a:	684b      	ldr	r3, [r1, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	dc05      	bgt.n	80034ac <__sflush_r+0x20>
 80034a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	dc02      	bgt.n	80034ac <__sflush_r+0x20>
 80034a6:	2000      	movs	r0, #0
 80034a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034ae:	2e00      	cmp	r6, #0
 80034b0:	d0f9      	beq.n	80034a6 <__sflush_r+0x1a>
 80034b2:	2300      	movs	r3, #0
 80034b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034b8:	682f      	ldr	r7, [r5, #0]
 80034ba:	6a21      	ldr	r1, [r4, #32]
 80034bc:	602b      	str	r3, [r5, #0]
 80034be:	d032      	beq.n	8003526 <__sflush_r+0x9a>
 80034c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034c2:	89a3      	ldrh	r3, [r4, #12]
 80034c4:	075a      	lsls	r2, r3, #29
 80034c6:	d505      	bpl.n	80034d4 <__sflush_r+0x48>
 80034c8:	6863      	ldr	r3, [r4, #4]
 80034ca:	1ac0      	subs	r0, r0, r3
 80034cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034ce:	b10b      	cbz	r3, 80034d4 <__sflush_r+0x48>
 80034d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034d2:	1ac0      	subs	r0, r0, r3
 80034d4:	2300      	movs	r3, #0
 80034d6:	4602      	mov	r2, r0
 80034d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034da:	6a21      	ldr	r1, [r4, #32]
 80034dc:	4628      	mov	r0, r5
 80034de:	47b0      	blx	r6
 80034e0:	1c43      	adds	r3, r0, #1
 80034e2:	89a3      	ldrh	r3, [r4, #12]
 80034e4:	d106      	bne.n	80034f4 <__sflush_r+0x68>
 80034e6:	6829      	ldr	r1, [r5, #0]
 80034e8:	291d      	cmp	r1, #29
 80034ea:	d848      	bhi.n	800357e <__sflush_r+0xf2>
 80034ec:	4a29      	ldr	r2, [pc, #164]	; (8003594 <__sflush_r+0x108>)
 80034ee:	40ca      	lsrs	r2, r1
 80034f0:	07d6      	lsls	r6, r2, #31
 80034f2:	d544      	bpl.n	800357e <__sflush_r+0xf2>
 80034f4:	2200      	movs	r2, #0
 80034f6:	6062      	str	r2, [r4, #4]
 80034f8:	6922      	ldr	r2, [r4, #16]
 80034fa:	04d9      	lsls	r1, r3, #19
 80034fc:	6022      	str	r2, [r4, #0]
 80034fe:	d504      	bpl.n	800350a <__sflush_r+0x7e>
 8003500:	1c42      	adds	r2, r0, #1
 8003502:	d101      	bne.n	8003508 <__sflush_r+0x7c>
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	b903      	cbnz	r3, 800350a <__sflush_r+0x7e>
 8003508:	6560      	str	r0, [r4, #84]	; 0x54
 800350a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800350c:	602f      	str	r7, [r5, #0]
 800350e:	2900      	cmp	r1, #0
 8003510:	d0c9      	beq.n	80034a6 <__sflush_r+0x1a>
 8003512:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003516:	4299      	cmp	r1, r3
 8003518:	d002      	beq.n	8003520 <__sflush_r+0x94>
 800351a:	4628      	mov	r0, r5
 800351c:	f000 f9b2 	bl	8003884 <_free_r>
 8003520:	2000      	movs	r0, #0
 8003522:	6360      	str	r0, [r4, #52]	; 0x34
 8003524:	e7c0      	b.n	80034a8 <__sflush_r+0x1c>
 8003526:	2301      	movs	r3, #1
 8003528:	4628      	mov	r0, r5
 800352a:	47b0      	blx	r6
 800352c:	1c41      	adds	r1, r0, #1
 800352e:	d1c8      	bne.n	80034c2 <__sflush_r+0x36>
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0c5      	beq.n	80034c2 <__sflush_r+0x36>
 8003536:	2b1d      	cmp	r3, #29
 8003538:	d001      	beq.n	800353e <__sflush_r+0xb2>
 800353a:	2b16      	cmp	r3, #22
 800353c:	d101      	bne.n	8003542 <__sflush_r+0xb6>
 800353e:	602f      	str	r7, [r5, #0]
 8003540:	e7b1      	b.n	80034a6 <__sflush_r+0x1a>
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003548:	81a3      	strh	r3, [r4, #12]
 800354a:	e7ad      	b.n	80034a8 <__sflush_r+0x1c>
 800354c:	690f      	ldr	r7, [r1, #16]
 800354e:	2f00      	cmp	r7, #0
 8003550:	d0a9      	beq.n	80034a6 <__sflush_r+0x1a>
 8003552:	0793      	lsls	r3, r2, #30
 8003554:	bf18      	it	ne
 8003556:	2300      	movne	r3, #0
 8003558:	680e      	ldr	r6, [r1, #0]
 800355a:	bf08      	it	eq
 800355c:	694b      	ldreq	r3, [r1, #20]
 800355e:	eba6 0807 	sub.w	r8, r6, r7
 8003562:	600f      	str	r7, [r1, #0]
 8003564:	608b      	str	r3, [r1, #8]
 8003566:	f1b8 0f00 	cmp.w	r8, #0
 800356a:	dd9c      	ble.n	80034a6 <__sflush_r+0x1a>
 800356c:	4643      	mov	r3, r8
 800356e:	463a      	mov	r2, r7
 8003570:	6a21      	ldr	r1, [r4, #32]
 8003572:	4628      	mov	r0, r5
 8003574:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003576:	47b0      	blx	r6
 8003578:	2800      	cmp	r0, #0
 800357a:	dc06      	bgt.n	800358a <__sflush_r+0xfe>
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003582:	81a3      	strh	r3, [r4, #12]
 8003584:	f04f 30ff 	mov.w	r0, #4294967295
 8003588:	e78e      	b.n	80034a8 <__sflush_r+0x1c>
 800358a:	4407      	add	r7, r0
 800358c:	eba8 0800 	sub.w	r8, r8, r0
 8003590:	e7e9      	b.n	8003566 <__sflush_r+0xda>
 8003592:	bf00      	nop
 8003594:	20400001 	.word	0x20400001

08003598 <_fflush_r>:
 8003598:	b538      	push	{r3, r4, r5, lr}
 800359a:	690b      	ldr	r3, [r1, #16]
 800359c:	4605      	mov	r5, r0
 800359e:	460c      	mov	r4, r1
 80035a0:	b1db      	cbz	r3, 80035da <_fflush_r+0x42>
 80035a2:	b118      	cbz	r0, 80035ac <_fflush_r+0x14>
 80035a4:	6983      	ldr	r3, [r0, #24]
 80035a6:	b90b      	cbnz	r3, 80035ac <_fflush_r+0x14>
 80035a8:	f000 f860 	bl	800366c <__sinit>
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <_fflush_r+0x48>)
 80035ae:	429c      	cmp	r4, r3
 80035b0:	d109      	bne.n	80035c6 <_fflush_r+0x2e>
 80035b2:	686c      	ldr	r4, [r5, #4]
 80035b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035b8:	b17b      	cbz	r3, 80035da <_fflush_r+0x42>
 80035ba:	4621      	mov	r1, r4
 80035bc:	4628      	mov	r0, r5
 80035be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035c2:	f7ff bf63 	b.w	800348c <__sflush_r>
 80035c6:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <_fflush_r+0x4c>)
 80035c8:	429c      	cmp	r4, r3
 80035ca:	d101      	bne.n	80035d0 <_fflush_r+0x38>
 80035cc:	68ac      	ldr	r4, [r5, #8]
 80035ce:	e7f1      	b.n	80035b4 <_fflush_r+0x1c>
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <_fflush_r+0x50>)
 80035d2:	429c      	cmp	r4, r3
 80035d4:	bf08      	it	eq
 80035d6:	68ec      	ldreq	r4, [r5, #12]
 80035d8:	e7ec      	b.n	80035b4 <_fflush_r+0x1c>
 80035da:	2000      	movs	r0, #0
 80035dc:	bd38      	pop	{r3, r4, r5, pc}
 80035de:	bf00      	nop
 80035e0:	080044dc 	.word	0x080044dc
 80035e4:	080044fc 	.word	0x080044fc
 80035e8:	080044bc 	.word	0x080044bc

080035ec <std>:
 80035ec:	2300      	movs	r3, #0
 80035ee:	b510      	push	{r4, lr}
 80035f0:	4604      	mov	r4, r0
 80035f2:	e9c0 3300 	strd	r3, r3, [r0]
 80035f6:	6083      	str	r3, [r0, #8]
 80035f8:	8181      	strh	r1, [r0, #12]
 80035fa:	6643      	str	r3, [r0, #100]	; 0x64
 80035fc:	81c2      	strh	r2, [r0, #14]
 80035fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003602:	6183      	str	r3, [r0, #24]
 8003604:	4619      	mov	r1, r3
 8003606:	2208      	movs	r2, #8
 8003608:	305c      	adds	r0, #92	; 0x5c
 800360a:	f7ff fcf8 	bl	8002ffe <memset>
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <std+0x38>)
 8003610:	6224      	str	r4, [r4, #32]
 8003612:	6263      	str	r3, [r4, #36]	; 0x24
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <std+0x3c>)
 8003616:	62a3      	str	r3, [r4, #40]	; 0x28
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <std+0x40>)
 800361a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800361c:	4b04      	ldr	r3, [pc, #16]	; (8003630 <std+0x44>)
 800361e:	6323      	str	r3, [r4, #48]	; 0x30
 8003620:	bd10      	pop	{r4, pc}
 8003622:	bf00      	nop
 8003624:	08003fe9 	.word	0x08003fe9
 8003628:	0800400b 	.word	0x0800400b
 800362c:	08004043 	.word	0x08004043
 8003630:	08004067 	.word	0x08004067

08003634 <_cleanup_r>:
 8003634:	4901      	ldr	r1, [pc, #4]	; (800363c <_cleanup_r+0x8>)
 8003636:	f000 b885 	b.w	8003744 <_fwalk_reent>
 800363a:	bf00      	nop
 800363c:	08003599 	.word	0x08003599

08003640 <__sfmoreglue>:
 8003640:	b570      	push	{r4, r5, r6, lr}
 8003642:	2568      	movs	r5, #104	; 0x68
 8003644:	1e4a      	subs	r2, r1, #1
 8003646:	4355      	muls	r5, r2
 8003648:	460e      	mov	r6, r1
 800364a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800364e:	f000 f965 	bl	800391c <_malloc_r>
 8003652:	4604      	mov	r4, r0
 8003654:	b140      	cbz	r0, 8003668 <__sfmoreglue+0x28>
 8003656:	2100      	movs	r1, #0
 8003658:	e9c0 1600 	strd	r1, r6, [r0]
 800365c:	300c      	adds	r0, #12
 800365e:	60a0      	str	r0, [r4, #8]
 8003660:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003664:	f7ff fccb 	bl	8002ffe <memset>
 8003668:	4620      	mov	r0, r4
 800366a:	bd70      	pop	{r4, r5, r6, pc}

0800366c <__sinit>:
 800366c:	6983      	ldr	r3, [r0, #24]
 800366e:	b510      	push	{r4, lr}
 8003670:	4604      	mov	r4, r0
 8003672:	bb33      	cbnz	r3, 80036c2 <__sinit+0x56>
 8003674:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003678:	6503      	str	r3, [r0, #80]	; 0x50
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <__sinit+0x58>)
 800367c:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <__sinit+0x5c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6282      	str	r2, [r0, #40]	; 0x28
 8003682:	4298      	cmp	r0, r3
 8003684:	bf04      	itt	eq
 8003686:	2301      	moveq	r3, #1
 8003688:	6183      	streq	r3, [r0, #24]
 800368a:	f000 f81f 	bl	80036cc <__sfp>
 800368e:	6060      	str	r0, [r4, #4]
 8003690:	4620      	mov	r0, r4
 8003692:	f000 f81b 	bl	80036cc <__sfp>
 8003696:	60a0      	str	r0, [r4, #8]
 8003698:	4620      	mov	r0, r4
 800369a:	f000 f817 	bl	80036cc <__sfp>
 800369e:	2200      	movs	r2, #0
 80036a0:	60e0      	str	r0, [r4, #12]
 80036a2:	2104      	movs	r1, #4
 80036a4:	6860      	ldr	r0, [r4, #4]
 80036a6:	f7ff ffa1 	bl	80035ec <std>
 80036aa:	2201      	movs	r2, #1
 80036ac:	2109      	movs	r1, #9
 80036ae:	68a0      	ldr	r0, [r4, #8]
 80036b0:	f7ff ff9c 	bl	80035ec <std>
 80036b4:	2202      	movs	r2, #2
 80036b6:	2112      	movs	r1, #18
 80036b8:	68e0      	ldr	r0, [r4, #12]
 80036ba:	f7ff ff97 	bl	80035ec <std>
 80036be:	2301      	movs	r3, #1
 80036c0:	61a3      	str	r3, [r4, #24]
 80036c2:	bd10      	pop	{r4, pc}
 80036c4:	080044b8 	.word	0x080044b8
 80036c8:	08003635 	.word	0x08003635

080036cc <__sfp>:
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ce:	4b1b      	ldr	r3, [pc, #108]	; (800373c <__sfp+0x70>)
 80036d0:	4607      	mov	r7, r0
 80036d2:	681e      	ldr	r6, [r3, #0]
 80036d4:	69b3      	ldr	r3, [r6, #24]
 80036d6:	b913      	cbnz	r3, 80036de <__sfp+0x12>
 80036d8:	4630      	mov	r0, r6
 80036da:	f7ff ffc7 	bl	800366c <__sinit>
 80036de:	3648      	adds	r6, #72	; 0x48
 80036e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	d503      	bpl.n	80036f0 <__sfp+0x24>
 80036e8:	6833      	ldr	r3, [r6, #0]
 80036ea:	b133      	cbz	r3, 80036fa <__sfp+0x2e>
 80036ec:	6836      	ldr	r6, [r6, #0]
 80036ee:	e7f7      	b.n	80036e0 <__sfp+0x14>
 80036f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80036f4:	b16d      	cbz	r5, 8003712 <__sfp+0x46>
 80036f6:	3468      	adds	r4, #104	; 0x68
 80036f8:	e7f4      	b.n	80036e4 <__sfp+0x18>
 80036fa:	2104      	movs	r1, #4
 80036fc:	4638      	mov	r0, r7
 80036fe:	f7ff ff9f 	bl	8003640 <__sfmoreglue>
 8003702:	6030      	str	r0, [r6, #0]
 8003704:	2800      	cmp	r0, #0
 8003706:	d1f1      	bne.n	80036ec <__sfp+0x20>
 8003708:	230c      	movs	r3, #12
 800370a:	4604      	mov	r4, r0
 800370c:	603b      	str	r3, [r7, #0]
 800370e:	4620      	mov	r0, r4
 8003710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <__sfp+0x74>)
 8003714:	6665      	str	r5, [r4, #100]	; 0x64
 8003716:	e9c4 5500 	strd	r5, r5, [r4]
 800371a:	60a5      	str	r5, [r4, #8]
 800371c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003720:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003724:	2208      	movs	r2, #8
 8003726:	4629      	mov	r1, r5
 8003728:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800372c:	f7ff fc67 	bl	8002ffe <memset>
 8003730:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003734:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003738:	e7e9      	b.n	800370e <__sfp+0x42>
 800373a:	bf00      	nop
 800373c:	080044b8 	.word	0x080044b8
 8003740:	ffff0001 	.word	0xffff0001

08003744 <_fwalk_reent>:
 8003744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003748:	4680      	mov	r8, r0
 800374a:	4689      	mov	r9, r1
 800374c:	2600      	movs	r6, #0
 800374e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003752:	b914      	cbnz	r4, 800375a <_fwalk_reent+0x16>
 8003754:	4630      	mov	r0, r6
 8003756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800375a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800375e:	3f01      	subs	r7, #1
 8003760:	d501      	bpl.n	8003766 <_fwalk_reent+0x22>
 8003762:	6824      	ldr	r4, [r4, #0]
 8003764:	e7f5      	b.n	8003752 <_fwalk_reent+0xe>
 8003766:	89ab      	ldrh	r3, [r5, #12]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d907      	bls.n	800377c <_fwalk_reent+0x38>
 800376c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003770:	3301      	adds	r3, #1
 8003772:	d003      	beq.n	800377c <_fwalk_reent+0x38>
 8003774:	4629      	mov	r1, r5
 8003776:	4640      	mov	r0, r8
 8003778:	47c8      	blx	r9
 800377a:	4306      	orrs	r6, r0
 800377c:	3568      	adds	r5, #104	; 0x68
 800377e:	e7ee      	b.n	800375e <_fwalk_reent+0x1a>

08003780 <__locale_ctype_ptr_l>:
 8003780:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003784:	4770      	bx	lr

08003786 <__swhatbuf_r>:
 8003786:	b570      	push	{r4, r5, r6, lr}
 8003788:	460e      	mov	r6, r1
 800378a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800378e:	b096      	sub	sp, #88	; 0x58
 8003790:	2900      	cmp	r1, #0
 8003792:	4614      	mov	r4, r2
 8003794:	461d      	mov	r5, r3
 8003796:	da07      	bge.n	80037a8 <__swhatbuf_r+0x22>
 8003798:	2300      	movs	r3, #0
 800379a:	602b      	str	r3, [r5, #0]
 800379c:	89b3      	ldrh	r3, [r6, #12]
 800379e:	061a      	lsls	r2, r3, #24
 80037a0:	d410      	bmi.n	80037c4 <__swhatbuf_r+0x3e>
 80037a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037a6:	e00e      	b.n	80037c6 <__swhatbuf_r+0x40>
 80037a8:	466a      	mov	r2, sp
 80037aa:	f000 fc8f 	bl	80040cc <_fstat_r>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	dbf2      	blt.n	8003798 <__swhatbuf_r+0x12>
 80037b2:	9a01      	ldr	r2, [sp, #4]
 80037b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80037b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80037bc:	425a      	negs	r2, r3
 80037be:	415a      	adcs	r2, r3
 80037c0:	602a      	str	r2, [r5, #0]
 80037c2:	e7ee      	b.n	80037a2 <__swhatbuf_r+0x1c>
 80037c4:	2340      	movs	r3, #64	; 0x40
 80037c6:	2000      	movs	r0, #0
 80037c8:	6023      	str	r3, [r4, #0]
 80037ca:	b016      	add	sp, #88	; 0x58
 80037cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080037d0 <__smakebuf_r>:
 80037d0:	898b      	ldrh	r3, [r1, #12]
 80037d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037d4:	079d      	lsls	r5, r3, #30
 80037d6:	4606      	mov	r6, r0
 80037d8:	460c      	mov	r4, r1
 80037da:	d507      	bpl.n	80037ec <__smakebuf_r+0x1c>
 80037dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	6123      	str	r3, [r4, #16]
 80037e4:	2301      	movs	r3, #1
 80037e6:	6163      	str	r3, [r4, #20]
 80037e8:	b002      	add	sp, #8
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	ab01      	add	r3, sp, #4
 80037ee:	466a      	mov	r2, sp
 80037f0:	f7ff ffc9 	bl	8003786 <__swhatbuf_r>
 80037f4:	9900      	ldr	r1, [sp, #0]
 80037f6:	4605      	mov	r5, r0
 80037f8:	4630      	mov	r0, r6
 80037fa:	f000 f88f 	bl	800391c <_malloc_r>
 80037fe:	b948      	cbnz	r0, 8003814 <__smakebuf_r+0x44>
 8003800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003804:	059a      	lsls	r2, r3, #22
 8003806:	d4ef      	bmi.n	80037e8 <__smakebuf_r+0x18>
 8003808:	f023 0303 	bic.w	r3, r3, #3
 800380c:	f043 0302 	orr.w	r3, r3, #2
 8003810:	81a3      	strh	r3, [r4, #12]
 8003812:	e7e3      	b.n	80037dc <__smakebuf_r+0xc>
 8003814:	4b0d      	ldr	r3, [pc, #52]	; (800384c <__smakebuf_r+0x7c>)
 8003816:	62b3      	str	r3, [r6, #40]	; 0x28
 8003818:	89a3      	ldrh	r3, [r4, #12]
 800381a:	6020      	str	r0, [r4, #0]
 800381c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003820:	81a3      	strh	r3, [r4, #12]
 8003822:	9b00      	ldr	r3, [sp, #0]
 8003824:	6120      	str	r0, [r4, #16]
 8003826:	6163      	str	r3, [r4, #20]
 8003828:	9b01      	ldr	r3, [sp, #4]
 800382a:	b15b      	cbz	r3, 8003844 <__smakebuf_r+0x74>
 800382c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003830:	4630      	mov	r0, r6
 8003832:	f000 fc5d 	bl	80040f0 <_isatty_r>
 8003836:	b128      	cbz	r0, 8003844 <__smakebuf_r+0x74>
 8003838:	89a3      	ldrh	r3, [r4, #12]
 800383a:	f023 0303 	bic.w	r3, r3, #3
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	81a3      	strh	r3, [r4, #12]
 8003844:	89a3      	ldrh	r3, [r4, #12]
 8003846:	431d      	orrs	r5, r3
 8003848:	81a5      	strh	r5, [r4, #12]
 800384a:	e7cd      	b.n	80037e8 <__smakebuf_r+0x18>
 800384c:	08003635 	.word	0x08003635

08003850 <malloc>:
 8003850:	4b02      	ldr	r3, [pc, #8]	; (800385c <malloc+0xc>)
 8003852:	4601      	mov	r1, r0
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	f000 b861 	b.w	800391c <_malloc_r>
 800385a:	bf00      	nop
 800385c:	2000000c 	.word	0x2000000c

08003860 <__ascii_mbtowc>:
 8003860:	b082      	sub	sp, #8
 8003862:	b901      	cbnz	r1, 8003866 <__ascii_mbtowc+0x6>
 8003864:	a901      	add	r1, sp, #4
 8003866:	b142      	cbz	r2, 800387a <__ascii_mbtowc+0x1a>
 8003868:	b14b      	cbz	r3, 800387e <__ascii_mbtowc+0x1e>
 800386a:	7813      	ldrb	r3, [r2, #0]
 800386c:	600b      	str	r3, [r1, #0]
 800386e:	7812      	ldrb	r2, [r2, #0]
 8003870:	1c10      	adds	r0, r2, #0
 8003872:	bf18      	it	ne
 8003874:	2001      	movne	r0, #1
 8003876:	b002      	add	sp, #8
 8003878:	4770      	bx	lr
 800387a:	4610      	mov	r0, r2
 800387c:	e7fb      	b.n	8003876 <__ascii_mbtowc+0x16>
 800387e:	f06f 0001 	mvn.w	r0, #1
 8003882:	e7f8      	b.n	8003876 <__ascii_mbtowc+0x16>

08003884 <_free_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	4605      	mov	r5, r0
 8003888:	2900      	cmp	r1, #0
 800388a:	d043      	beq.n	8003914 <_free_r+0x90>
 800388c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003890:	1f0c      	subs	r4, r1, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	bfb8      	it	lt
 8003896:	18e4      	addlt	r4, r4, r3
 8003898:	f000 fc5a 	bl	8004150 <__malloc_lock>
 800389c:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <_free_r+0x94>)
 800389e:	6813      	ldr	r3, [r2, #0]
 80038a0:	4610      	mov	r0, r2
 80038a2:	b933      	cbnz	r3, 80038b2 <_free_r+0x2e>
 80038a4:	6063      	str	r3, [r4, #4]
 80038a6:	6014      	str	r4, [r2, #0]
 80038a8:	4628      	mov	r0, r5
 80038aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038ae:	f000 bc50 	b.w	8004152 <__malloc_unlock>
 80038b2:	42a3      	cmp	r3, r4
 80038b4:	d90b      	bls.n	80038ce <_free_r+0x4a>
 80038b6:	6821      	ldr	r1, [r4, #0]
 80038b8:	1862      	adds	r2, r4, r1
 80038ba:	4293      	cmp	r3, r2
 80038bc:	bf01      	itttt	eq
 80038be:	681a      	ldreq	r2, [r3, #0]
 80038c0:	685b      	ldreq	r3, [r3, #4]
 80038c2:	1852      	addeq	r2, r2, r1
 80038c4:	6022      	streq	r2, [r4, #0]
 80038c6:	6063      	str	r3, [r4, #4]
 80038c8:	6004      	str	r4, [r0, #0]
 80038ca:	e7ed      	b.n	80038a8 <_free_r+0x24>
 80038cc:	4613      	mov	r3, r2
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	b10a      	cbz	r2, 80038d6 <_free_r+0x52>
 80038d2:	42a2      	cmp	r2, r4
 80038d4:	d9fa      	bls.n	80038cc <_free_r+0x48>
 80038d6:	6819      	ldr	r1, [r3, #0]
 80038d8:	1858      	adds	r0, r3, r1
 80038da:	42a0      	cmp	r0, r4
 80038dc:	d10b      	bne.n	80038f6 <_free_r+0x72>
 80038de:	6820      	ldr	r0, [r4, #0]
 80038e0:	4401      	add	r1, r0
 80038e2:	1858      	adds	r0, r3, r1
 80038e4:	4282      	cmp	r2, r0
 80038e6:	6019      	str	r1, [r3, #0]
 80038e8:	d1de      	bne.n	80038a8 <_free_r+0x24>
 80038ea:	6810      	ldr	r0, [r2, #0]
 80038ec:	6852      	ldr	r2, [r2, #4]
 80038ee:	4401      	add	r1, r0
 80038f0:	6019      	str	r1, [r3, #0]
 80038f2:	605a      	str	r2, [r3, #4]
 80038f4:	e7d8      	b.n	80038a8 <_free_r+0x24>
 80038f6:	d902      	bls.n	80038fe <_free_r+0x7a>
 80038f8:	230c      	movs	r3, #12
 80038fa:	602b      	str	r3, [r5, #0]
 80038fc:	e7d4      	b.n	80038a8 <_free_r+0x24>
 80038fe:	6820      	ldr	r0, [r4, #0]
 8003900:	1821      	adds	r1, r4, r0
 8003902:	428a      	cmp	r2, r1
 8003904:	bf01      	itttt	eq
 8003906:	6811      	ldreq	r1, [r2, #0]
 8003908:	6852      	ldreq	r2, [r2, #4]
 800390a:	1809      	addeq	r1, r1, r0
 800390c:	6021      	streq	r1, [r4, #0]
 800390e:	6062      	str	r2, [r4, #4]
 8003910:	605c      	str	r4, [r3, #4]
 8003912:	e7c9      	b.n	80038a8 <_free_r+0x24>
 8003914:	bd38      	pop	{r3, r4, r5, pc}
 8003916:	bf00      	nop
 8003918:	200001fc 	.word	0x200001fc

0800391c <_malloc_r>:
 800391c:	b570      	push	{r4, r5, r6, lr}
 800391e:	1ccd      	adds	r5, r1, #3
 8003920:	f025 0503 	bic.w	r5, r5, #3
 8003924:	3508      	adds	r5, #8
 8003926:	2d0c      	cmp	r5, #12
 8003928:	bf38      	it	cc
 800392a:	250c      	movcc	r5, #12
 800392c:	2d00      	cmp	r5, #0
 800392e:	4606      	mov	r6, r0
 8003930:	db01      	blt.n	8003936 <_malloc_r+0x1a>
 8003932:	42a9      	cmp	r1, r5
 8003934:	d903      	bls.n	800393e <_malloc_r+0x22>
 8003936:	230c      	movs	r3, #12
 8003938:	6033      	str	r3, [r6, #0]
 800393a:	2000      	movs	r0, #0
 800393c:	bd70      	pop	{r4, r5, r6, pc}
 800393e:	f000 fc07 	bl	8004150 <__malloc_lock>
 8003942:	4a21      	ldr	r2, [pc, #132]	; (80039c8 <_malloc_r+0xac>)
 8003944:	6814      	ldr	r4, [r2, #0]
 8003946:	4621      	mov	r1, r4
 8003948:	b991      	cbnz	r1, 8003970 <_malloc_r+0x54>
 800394a:	4c20      	ldr	r4, [pc, #128]	; (80039cc <_malloc_r+0xb0>)
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	b91b      	cbnz	r3, 8003958 <_malloc_r+0x3c>
 8003950:	4630      	mov	r0, r6
 8003952:	f000 fb39 	bl	8003fc8 <_sbrk_r>
 8003956:	6020      	str	r0, [r4, #0]
 8003958:	4629      	mov	r1, r5
 800395a:	4630      	mov	r0, r6
 800395c:	f000 fb34 	bl	8003fc8 <_sbrk_r>
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	d124      	bne.n	80039ae <_malloc_r+0x92>
 8003964:	230c      	movs	r3, #12
 8003966:	4630      	mov	r0, r6
 8003968:	6033      	str	r3, [r6, #0]
 800396a:	f000 fbf2 	bl	8004152 <__malloc_unlock>
 800396e:	e7e4      	b.n	800393a <_malloc_r+0x1e>
 8003970:	680b      	ldr	r3, [r1, #0]
 8003972:	1b5b      	subs	r3, r3, r5
 8003974:	d418      	bmi.n	80039a8 <_malloc_r+0x8c>
 8003976:	2b0b      	cmp	r3, #11
 8003978:	d90f      	bls.n	800399a <_malloc_r+0x7e>
 800397a:	600b      	str	r3, [r1, #0]
 800397c:	18cc      	adds	r4, r1, r3
 800397e:	50cd      	str	r5, [r1, r3]
 8003980:	4630      	mov	r0, r6
 8003982:	f000 fbe6 	bl	8004152 <__malloc_unlock>
 8003986:	f104 000b 	add.w	r0, r4, #11
 800398a:	1d23      	adds	r3, r4, #4
 800398c:	f020 0007 	bic.w	r0, r0, #7
 8003990:	1ac3      	subs	r3, r0, r3
 8003992:	d0d3      	beq.n	800393c <_malloc_r+0x20>
 8003994:	425a      	negs	r2, r3
 8003996:	50e2      	str	r2, [r4, r3]
 8003998:	e7d0      	b.n	800393c <_malloc_r+0x20>
 800399a:	684b      	ldr	r3, [r1, #4]
 800399c:	428c      	cmp	r4, r1
 800399e:	bf16      	itet	ne
 80039a0:	6063      	strne	r3, [r4, #4]
 80039a2:	6013      	streq	r3, [r2, #0]
 80039a4:	460c      	movne	r4, r1
 80039a6:	e7eb      	b.n	8003980 <_malloc_r+0x64>
 80039a8:	460c      	mov	r4, r1
 80039aa:	6849      	ldr	r1, [r1, #4]
 80039ac:	e7cc      	b.n	8003948 <_malloc_r+0x2c>
 80039ae:	1cc4      	adds	r4, r0, #3
 80039b0:	f024 0403 	bic.w	r4, r4, #3
 80039b4:	42a0      	cmp	r0, r4
 80039b6:	d005      	beq.n	80039c4 <_malloc_r+0xa8>
 80039b8:	1a21      	subs	r1, r4, r0
 80039ba:	4630      	mov	r0, r6
 80039bc:	f000 fb04 	bl	8003fc8 <_sbrk_r>
 80039c0:	3001      	adds	r0, #1
 80039c2:	d0cf      	beq.n	8003964 <_malloc_r+0x48>
 80039c4:	6025      	str	r5, [r4, #0]
 80039c6:	e7db      	b.n	8003980 <_malloc_r+0x64>
 80039c8:	200001fc 	.word	0x200001fc
 80039cc:	20000200 	.word	0x20000200

080039d0 <__sfputc_r>:
 80039d0:	6893      	ldr	r3, [r2, #8]
 80039d2:	b410      	push	{r4}
 80039d4:	3b01      	subs	r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	6093      	str	r3, [r2, #8]
 80039da:	da07      	bge.n	80039ec <__sfputc_r+0x1c>
 80039dc:	6994      	ldr	r4, [r2, #24]
 80039de:	42a3      	cmp	r3, r4
 80039e0:	db01      	blt.n	80039e6 <__sfputc_r+0x16>
 80039e2:	290a      	cmp	r1, #10
 80039e4:	d102      	bne.n	80039ec <__sfputc_r+0x1c>
 80039e6:	bc10      	pop	{r4}
 80039e8:	f7ff bc90 	b.w	800330c <__swbuf_r>
 80039ec:	6813      	ldr	r3, [r2, #0]
 80039ee:	1c58      	adds	r0, r3, #1
 80039f0:	6010      	str	r0, [r2, #0]
 80039f2:	7019      	strb	r1, [r3, #0]
 80039f4:	4608      	mov	r0, r1
 80039f6:	bc10      	pop	{r4}
 80039f8:	4770      	bx	lr

080039fa <__sfputs_r>:
 80039fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fc:	4606      	mov	r6, r0
 80039fe:	460f      	mov	r7, r1
 8003a00:	4614      	mov	r4, r2
 8003a02:	18d5      	adds	r5, r2, r3
 8003a04:	42ac      	cmp	r4, r5
 8003a06:	d101      	bne.n	8003a0c <__sfputs_r+0x12>
 8003a08:	2000      	movs	r0, #0
 8003a0a:	e007      	b.n	8003a1c <__sfputs_r+0x22>
 8003a0c:	463a      	mov	r2, r7
 8003a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a12:	4630      	mov	r0, r6
 8003a14:	f7ff ffdc 	bl	80039d0 <__sfputc_r>
 8003a18:	1c43      	adds	r3, r0, #1
 8003a1a:	d1f3      	bne.n	8003a04 <__sfputs_r+0xa>
 8003a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a20 <_vfiprintf_r>:
 8003a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a24:	460c      	mov	r4, r1
 8003a26:	b09d      	sub	sp, #116	; 0x74
 8003a28:	4617      	mov	r7, r2
 8003a2a:	461d      	mov	r5, r3
 8003a2c:	4606      	mov	r6, r0
 8003a2e:	b118      	cbz	r0, 8003a38 <_vfiprintf_r+0x18>
 8003a30:	6983      	ldr	r3, [r0, #24]
 8003a32:	b90b      	cbnz	r3, 8003a38 <_vfiprintf_r+0x18>
 8003a34:	f7ff fe1a 	bl	800366c <__sinit>
 8003a38:	4b7c      	ldr	r3, [pc, #496]	; (8003c2c <_vfiprintf_r+0x20c>)
 8003a3a:	429c      	cmp	r4, r3
 8003a3c:	d158      	bne.n	8003af0 <_vfiprintf_r+0xd0>
 8003a3e:	6874      	ldr	r4, [r6, #4]
 8003a40:	89a3      	ldrh	r3, [r4, #12]
 8003a42:	0718      	lsls	r0, r3, #28
 8003a44:	d55e      	bpl.n	8003b04 <_vfiprintf_r+0xe4>
 8003a46:	6923      	ldr	r3, [r4, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d05b      	beq.n	8003b04 <_vfiprintf_r+0xe4>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a50:	2320      	movs	r3, #32
 8003a52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a56:	2330      	movs	r3, #48	; 0x30
 8003a58:	f04f 0b01 	mov.w	fp, #1
 8003a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a60:	9503      	str	r5, [sp, #12]
 8003a62:	46b8      	mov	r8, r7
 8003a64:	4645      	mov	r5, r8
 8003a66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a6a:	b10b      	cbz	r3, 8003a70 <_vfiprintf_r+0x50>
 8003a6c:	2b25      	cmp	r3, #37	; 0x25
 8003a6e:	d154      	bne.n	8003b1a <_vfiprintf_r+0xfa>
 8003a70:	ebb8 0a07 	subs.w	sl, r8, r7
 8003a74:	d00b      	beq.n	8003a8e <_vfiprintf_r+0x6e>
 8003a76:	4653      	mov	r3, sl
 8003a78:	463a      	mov	r2, r7
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	f7ff ffbc 	bl	80039fa <__sfputs_r>
 8003a82:	3001      	adds	r0, #1
 8003a84:	f000 80c2 	beq.w	8003c0c <_vfiprintf_r+0x1ec>
 8003a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a8a:	4453      	add	r3, sl
 8003a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a8e:	f898 3000 	ldrb.w	r3, [r8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 80ba 	beq.w	8003c0c <_vfiprintf_r+0x1ec>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aa2:	9304      	str	r3, [sp, #16]
 8003aa4:	9307      	str	r3, [sp, #28]
 8003aa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8003aac:	46a8      	mov	r8, r5
 8003aae:	2205      	movs	r2, #5
 8003ab0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003ab4:	485e      	ldr	r0, [pc, #376]	; (8003c30 <_vfiprintf_r+0x210>)
 8003ab6:	f000 fb3d 	bl	8004134 <memchr>
 8003aba:	9b04      	ldr	r3, [sp, #16]
 8003abc:	bb78      	cbnz	r0, 8003b1e <_vfiprintf_r+0xfe>
 8003abe:	06d9      	lsls	r1, r3, #27
 8003ac0:	bf44      	itt	mi
 8003ac2:	2220      	movmi	r2, #32
 8003ac4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ac8:	071a      	lsls	r2, r3, #28
 8003aca:	bf44      	itt	mi
 8003acc:	222b      	movmi	r2, #43	; 0x2b
 8003ace:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ad2:	782a      	ldrb	r2, [r5, #0]
 8003ad4:	2a2a      	cmp	r2, #42	; 0x2a
 8003ad6:	d02a      	beq.n	8003b2e <_vfiprintf_r+0x10e>
 8003ad8:	46a8      	mov	r8, r5
 8003ada:	2000      	movs	r0, #0
 8003adc:	250a      	movs	r5, #10
 8003ade:	9a07      	ldr	r2, [sp, #28]
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ae6:	3b30      	subs	r3, #48	; 0x30
 8003ae8:	2b09      	cmp	r3, #9
 8003aea:	d969      	bls.n	8003bc0 <_vfiprintf_r+0x1a0>
 8003aec:	b360      	cbz	r0, 8003b48 <_vfiprintf_r+0x128>
 8003aee:	e024      	b.n	8003b3a <_vfiprintf_r+0x11a>
 8003af0:	4b50      	ldr	r3, [pc, #320]	; (8003c34 <_vfiprintf_r+0x214>)
 8003af2:	429c      	cmp	r4, r3
 8003af4:	d101      	bne.n	8003afa <_vfiprintf_r+0xda>
 8003af6:	68b4      	ldr	r4, [r6, #8]
 8003af8:	e7a2      	b.n	8003a40 <_vfiprintf_r+0x20>
 8003afa:	4b4f      	ldr	r3, [pc, #316]	; (8003c38 <_vfiprintf_r+0x218>)
 8003afc:	429c      	cmp	r4, r3
 8003afe:	bf08      	it	eq
 8003b00:	68f4      	ldreq	r4, [r6, #12]
 8003b02:	e79d      	b.n	8003a40 <_vfiprintf_r+0x20>
 8003b04:	4621      	mov	r1, r4
 8003b06:	4630      	mov	r0, r6
 8003b08:	f7ff fc52 	bl	80033b0 <__swsetup_r>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d09d      	beq.n	8003a4c <_vfiprintf_r+0x2c>
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	b01d      	add	sp, #116	; 0x74
 8003b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b1a:	46a8      	mov	r8, r5
 8003b1c:	e7a2      	b.n	8003a64 <_vfiprintf_r+0x44>
 8003b1e:	4a44      	ldr	r2, [pc, #272]	; (8003c30 <_vfiprintf_r+0x210>)
 8003b20:	4645      	mov	r5, r8
 8003b22:	1a80      	subs	r0, r0, r2
 8003b24:	fa0b f000 	lsl.w	r0, fp, r0
 8003b28:	4318      	orrs	r0, r3
 8003b2a:	9004      	str	r0, [sp, #16]
 8003b2c:	e7be      	b.n	8003aac <_vfiprintf_r+0x8c>
 8003b2e:	9a03      	ldr	r2, [sp, #12]
 8003b30:	1d11      	adds	r1, r2, #4
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	9103      	str	r1, [sp, #12]
 8003b36:	2a00      	cmp	r2, #0
 8003b38:	db01      	blt.n	8003b3e <_vfiprintf_r+0x11e>
 8003b3a:	9207      	str	r2, [sp, #28]
 8003b3c:	e004      	b.n	8003b48 <_vfiprintf_r+0x128>
 8003b3e:	4252      	negs	r2, r2
 8003b40:	f043 0302 	orr.w	r3, r3, #2
 8003b44:	9207      	str	r2, [sp, #28]
 8003b46:	9304      	str	r3, [sp, #16]
 8003b48:	f898 3000 	ldrb.w	r3, [r8]
 8003b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8003b4e:	d10e      	bne.n	8003b6e <_vfiprintf_r+0x14e>
 8003b50:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003b54:	2b2a      	cmp	r3, #42	; 0x2a
 8003b56:	d138      	bne.n	8003bca <_vfiprintf_r+0x1aa>
 8003b58:	9b03      	ldr	r3, [sp, #12]
 8003b5a:	f108 0802 	add.w	r8, r8, #2
 8003b5e:	1d1a      	adds	r2, r3, #4
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	9203      	str	r2, [sp, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bfb8      	it	lt
 8003b68:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b6c:	9305      	str	r3, [sp, #20]
 8003b6e:	4d33      	ldr	r5, [pc, #204]	; (8003c3c <_vfiprintf_r+0x21c>)
 8003b70:	2203      	movs	r2, #3
 8003b72:	f898 1000 	ldrb.w	r1, [r8]
 8003b76:	4628      	mov	r0, r5
 8003b78:	f000 fadc 	bl	8004134 <memchr>
 8003b7c:	b140      	cbz	r0, 8003b90 <_vfiprintf_r+0x170>
 8003b7e:	2340      	movs	r3, #64	; 0x40
 8003b80:	1b40      	subs	r0, r0, r5
 8003b82:	fa03 f000 	lsl.w	r0, r3, r0
 8003b86:	9b04      	ldr	r3, [sp, #16]
 8003b88:	f108 0801 	add.w	r8, r8, #1
 8003b8c:	4303      	orrs	r3, r0
 8003b8e:	9304      	str	r3, [sp, #16]
 8003b90:	f898 1000 	ldrb.w	r1, [r8]
 8003b94:	2206      	movs	r2, #6
 8003b96:	482a      	ldr	r0, [pc, #168]	; (8003c40 <_vfiprintf_r+0x220>)
 8003b98:	f108 0701 	add.w	r7, r8, #1
 8003b9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ba0:	f000 fac8 	bl	8004134 <memchr>
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d037      	beq.n	8003c18 <_vfiprintf_r+0x1f8>
 8003ba8:	4b26      	ldr	r3, [pc, #152]	; (8003c44 <_vfiprintf_r+0x224>)
 8003baa:	bb1b      	cbnz	r3, 8003bf4 <_vfiprintf_r+0x1d4>
 8003bac:	9b03      	ldr	r3, [sp, #12]
 8003bae:	3307      	adds	r3, #7
 8003bb0:	f023 0307 	bic.w	r3, r3, #7
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	9303      	str	r3, [sp, #12]
 8003bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bba:	444b      	add	r3, r9
 8003bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8003bbe:	e750      	b.n	8003a62 <_vfiprintf_r+0x42>
 8003bc0:	fb05 3202 	mla	r2, r5, r2, r3
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	4688      	mov	r8, r1
 8003bc8:	e78a      	b.n	8003ae0 <_vfiprintf_r+0xc0>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	250a      	movs	r5, #10
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f108 0801 	add.w	r8, r8, #1
 8003bd4:	9305      	str	r3, [sp, #20]
 8003bd6:	4640      	mov	r0, r8
 8003bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bdc:	3a30      	subs	r2, #48	; 0x30
 8003bde:	2a09      	cmp	r2, #9
 8003be0:	d903      	bls.n	8003bea <_vfiprintf_r+0x1ca>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0c3      	beq.n	8003b6e <_vfiprintf_r+0x14e>
 8003be6:	9105      	str	r1, [sp, #20]
 8003be8:	e7c1      	b.n	8003b6e <_vfiprintf_r+0x14e>
 8003bea:	fb05 2101 	mla	r1, r5, r1, r2
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4680      	mov	r8, r0
 8003bf2:	e7f0      	b.n	8003bd6 <_vfiprintf_r+0x1b6>
 8003bf4:	ab03      	add	r3, sp, #12
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	4622      	mov	r2, r4
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <_vfiprintf_r+0x228>)
 8003bfc:	a904      	add	r1, sp, #16
 8003bfe:	4630      	mov	r0, r6
 8003c00:	f3af 8000 	nop.w
 8003c04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003c08:	4681      	mov	r9, r0
 8003c0a:	d1d5      	bne.n	8003bb8 <_vfiprintf_r+0x198>
 8003c0c:	89a3      	ldrh	r3, [r4, #12]
 8003c0e:	065b      	lsls	r3, r3, #25
 8003c10:	f53f af7e 	bmi.w	8003b10 <_vfiprintf_r+0xf0>
 8003c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c16:	e77d      	b.n	8003b14 <_vfiprintf_r+0xf4>
 8003c18:	ab03      	add	r3, sp, #12
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	4622      	mov	r2, r4
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <_vfiprintf_r+0x228>)
 8003c20:	a904      	add	r1, sp, #16
 8003c22:	4630      	mov	r0, r6
 8003c24:	f000 f888 	bl	8003d38 <_printf_i>
 8003c28:	e7ec      	b.n	8003c04 <_vfiprintf_r+0x1e4>
 8003c2a:	bf00      	nop
 8003c2c:	080044dc 	.word	0x080044dc
 8003c30:	08004526 	.word	0x08004526
 8003c34:	080044fc 	.word	0x080044fc
 8003c38:	080044bc 	.word	0x080044bc
 8003c3c:	0800452c 	.word	0x0800452c
 8003c40:	08004530 	.word	0x08004530
 8003c44:	00000000 	.word	0x00000000
 8003c48:	080039fb 	.word	0x080039fb

08003c4c <_printf_common>:
 8003c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c50:	4691      	mov	r9, r2
 8003c52:	461f      	mov	r7, r3
 8003c54:	688a      	ldr	r2, [r1, #8]
 8003c56:	690b      	ldr	r3, [r1, #16]
 8003c58:	4606      	mov	r6, r0
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	bfb8      	it	lt
 8003c5e:	4613      	movlt	r3, r2
 8003c60:	f8c9 3000 	str.w	r3, [r9]
 8003c64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c68:	460c      	mov	r4, r1
 8003c6a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c6e:	b112      	cbz	r2, 8003c76 <_printf_common+0x2a>
 8003c70:	3301      	adds	r3, #1
 8003c72:	f8c9 3000 	str.w	r3, [r9]
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	0699      	lsls	r1, r3, #26
 8003c7a:	bf42      	ittt	mi
 8003c7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003c80:	3302      	addmi	r3, #2
 8003c82:	f8c9 3000 	strmi.w	r3, [r9]
 8003c86:	6825      	ldr	r5, [r4, #0]
 8003c88:	f015 0506 	ands.w	r5, r5, #6
 8003c8c:	d107      	bne.n	8003c9e <_printf_common+0x52>
 8003c8e:	f104 0a19 	add.w	sl, r4, #25
 8003c92:	68e3      	ldr	r3, [r4, #12]
 8003c94:	f8d9 2000 	ldr.w	r2, [r9]
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	42ab      	cmp	r3, r5
 8003c9c:	dc29      	bgt.n	8003cf2 <_printf_common+0xa6>
 8003c9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003ca2:	6822      	ldr	r2, [r4, #0]
 8003ca4:	3300      	adds	r3, #0
 8003ca6:	bf18      	it	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	0692      	lsls	r2, r2, #26
 8003cac:	d42e      	bmi.n	8003d0c <_printf_common+0xc0>
 8003cae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cb2:	4639      	mov	r1, r7
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	47c0      	blx	r8
 8003cb8:	3001      	adds	r0, #1
 8003cba:	d021      	beq.n	8003d00 <_printf_common+0xb4>
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	68e5      	ldr	r5, [r4, #12]
 8003cc0:	f003 0306 	and.w	r3, r3, #6
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	bf18      	it	ne
 8003cc8:	2500      	movne	r5, #0
 8003cca:	f8d9 2000 	ldr.w	r2, [r9]
 8003cce:	f04f 0900 	mov.w	r9, #0
 8003cd2:	bf08      	it	eq
 8003cd4:	1aad      	subeq	r5, r5, r2
 8003cd6:	68a3      	ldr	r3, [r4, #8]
 8003cd8:	6922      	ldr	r2, [r4, #16]
 8003cda:	bf08      	it	eq
 8003cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	bfc4      	itt	gt
 8003ce4:	1a9b      	subgt	r3, r3, r2
 8003ce6:	18ed      	addgt	r5, r5, r3
 8003ce8:	341a      	adds	r4, #26
 8003cea:	454d      	cmp	r5, r9
 8003cec:	d11a      	bne.n	8003d24 <_printf_common+0xd8>
 8003cee:	2000      	movs	r0, #0
 8003cf0:	e008      	b.n	8003d04 <_printf_common+0xb8>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	4652      	mov	r2, sl
 8003cf6:	4639      	mov	r1, r7
 8003cf8:	4630      	mov	r0, r6
 8003cfa:	47c0      	blx	r8
 8003cfc:	3001      	adds	r0, #1
 8003cfe:	d103      	bne.n	8003d08 <_printf_common+0xbc>
 8003d00:	f04f 30ff 	mov.w	r0, #4294967295
 8003d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d08:	3501      	adds	r5, #1
 8003d0a:	e7c2      	b.n	8003c92 <_printf_common+0x46>
 8003d0c:	2030      	movs	r0, #48	; 0x30
 8003d0e:	18e1      	adds	r1, r4, r3
 8003d10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d1a:	4422      	add	r2, r4
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d22:	e7c4      	b.n	8003cae <_printf_common+0x62>
 8003d24:	2301      	movs	r3, #1
 8003d26:	4622      	mov	r2, r4
 8003d28:	4639      	mov	r1, r7
 8003d2a:	4630      	mov	r0, r6
 8003d2c:	47c0      	blx	r8
 8003d2e:	3001      	adds	r0, #1
 8003d30:	d0e6      	beq.n	8003d00 <_printf_common+0xb4>
 8003d32:	f109 0901 	add.w	r9, r9, #1
 8003d36:	e7d8      	b.n	8003cea <_printf_common+0x9e>

08003d38 <_printf_i>:
 8003d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003d40:	460c      	mov	r4, r1
 8003d42:	7e09      	ldrb	r1, [r1, #24]
 8003d44:	b085      	sub	sp, #20
 8003d46:	296e      	cmp	r1, #110	; 0x6e
 8003d48:	4617      	mov	r7, r2
 8003d4a:	4606      	mov	r6, r0
 8003d4c:	4698      	mov	r8, r3
 8003d4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d50:	f000 80b3 	beq.w	8003eba <_printf_i+0x182>
 8003d54:	d822      	bhi.n	8003d9c <_printf_i+0x64>
 8003d56:	2963      	cmp	r1, #99	; 0x63
 8003d58:	d036      	beq.n	8003dc8 <_printf_i+0x90>
 8003d5a:	d80a      	bhi.n	8003d72 <_printf_i+0x3a>
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	f000 80b9 	beq.w	8003ed4 <_printf_i+0x19c>
 8003d62:	2958      	cmp	r1, #88	; 0x58
 8003d64:	f000 8083 	beq.w	8003e6e <_printf_i+0x136>
 8003d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d70:	e032      	b.n	8003dd8 <_printf_i+0xa0>
 8003d72:	2964      	cmp	r1, #100	; 0x64
 8003d74:	d001      	beq.n	8003d7a <_printf_i+0x42>
 8003d76:	2969      	cmp	r1, #105	; 0x69
 8003d78:	d1f6      	bne.n	8003d68 <_printf_i+0x30>
 8003d7a:	6820      	ldr	r0, [r4, #0]
 8003d7c:	6813      	ldr	r3, [r2, #0]
 8003d7e:	0605      	lsls	r5, r0, #24
 8003d80:	f103 0104 	add.w	r1, r3, #4
 8003d84:	d52a      	bpl.n	8003ddc <_printf_i+0xa4>
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6011      	str	r1, [r2, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	da03      	bge.n	8003d96 <_printf_i+0x5e>
 8003d8e:	222d      	movs	r2, #45	; 0x2d
 8003d90:	425b      	negs	r3, r3
 8003d92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d96:	486f      	ldr	r0, [pc, #444]	; (8003f54 <_printf_i+0x21c>)
 8003d98:	220a      	movs	r2, #10
 8003d9a:	e039      	b.n	8003e10 <_printf_i+0xd8>
 8003d9c:	2973      	cmp	r1, #115	; 0x73
 8003d9e:	f000 809d 	beq.w	8003edc <_printf_i+0x1a4>
 8003da2:	d808      	bhi.n	8003db6 <_printf_i+0x7e>
 8003da4:	296f      	cmp	r1, #111	; 0x6f
 8003da6:	d020      	beq.n	8003dea <_printf_i+0xb2>
 8003da8:	2970      	cmp	r1, #112	; 0x70
 8003daa:	d1dd      	bne.n	8003d68 <_printf_i+0x30>
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	f043 0320 	orr.w	r3, r3, #32
 8003db2:	6023      	str	r3, [r4, #0]
 8003db4:	e003      	b.n	8003dbe <_printf_i+0x86>
 8003db6:	2975      	cmp	r1, #117	; 0x75
 8003db8:	d017      	beq.n	8003dea <_printf_i+0xb2>
 8003dba:	2978      	cmp	r1, #120	; 0x78
 8003dbc:	d1d4      	bne.n	8003d68 <_printf_i+0x30>
 8003dbe:	2378      	movs	r3, #120	; 0x78
 8003dc0:	4865      	ldr	r0, [pc, #404]	; (8003f58 <_printf_i+0x220>)
 8003dc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dc6:	e055      	b.n	8003e74 <_printf_i+0x13c>
 8003dc8:	6813      	ldr	r3, [r2, #0]
 8003dca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dce:	1d19      	adds	r1, r3, #4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6011      	str	r1, [r2, #0]
 8003dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e08c      	b.n	8003ef6 <_printf_i+0x1be>
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003de2:	6011      	str	r1, [r2, #0]
 8003de4:	bf18      	it	ne
 8003de6:	b21b      	sxthne	r3, r3
 8003de8:	e7cf      	b.n	8003d8a <_printf_i+0x52>
 8003dea:	6813      	ldr	r3, [r2, #0]
 8003dec:	6825      	ldr	r5, [r4, #0]
 8003dee:	1d18      	adds	r0, r3, #4
 8003df0:	6010      	str	r0, [r2, #0]
 8003df2:	0628      	lsls	r0, r5, #24
 8003df4:	d501      	bpl.n	8003dfa <_printf_i+0xc2>
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	e002      	b.n	8003e00 <_printf_i+0xc8>
 8003dfa:	0668      	lsls	r0, r5, #25
 8003dfc:	d5fb      	bpl.n	8003df6 <_printf_i+0xbe>
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	296f      	cmp	r1, #111	; 0x6f
 8003e02:	bf14      	ite	ne
 8003e04:	220a      	movne	r2, #10
 8003e06:	2208      	moveq	r2, #8
 8003e08:	4852      	ldr	r0, [pc, #328]	; (8003f54 <_printf_i+0x21c>)
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e10:	6865      	ldr	r5, [r4, #4]
 8003e12:	2d00      	cmp	r5, #0
 8003e14:	60a5      	str	r5, [r4, #8]
 8003e16:	f2c0 8095 	blt.w	8003f44 <_printf_i+0x20c>
 8003e1a:	6821      	ldr	r1, [r4, #0]
 8003e1c:	f021 0104 	bic.w	r1, r1, #4
 8003e20:	6021      	str	r1, [r4, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d13d      	bne.n	8003ea2 <_printf_i+0x16a>
 8003e26:	2d00      	cmp	r5, #0
 8003e28:	f040 808e 	bne.w	8003f48 <_printf_i+0x210>
 8003e2c:	4665      	mov	r5, ip
 8003e2e:	2a08      	cmp	r2, #8
 8003e30:	d10b      	bne.n	8003e4a <_printf_i+0x112>
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	07db      	lsls	r3, r3, #31
 8003e36:	d508      	bpl.n	8003e4a <_printf_i+0x112>
 8003e38:	6923      	ldr	r3, [r4, #16]
 8003e3a:	6862      	ldr	r2, [r4, #4]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	bfde      	ittt	le
 8003e40:	2330      	movle	r3, #48	; 0x30
 8003e42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e4a:	ebac 0305 	sub.w	r3, ip, r5
 8003e4e:	6123      	str	r3, [r4, #16]
 8003e50:	f8cd 8000 	str.w	r8, [sp]
 8003e54:	463b      	mov	r3, r7
 8003e56:	aa03      	add	r2, sp, #12
 8003e58:	4621      	mov	r1, r4
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	f7ff fef6 	bl	8003c4c <_printf_common>
 8003e60:	3001      	adds	r0, #1
 8003e62:	d14d      	bne.n	8003f00 <_printf_i+0x1c8>
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295
 8003e68:	b005      	add	sp, #20
 8003e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e6e:	4839      	ldr	r0, [pc, #228]	; (8003f54 <_printf_i+0x21c>)
 8003e70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003e74:	6813      	ldr	r3, [r2, #0]
 8003e76:	6821      	ldr	r1, [r4, #0]
 8003e78:	1d1d      	adds	r5, r3, #4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6015      	str	r5, [r2, #0]
 8003e7e:	060a      	lsls	r2, r1, #24
 8003e80:	d50b      	bpl.n	8003e9a <_printf_i+0x162>
 8003e82:	07ca      	lsls	r2, r1, #31
 8003e84:	bf44      	itt	mi
 8003e86:	f041 0120 	orrmi.w	r1, r1, #32
 8003e8a:	6021      	strmi	r1, [r4, #0]
 8003e8c:	b91b      	cbnz	r3, 8003e96 <_printf_i+0x15e>
 8003e8e:	6822      	ldr	r2, [r4, #0]
 8003e90:	f022 0220 	bic.w	r2, r2, #32
 8003e94:	6022      	str	r2, [r4, #0]
 8003e96:	2210      	movs	r2, #16
 8003e98:	e7b7      	b.n	8003e0a <_printf_i+0xd2>
 8003e9a:	064d      	lsls	r5, r1, #25
 8003e9c:	bf48      	it	mi
 8003e9e:	b29b      	uxthmi	r3, r3
 8003ea0:	e7ef      	b.n	8003e82 <_printf_i+0x14a>
 8003ea2:	4665      	mov	r5, ip
 8003ea4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ea8:	fb02 3311 	mls	r3, r2, r1, r3
 8003eac:	5cc3      	ldrb	r3, [r0, r3]
 8003eae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	2900      	cmp	r1, #0
 8003eb6:	d1f5      	bne.n	8003ea4 <_printf_i+0x16c>
 8003eb8:	e7b9      	b.n	8003e2e <_printf_i+0xf6>
 8003eba:	6813      	ldr	r3, [r2, #0]
 8003ebc:	6825      	ldr	r5, [r4, #0]
 8003ebe:	1d18      	adds	r0, r3, #4
 8003ec0:	6961      	ldr	r1, [r4, #20]
 8003ec2:	6010      	str	r0, [r2, #0]
 8003ec4:	0628      	lsls	r0, r5, #24
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	d501      	bpl.n	8003ece <_printf_i+0x196>
 8003eca:	6019      	str	r1, [r3, #0]
 8003ecc:	e002      	b.n	8003ed4 <_printf_i+0x19c>
 8003ece:	066a      	lsls	r2, r5, #25
 8003ed0:	d5fb      	bpl.n	8003eca <_printf_i+0x192>
 8003ed2:	8019      	strh	r1, [r3, #0]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	4665      	mov	r5, ip
 8003ed8:	6123      	str	r3, [r4, #16]
 8003eda:	e7b9      	b.n	8003e50 <_printf_i+0x118>
 8003edc:	6813      	ldr	r3, [r2, #0]
 8003ede:	1d19      	adds	r1, r3, #4
 8003ee0:	6011      	str	r1, [r2, #0]
 8003ee2:	681d      	ldr	r5, [r3, #0]
 8003ee4:	6862      	ldr	r2, [r4, #4]
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4628      	mov	r0, r5
 8003eea:	f000 f923 	bl	8004134 <memchr>
 8003eee:	b108      	cbz	r0, 8003ef4 <_printf_i+0x1bc>
 8003ef0:	1b40      	subs	r0, r0, r5
 8003ef2:	6060      	str	r0, [r4, #4]
 8003ef4:	6863      	ldr	r3, [r4, #4]
 8003ef6:	6123      	str	r3, [r4, #16]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003efe:	e7a7      	b.n	8003e50 <_printf_i+0x118>
 8003f00:	6923      	ldr	r3, [r4, #16]
 8003f02:	462a      	mov	r2, r5
 8003f04:	4639      	mov	r1, r7
 8003f06:	4630      	mov	r0, r6
 8003f08:	47c0      	blx	r8
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	d0aa      	beq.n	8003e64 <_printf_i+0x12c>
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	079b      	lsls	r3, r3, #30
 8003f12:	d413      	bmi.n	8003f3c <_printf_i+0x204>
 8003f14:	68e0      	ldr	r0, [r4, #12]
 8003f16:	9b03      	ldr	r3, [sp, #12]
 8003f18:	4298      	cmp	r0, r3
 8003f1a:	bfb8      	it	lt
 8003f1c:	4618      	movlt	r0, r3
 8003f1e:	e7a3      	b.n	8003e68 <_printf_i+0x130>
 8003f20:	2301      	movs	r3, #1
 8003f22:	464a      	mov	r2, r9
 8003f24:	4639      	mov	r1, r7
 8003f26:	4630      	mov	r0, r6
 8003f28:	47c0      	blx	r8
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d09a      	beq.n	8003e64 <_printf_i+0x12c>
 8003f2e:	3501      	adds	r5, #1
 8003f30:	68e3      	ldr	r3, [r4, #12]
 8003f32:	9a03      	ldr	r2, [sp, #12]
 8003f34:	1a9b      	subs	r3, r3, r2
 8003f36:	42ab      	cmp	r3, r5
 8003f38:	dcf2      	bgt.n	8003f20 <_printf_i+0x1e8>
 8003f3a:	e7eb      	b.n	8003f14 <_printf_i+0x1dc>
 8003f3c:	2500      	movs	r5, #0
 8003f3e:	f104 0919 	add.w	r9, r4, #25
 8003f42:	e7f5      	b.n	8003f30 <_printf_i+0x1f8>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1ac      	bne.n	8003ea2 <_printf_i+0x16a>
 8003f48:	7803      	ldrb	r3, [r0, #0]
 8003f4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f52:	e76c      	b.n	8003e2e <_printf_i+0xf6>
 8003f54:	08004537 	.word	0x08004537
 8003f58:	08004548 	.word	0x08004548

08003f5c <_putc_r>:
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	460d      	mov	r5, r1
 8003f60:	4614      	mov	r4, r2
 8003f62:	4606      	mov	r6, r0
 8003f64:	b118      	cbz	r0, 8003f6e <_putc_r+0x12>
 8003f66:	6983      	ldr	r3, [r0, #24]
 8003f68:	b90b      	cbnz	r3, 8003f6e <_putc_r+0x12>
 8003f6a:	f7ff fb7f 	bl	800366c <__sinit>
 8003f6e:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <_putc_r+0x60>)
 8003f70:	429c      	cmp	r4, r3
 8003f72:	d112      	bne.n	8003f9a <_putc_r+0x3e>
 8003f74:	6874      	ldr	r4, [r6, #4]
 8003f76:	68a3      	ldr	r3, [r4, #8]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	60a3      	str	r3, [r4, #8]
 8003f7e:	da16      	bge.n	8003fae <_putc_r+0x52>
 8003f80:	69a2      	ldr	r2, [r4, #24]
 8003f82:	4293      	cmp	r3, r2
 8003f84:	db02      	blt.n	8003f8c <_putc_r+0x30>
 8003f86:	b2eb      	uxtb	r3, r5
 8003f88:	2b0a      	cmp	r3, #10
 8003f8a:	d110      	bne.n	8003fae <_putc_r+0x52>
 8003f8c:	4622      	mov	r2, r4
 8003f8e:	4629      	mov	r1, r5
 8003f90:	4630      	mov	r0, r6
 8003f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003f96:	f7ff b9b9 	b.w	800330c <__swbuf_r>
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <_putc_r+0x64>)
 8003f9c:	429c      	cmp	r4, r3
 8003f9e:	d101      	bne.n	8003fa4 <_putc_r+0x48>
 8003fa0:	68b4      	ldr	r4, [r6, #8]
 8003fa2:	e7e8      	b.n	8003f76 <_putc_r+0x1a>
 8003fa4:	4b07      	ldr	r3, [pc, #28]	; (8003fc4 <_putc_r+0x68>)
 8003fa6:	429c      	cmp	r4, r3
 8003fa8:	bf08      	it	eq
 8003faa:	68f4      	ldreq	r4, [r6, #12]
 8003fac:	e7e3      	b.n	8003f76 <_putc_r+0x1a>
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	b2e8      	uxtb	r0, r5
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	6022      	str	r2, [r4, #0]
 8003fb6:	701d      	strb	r5, [r3, #0]
 8003fb8:	bd70      	pop	{r4, r5, r6, pc}
 8003fba:	bf00      	nop
 8003fbc:	080044dc 	.word	0x080044dc
 8003fc0:	080044fc 	.word	0x080044fc
 8003fc4:	080044bc 	.word	0x080044bc

08003fc8 <_sbrk_r>:
 8003fc8:	b538      	push	{r3, r4, r5, lr}
 8003fca:	2300      	movs	r3, #0
 8003fcc:	4c05      	ldr	r4, [pc, #20]	; (8003fe4 <_sbrk_r+0x1c>)
 8003fce:	4605      	mov	r5, r0
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	6023      	str	r3, [r4, #0]
 8003fd4:	f7fc fe3e 	bl	8000c54 <_sbrk>
 8003fd8:	1c43      	adds	r3, r0, #1
 8003fda:	d102      	bne.n	8003fe2 <_sbrk_r+0x1a>
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	b103      	cbz	r3, 8003fe2 <_sbrk_r+0x1a>
 8003fe0:	602b      	str	r3, [r5, #0]
 8003fe2:	bd38      	pop	{r3, r4, r5, pc}
 8003fe4:	20000bc8 	.word	0x20000bc8

08003fe8 <__sread>:
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	460c      	mov	r4, r1
 8003fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ff0:	f000 f8b0 	bl	8004154 <_read_r>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	bfab      	itete	ge
 8003ff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8003ffc:	181b      	addge	r3, r3, r0
 8003ffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004002:	bfac      	ite	ge
 8004004:	6563      	strge	r3, [r4, #84]	; 0x54
 8004006:	81a3      	strhlt	r3, [r4, #12]
 8004008:	bd10      	pop	{r4, pc}

0800400a <__swrite>:
 800400a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800400e:	461f      	mov	r7, r3
 8004010:	898b      	ldrh	r3, [r1, #12]
 8004012:	4605      	mov	r5, r0
 8004014:	05db      	lsls	r3, r3, #23
 8004016:	460c      	mov	r4, r1
 8004018:	4616      	mov	r6, r2
 800401a:	d505      	bpl.n	8004028 <__swrite+0x1e>
 800401c:	2302      	movs	r3, #2
 800401e:	2200      	movs	r2, #0
 8004020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004024:	f000 f874 	bl	8004110 <_lseek_r>
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	4632      	mov	r2, r6
 800402c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004030:	81a3      	strh	r3, [r4, #12]
 8004032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004036:	463b      	mov	r3, r7
 8004038:	4628      	mov	r0, r5
 800403a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800403e:	f000 b823 	b.w	8004088 <_write_r>

08004042 <__sseek>:
 8004042:	b510      	push	{r4, lr}
 8004044:	460c      	mov	r4, r1
 8004046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800404a:	f000 f861 	bl	8004110 <_lseek_r>
 800404e:	1c43      	adds	r3, r0, #1
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	bf15      	itete	ne
 8004054:	6560      	strne	r0, [r4, #84]	; 0x54
 8004056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800405a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800405e:	81a3      	strheq	r3, [r4, #12]
 8004060:	bf18      	it	ne
 8004062:	81a3      	strhne	r3, [r4, #12]
 8004064:	bd10      	pop	{r4, pc}

08004066 <__sclose>:
 8004066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800406a:	f000 b81f 	b.w	80040ac <_close_r>

0800406e <__ascii_wctomb>:
 800406e:	b149      	cbz	r1, 8004084 <__ascii_wctomb+0x16>
 8004070:	2aff      	cmp	r2, #255	; 0xff
 8004072:	bf8b      	itete	hi
 8004074:	238a      	movhi	r3, #138	; 0x8a
 8004076:	700a      	strbls	r2, [r1, #0]
 8004078:	6003      	strhi	r3, [r0, #0]
 800407a:	2001      	movls	r0, #1
 800407c:	bf88      	it	hi
 800407e:	f04f 30ff 	movhi.w	r0, #4294967295
 8004082:	4770      	bx	lr
 8004084:	4608      	mov	r0, r1
 8004086:	4770      	bx	lr

08004088 <_write_r>:
 8004088:	b538      	push	{r3, r4, r5, lr}
 800408a:	4605      	mov	r5, r0
 800408c:	4608      	mov	r0, r1
 800408e:	4611      	mov	r1, r2
 8004090:	2200      	movs	r2, #0
 8004092:	4c05      	ldr	r4, [pc, #20]	; (80040a8 <_write_r+0x20>)
 8004094:	6022      	str	r2, [r4, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	f7fc fd8f 	bl	8000bba <_write>
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	d102      	bne.n	80040a6 <_write_r+0x1e>
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	b103      	cbz	r3, 80040a6 <_write_r+0x1e>
 80040a4:	602b      	str	r3, [r5, #0]
 80040a6:	bd38      	pop	{r3, r4, r5, pc}
 80040a8:	20000bc8 	.word	0x20000bc8

080040ac <_close_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	2300      	movs	r3, #0
 80040b0:	4c05      	ldr	r4, [pc, #20]	; (80040c8 <_close_r+0x1c>)
 80040b2:	4605      	mov	r5, r0
 80040b4:	4608      	mov	r0, r1
 80040b6:	6023      	str	r3, [r4, #0]
 80040b8:	f7fc fd9b 	bl	8000bf2 <_close>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d102      	bne.n	80040c6 <_close_r+0x1a>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	b103      	cbz	r3, 80040c6 <_close_r+0x1a>
 80040c4:	602b      	str	r3, [r5, #0]
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
 80040c8:	20000bc8 	.word	0x20000bc8

080040cc <_fstat_r>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	2300      	movs	r3, #0
 80040d0:	4c06      	ldr	r4, [pc, #24]	; (80040ec <_fstat_r+0x20>)
 80040d2:	4605      	mov	r5, r0
 80040d4:	4608      	mov	r0, r1
 80040d6:	4611      	mov	r1, r2
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	f7fc fd95 	bl	8000c08 <_fstat>
 80040de:	1c43      	adds	r3, r0, #1
 80040e0:	d102      	bne.n	80040e8 <_fstat_r+0x1c>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	b103      	cbz	r3, 80040e8 <_fstat_r+0x1c>
 80040e6:	602b      	str	r3, [r5, #0]
 80040e8:	bd38      	pop	{r3, r4, r5, pc}
 80040ea:	bf00      	nop
 80040ec:	20000bc8 	.word	0x20000bc8

080040f0 <_isatty_r>:
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	2300      	movs	r3, #0
 80040f4:	4c05      	ldr	r4, [pc, #20]	; (800410c <_isatty_r+0x1c>)
 80040f6:	4605      	mov	r5, r0
 80040f8:	4608      	mov	r0, r1
 80040fa:	6023      	str	r3, [r4, #0]
 80040fc:	f7fc fd93 	bl	8000c26 <_isatty>
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	d102      	bne.n	800410a <_isatty_r+0x1a>
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	b103      	cbz	r3, 800410a <_isatty_r+0x1a>
 8004108:	602b      	str	r3, [r5, #0]
 800410a:	bd38      	pop	{r3, r4, r5, pc}
 800410c:	20000bc8 	.word	0x20000bc8

08004110 <_lseek_r>:
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	4605      	mov	r5, r0
 8004114:	4608      	mov	r0, r1
 8004116:	4611      	mov	r1, r2
 8004118:	2200      	movs	r2, #0
 800411a:	4c05      	ldr	r4, [pc, #20]	; (8004130 <_lseek_r+0x20>)
 800411c:	6022      	str	r2, [r4, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	f7fc fd8b 	bl	8000c3a <_lseek>
 8004124:	1c43      	adds	r3, r0, #1
 8004126:	d102      	bne.n	800412e <_lseek_r+0x1e>
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	b103      	cbz	r3, 800412e <_lseek_r+0x1e>
 800412c:	602b      	str	r3, [r5, #0]
 800412e:	bd38      	pop	{r3, r4, r5, pc}
 8004130:	20000bc8 	.word	0x20000bc8

08004134 <memchr>:
 8004134:	b510      	push	{r4, lr}
 8004136:	b2c9      	uxtb	r1, r1
 8004138:	4402      	add	r2, r0
 800413a:	4290      	cmp	r0, r2
 800413c:	4603      	mov	r3, r0
 800413e:	d101      	bne.n	8004144 <memchr+0x10>
 8004140:	2300      	movs	r3, #0
 8004142:	e003      	b.n	800414c <memchr+0x18>
 8004144:	781c      	ldrb	r4, [r3, #0]
 8004146:	3001      	adds	r0, #1
 8004148:	428c      	cmp	r4, r1
 800414a:	d1f6      	bne.n	800413a <memchr+0x6>
 800414c:	4618      	mov	r0, r3
 800414e:	bd10      	pop	{r4, pc}

08004150 <__malloc_lock>:
 8004150:	4770      	bx	lr

08004152 <__malloc_unlock>:
 8004152:	4770      	bx	lr

08004154 <_read_r>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	4605      	mov	r5, r0
 8004158:	4608      	mov	r0, r1
 800415a:	4611      	mov	r1, r2
 800415c:	2200      	movs	r2, #0
 800415e:	4c05      	ldr	r4, [pc, #20]	; (8004174 <_read_r+0x20>)
 8004160:	6022      	str	r2, [r4, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	f7fc fd0c 	bl	8000b80 <_read>
 8004168:	1c43      	adds	r3, r0, #1
 800416a:	d102      	bne.n	8004172 <_read_r+0x1e>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	b103      	cbz	r3, 8004172 <_read_r+0x1e>
 8004170:	602b      	str	r3, [r5, #0]
 8004172:	bd38      	pop	{r3, r4, r5, pc}
 8004174:	20000bc8 	.word	0x20000bc8

08004178 <_init>:
 8004178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417a:	bf00      	nop
 800417c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417e:	bc08      	pop	{r3}
 8004180:	469e      	mov	lr, r3
 8004182:	4770      	bx	lr

08004184 <_fini>:
 8004184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004186:	bf00      	nop
 8004188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418a:	bc08      	pop	{r3}
 800418c:	469e      	mov	lr, r3
 800418e:	4770      	bx	lr
