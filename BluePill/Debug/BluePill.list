
BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007684  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  08007798  08007798  00017798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007de0  08007de0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007de0  08007de0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007de0  08007de0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007de0  08007de0  00017de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e58  200001dc  08007fc4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001034  08007fc4  00021034  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ec5  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002599  00000000  00000000  000310ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba8  00000000  00000000  00033668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  00034210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000199c1  00000000  00000000  00034cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b8e4  00000000  00000000  0004e679  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a901  00000000  00000000  00059f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e485e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004078  00000000  00000000  000e48dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800777c 	.word	0x0800777c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800777c 	.word	0x0800777c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bfc:	d1ed      	bne.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <FL_clean>:
 */

#include "FL.h"

void FL_clean(I2C_HandleTypeDef hi2c2, ADC_HandleTypeDef hadc1)
{
 80010e4:	b084      	sub	sp, #16
 80010e6:	b5b0      	push	{r4, r5, r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	f107 0418 	add.w	r4, r7, #24
 80010f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int i;
	memset(&command, 0, sizeof(command));
 80010f4:	2298      	movs	r2, #152	; 0x98
 80010f6:	2100      	movs	r1, #0
 80010f8:	4817      	ldr	r0, [pc, #92]	; (8001158 <FL_clean+0x74>)
 80010fa:	f003 fe82 	bl	8004e02 <memset>
	command.i2c_scan_cmd.i2c_handle = hi2c2;
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <FL_clean+0x74>)
 8001100:	3304      	adds	r3, #4
 8001102:	f107 0118 	add.w	r1, r7, #24
 8001106:	2254      	movs	r2, #84	; 0x54
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fe6f 	bl	8004dec <memcpy>
	command.adc_get_cmd.adc_handle = hadc1;
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <FL_clean+0x74>)
 8001110:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8001114:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8001118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001120:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001124:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(i = 0; i < LINE_BUFLEN; i++)
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	e008      	b.n	8001140 <FL_clean+0x5c>
		input.line_rx_buffer[i] = 0;
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <FL_clean+0x78>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4413      	add	r3, r2
 8001134:	3301      	adds	r3, #1
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LINE_BUFLEN; i++)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3301      	adds	r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001146:	dbf2      	blt.n	800112e <FL_clean+0x4a>

}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001152:	b004      	add	sp, #16
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000618 	.word	0x20000618
 800115c:	20000208 	.word	0x20000208

08001160 <FL_uart_decode>:

int FL_uart_decode()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
	FL_debug("Entered FL_uart_decode function");
 8001166:	484b      	ldr	r0, [pc, #300]	; (8001294 <FL_uart_decode+0x134>)
 8001168:	f000 f98e 	bl	8001488 <FL_debug>

	char delim[2] = ","; 	// This string will be used to parse the main input string
 800116c:	232c      	movs	r3, #44	; 0x2c
 800116e:	80bb      	strh	r3, [r7, #4]
	char *token;			// This pointer will hold current parsed string
	memset(arg_buffer, '\0', sizeof(arg_buffer));
 8001170:	2228      	movs	r2, #40	; 0x28
 8001172:	2100      	movs	r1, #0
 8001174:	4848      	ldr	r0, [pc, #288]	; (8001298 <FL_uart_decode+0x138>)
 8001176:	f003 fe44 	bl	8004e02 <memset>
	memset(single_arg, '\0',  sizeof(single_arg));
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	2100      	movs	r1, #0
 800117e:	4847      	ldr	r0, [pc, #284]	; (800129c <FL_uart_decode+0x13c>)
 8001180:	f003 fe3f 	bl	8004e02 <memset>
	arg_cnt = 0;
 8001184:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <FL_uart_decode+0x140>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
	 * source 2, storing the token:
	 * https://www.tutorialspoint.com/c_standard_library/c_function_strtok.htm
	 */

	/* get the first token */
	token = strtok(input.line_rx_buffer, delim);
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	4619      	mov	r1, r3
 800118e:	4845      	ldr	r0, [pc, #276]	; (80012a4 <FL_uart_decode+0x144>)
 8001190:	f004 fb26 	bl	80057e0 <strtok>
 8001194:	60f8      	str	r0, [r7, #12]

	/* walk through other tokens */
	while( token != NULL ) {
 8001196:	e012      	b.n	80011be <FL_uart_decode+0x5e>
		printf( " %s\n", token );
 8001198:	68f9      	ldr	r1, [r7, #12]
 800119a:	4843      	ldr	r0, [pc, #268]	; (80012a8 <FL_uart_decode+0x148>)
 800119c:	f004 fa88 	bl	80056b0 <iprintf>
		arg_buffer[arg_cnt++] = token; // Store the token for later use
 80011a0:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <FL_uart_decode+0x140>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	493e      	ldr	r1, [pc, #248]	; (80012a0 <FL_uart_decode+0x140>)
 80011a8:	600a      	str	r2, [r1, #0]
 80011aa:	493b      	ldr	r1, [pc, #236]	; (8001298 <FL_uart_decode+0x138>)
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		token = strtok(NULL, delim);
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4619      	mov	r1, r3
 80011b6:	2000      	movs	r0, #0
 80011b8:	f004 fb12 	bl	80057e0 <strtok>
 80011bc:	60f8      	str	r0, [r7, #12]
	while( token != NULL ) {
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1e9      	bne.n	8001198 <FL_uart_decode+0x38>
	}

	// Some debugging
	int i;
	if(debug_enable)
 80011c4:	4b39      	ldr	r3, [pc, #228]	; (80012ac <FL_uart_decode+0x14c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d013      	beq.n	80011f4 <FL_uart_decode+0x94>
	{
		for(i = 0; i < arg_cnt; i++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	e00b      	b.n	80011ea <FL_uart_decode+0x8a>
		{
			printf("Arg buffer [%d] = %s\n", i, arg_buffer[i]);
 80011d2:	4a31      	ldr	r2, [pc, #196]	; (8001298 <FL_uart_decode+0x138>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011da:	461a      	mov	r2, r3
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	4834      	ldr	r0, [pc, #208]	; (80012b0 <FL_uart_decode+0x150>)
 80011e0:	f004 fa66 	bl	80056b0 <iprintf>
		for(i = 0; i < arg_cnt; i++)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	3301      	adds	r3, #1
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <FL_uart_decode+0x140>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbee      	blt.n	80011d2 <FL_uart_decode+0x72>
		}
	}

	// The first argument is the name of the command
	// Determine which command is sent
	command.cmd_no = FL_get_cmd(arg_buffer[0]);
 80011f4:	4b28      	ldr	r3, [pc, #160]	; (8001298 <FL_uart_decode+0x138>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 f86b 	bl	80012d4 <FL_get_cmd>
 80011fe:	4602      	mov	r2, r0
 8001200:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <FL_uart_decode+0x154>)
 8001202:	601a      	str	r2, [r3, #0]

	if(command.cmd_no == COMMAND_ERROR)
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <FL_uart_decode+0x154>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d107      	bne.n	800121c <FL_uart_decode+0xbc>
	{
		FL_error_handler("FL.c", "FL_uart_decode","Unsupported Command");
 800120c:	4a2a      	ldr	r2, [pc, #168]	; (80012b8 <FL_uart_decode+0x158>)
 800120e:	492b      	ldr	r1, [pc, #172]	; (80012bc <FL_uart_decode+0x15c>)
 8001210:	482b      	ldr	r0, [pc, #172]	; (80012c0 <FL_uart_decode+0x160>)
 8001212:	f000 f921 	bl	8001458 <FL_error_handler>
		return -1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	e036      	b.n	800128a <FL_uart_decode+0x12a>

	/*
	 * Preparation for argument conversion
	 * Each command has its own arguments and should be parsed accordingly
	 */
	arg_cnt--; 	// The first argument is the command name, compensate for it
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <FL_uart_decode+0x140>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3b01      	subs	r3, #1
 8001222:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <FL_uart_decode+0x140>)
 8001224:	6013      	str	r3, [r2, #0]

	switch(command.cmd_no)
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <FL_uart_decode+0x154>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3b01      	subs	r3, #1
 800122c:	2b03      	cmp	r3, #3
 800122e:	d823      	bhi.n	8001278 <FL_uart_decode+0x118>
 8001230:	a201      	add	r2, pc, #4	; (adr r2, 8001238 <FL_uart_decode+0xd8>)
 8001232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001236:	bf00      	nop
 8001238:	08001249 	.word	0x08001249
 800123c:	08001281 	.word	0x08001281
 8001240:	08001281 	.word	0x08001281
 8001244:	08001281 	.word	0x08001281
	{
		case COMMAND_SET_RES:
		{
			if(arg_cnt != SET_RES_ARGS)
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <FL_uart_decode+0x140>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d00c      	beq.n	800126a <FL_uart_decode+0x10a>
			{
				FL_error_handler("FL.c", "FL_uart_decode","Wrong number of arguments arguments\n");
 8001250:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <FL_uart_decode+0x164>)
 8001252:	491a      	ldr	r1, [pc, #104]	; (80012bc <FL_uart_decode+0x15c>)
 8001254:	481a      	ldr	r0, [pc, #104]	; (80012c0 <FL_uart_decode+0x160>)
 8001256:	f000 f8ff 	bl	8001458 <FL_error_handler>
				printf("Expected %d arguments, got %d arguments\n", SET_RES_ARGS, arg_cnt);
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <FL_uart_decode+0x140>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	2102      	movs	r1, #2
 8001262:	4819      	ldr	r0, [pc, #100]	; (80012c8 <FL_uart_decode+0x168>)
 8001264:	f004 fa24 	bl	80056b0 <iprintf>
			}
			else
			{
				FL_convert_args(command.cmd_no, arg_buffer);
			}
		}break;
 8001268:	e00b      	b.n	8001282 <FL_uart_decode+0x122>
				FL_convert_args(command.cmd_no, arg_buffer);
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <FL_uart_decode+0x154>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	490a      	ldr	r1, [pc, #40]	; (8001298 <FL_uart_decode+0x138>)
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f8a7 	bl	80013c4 <FL_convert_args>
		}break;
 8001276:	e004      	b.n	8001282 <FL_uart_decode+0x122>
		{
			// No arguments to gather
		}break;
		default:
		{
			FL_debug("Don't know about this default case1");
 8001278:	4814      	ldr	r0, [pc, #80]	; (80012cc <FL_uart_decode+0x16c>)
 800127a:	f000 f905 	bl	8001488 <FL_debug>
 800127e:	e000      	b.n	8001282 <FL_uart_decode+0x122>
		}break;
 8001280:	bf00      	nop
		}
	}
	FL_debug("Exiting FL_uart_decode function");
 8001282:	4813      	ldr	r0, [pc, #76]	; (80012d0 <FL_uart_decode+0x170>)
 8001284:	f000 f900 	bl	8001488 <FL_debug>
	return 0;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	08007798 	.word	0x08007798
 8001298:	200006b4 	.word	0x200006b4
 800129c:	20000ae4 	.word	0x20000ae4
 80012a0:	20000204 	.word	0x20000204
 80012a4:	20000209 	.word	0x20000209
 80012a8:	080077b8 	.word	0x080077b8
 80012ac:	20000b64 	.word	0x20000b64
 80012b0:	080077c0 	.word	0x080077c0
 80012b4:	20000618 	.word	0x20000618
 80012b8:	080077d8 	.word	0x080077d8
 80012bc:	080077ec 	.word	0x080077ec
 80012c0:	080077fc 	.word	0x080077fc
 80012c4:	08007804 	.word	0x08007804
 80012c8:	0800782c 	.word	0x0800782c
 80012cc:	08007858 	.word	0x08007858
 80012d0:	0800787c 	.word	0x0800787c

080012d4 <FL_get_cmd>:
/*
 *  This function takes the first argument passed to the FL and tries to
 *  determine which command is sent
 */
int FL_get_cmd(char *str)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	; 0x38
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	FL_debug("Entered FL_get_cmd function");
 80012dc:	482f      	ldr	r0, [pc, #188]	; (800139c <FL_get_cmd+0xc8>)
 80012de:	f000 f8d3 	bl	8001488 <FL_debug>

	char set_res[] = "set_res";
 80012e2:	4a2f      	ldr	r2, [pc, #188]	; (80013a0 <FL_get_cmd+0xcc>)
 80012e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ec:	e883 0003 	stmia.w	r3, {r0, r1}
	char i2c_scan[] = "i2c_scan";
 80012f0:	4a2c      	ldr	r2, [pc, #176]	; (80013a4 <FL_get_cmd+0xd0>)
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012f8:	c303      	stmia	r3!, {r0, r1}
 80012fa:	701a      	strb	r2, [r3, #0]
	char adc_get[] = "adc_get";
 80012fc:	4a2a      	ldr	r2, [pc, #168]	; (80013a8 <FL_get_cmd+0xd4>)
 80012fe:	f107 0318 	add.w	r3, r7, #24
 8001302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001306:	e883 0003 	stmia.w	r3, {r0, r1}
	char res_calc[] = "res_calc";
 800130a:	4a28      	ldr	r2, [pc, #160]	; (80013ac <FL_get_cmd+0xd8>)
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	ca07      	ldmia	r2, {r0, r1, r2}
 8001312:	c303      	stmia	r3!, {r0, r1}
 8001314:	701a      	strb	r2, [r3, #0]
	int ret = COMMAND_ERROR;
 8001316:	2300      	movs	r3, #0
 8001318:	637b      	str	r3, [r7, #52]	; 0x34

	if(strcmp(str, set_res) == 0)
 800131a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800131e:	4619      	mov	r1, r3
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7fe ff15 	bl	8000150 <strcmp>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d104      	bne.n	8001336 <FL_get_cmd+0x62>
	{
		FL_debug("command = set_res");
 800132c:	4820      	ldr	r0, [pc, #128]	; (80013b0 <FL_get_cmd+0xdc>)
 800132e:	f000 f8ab 	bl	8001488 <FL_debug>
		ret = COMMAND_SET_RES;
 8001332:	2301      	movs	r3, #1
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if(strcmp(str, i2c_scan) == 0)
 8001336:	f107 0320 	add.w	r3, r7, #32
 800133a:	4619      	mov	r1, r3
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7fe ff07 	bl	8000150 <strcmp>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d104      	bne.n	8001352 <FL_get_cmd+0x7e>
	{
		FL_debug("command = i2c_scan");
 8001348:	481a      	ldr	r0, [pc, #104]	; (80013b4 <FL_get_cmd+0xe0>)
 800134a:	f000 f89d 	bl	8001488 <FL_debug>
		ret = COMMAND_I2C_SCAN;
 800134e:	2302      	movs	r3, #2
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if(strcmp(str, adc_get) == 0)
 8001352:	f107 0318 	add.w	r3, r7, #24
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7fe fef9 	bl	8000150 <strcmp>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d104      	bne.n	800136e <FL_get_cmd+0x9a>
	{
		FL_debug("command = adc_get");
 8001364:	4814      	ldr	r0, [pc, #80]	; (80013b8 <FL_get_cmd+0xe4>)
 8001366:	f000 f88f 	bl	8001488 <FL_debug>
		ret = COMMAND_ADC_GET;
 800136a:	2303      	movs	r3, #3
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if(strcmp(str, res_calc) == 0)
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	4619      	mov	r1, r3
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7fe feeb 	bl	8000150 <strcmp>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d104      	bne.n	800138a <FL_get_cmd+0xb6>
	{
		FL_debug("command = res_calc");
 8001380:	480e      	ldr	r0, [pc, #56]	; (80013bc <FL_get_cmd+0xe8>)
 8001382:	f000 f881 	bl	8001488 <FL_debug>
		ret = COMMAND_RES_CALC;
 8001386:	2304      	movs	r3, #4
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
//		{
//			FL_debug("command = unrecognized");
//			ret = COMMAND_ERROR;
//		}

	FL_debug("Exiting FL_get_cmd function");
 800138a:	480d      	ldr	r0, [pc, #52]	; (80013c0 <FL_get_cmd+0xec>)
 800138c:	f000 f87c 	bl	8001488 <FL_debug>
	return ret;
 8001390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001392:	4618      	mov	r0, r3
 8001394:	3738      	adds	r7, #56	; 0x38
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	0800789c 	.word	0x0800789c
 80013a0:	08007924 	.word	0x08007924
 80013a4:	0800792c 	.word	0x0800792c
 80013a8:	08007938 	.word	0x08007938
 80013ac:	08007940 	.word	0x08007940
 80013b0:	080078b8 	.word	0x080078b8
 80013b4:	080078cc 	.word	0x080078cc
 80013b8:	080078e0 	.word	0x080078e0
 80013bc:	080078f4 	.word	0x080078f4
 80013c0:	08007908 	.word	0x08007908

080013c4 <FL_convert_args>:

int FL_convert_args(int cmd_no, char **args)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
	FL_debug("Entered FL_convert_args function");
 80013ce:	481c      	ldr	r0, [pc, #112]	; (8001440 <FL_convert_args+0x7c>)
 80013d0:	f000 f85a 	bl	8001488 <FL_debug>
	switch(cmd_no)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d12a      	bne.n	8001430 <FL_convert_args+0x6c>
	{
		case COMMAND_SET_RES:
		{
			// Copy a string from args into single_arg.
			// See FL.h for more details
			strcpy(single_arg, args[1]);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3304      	adds	r3, #4
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4818      	ldr	r0, [pc, #96]	; (8001444 <FL_convert_args+0x80>)
 80013e4:	f004 f9f4 	bl	80057d0 <strcpy>
			if(debug_enable)
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <FL_convert_args+0x84>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <FL_convert_args+0x34>
				printf("Single arg = %s\n", single_arg);
 80013f0:	4914      	ldr	r1, [pc, #80]	; (8001444 <FL_convert_args+0x80>)
 80013f2:	4816      	ldr	r0, [pc, #88]	; (800144c <FL_convert_args+0x88>)
 80013f4:	f004 f95c 	bl	80056b0 <iprintf>
			command.set_res_cmd.digipot_no = atoi(single_arg);
 80013f8:	4812      	ldr	r0, [pc, #72]	; (8001444 <FL_convert_args+0x80>)
 80013fa:	f003 fcc9 	bl	8004d90 <atoi>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <FL_convert_args+0x8c>)
 8001402:	65da      	str	r2, [r3, #92]	; 0x5c

			strcpy(single_arg, args[2]);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3308      	adds	r3, #8
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4619      	mov	r1, r3
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <FL_convert_args+0x80>)
 800140e:	f004 f9df 	bl	80057d0 <strcpy>
			if(debug_enable)
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <FL_convert_args+0x84>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <FL_convert_args+0x5e>
				printf("Single arg = %s\n", single_arg);
 800141a:	490a      	ldr	r1, [pc, #40]	; (8001444 <FL_convert_args+0x80>)
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <FL_convert_args+0x88>)
 800141e:	f004 f947 	bl	80056b0 <iprintf>
			command.set_res_cmd.res = atoi(single_arg);
 8001422:	4808      	ldr	r0, [pc, #32]	; (8001444 <FL_convert_args+0x80>)
 8001424:	f003 fcb4 	bl	8004d90 <atoi>
 8001428:	4602      	mov	r2, r0
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <FL_convert_args+0x8c>)
 800142c:	661a      	str	r2, [r3, #96]	; 0x60

		}break;
 800142e:	e002      	b.n	8001436 <FL_convert_args+0x72>
		default:
		{
			FL_debug("Don't know about this default case2");
 8001430:	4808      	ldr	r0, [pc, #32]	; (8001454 <FL_convert_args+0x90>)
 8001432:	f000 f829 	bl	8001488 <FL_debug>
		}
	}

	return 0;
 8001436:	2300      	movs	r3, #0
	FL_debug("Exiting FL_convert_args function");
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	0800794c 	.word	0x0800794c
 8001444:	20000ae4 	.word	0x20000ae4
 8001448:	20000b64 	.word	0x20000b64
 800144c:	08007970 	.word	0x08007970
 8001450:	20000618 	.word	0x20000618
 8001454:	08007984 	.word	0x08007984

08001458 <FL_error_handler>:


void FL_error_handler(char *file_name, char *function_name, char *msg)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
	printf("ERROR in %s\t%s\n", file_name, function_name);
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	68f9      	ldr	r1, [r7, #12]
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <FL_error_handler+0x28>)
 800146a:	f004 f921 	bl	80056b0 <iprintf>
	printf("message:\t%s\n", msg);
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <FL_error_handler+0x2c>)
 8001472:	f004 f91d 	bl	80056b0 <iprintf>
}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	080079a8 	.word	0x080079a8
 8001484:	080079b8 	.word	0x080079b8

08001488 <FL_debug>:

void FL_debug(char *s)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	if(debug_enable)
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <FL_debug+0x20>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <FL_debug+0x16>
	{
		printf("%s\n",s);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f004 f991 	bl	80057c0 <puts>
	}
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000b64 	.word	0x20000b64

080014ac <IOL_set_res>:
 */

#include "IOL.h"

void IOL_set_res()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af02      	add	r7, sp, #8
	uint8_t wiper = 0x00;
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]

	switch(command.set_res_cmd.digipot_no) /* According to the datasheet, the following values are the memory addresses of the individual subdigipots */
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <IOL_set_res+0x84>)
 80014b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d816      	bhi.n	80014ec <IOL_set_res+0x40>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <IOL_set_res+0x18>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014d5 	.word	0x080014d5
 80014c8:	080014db 	.word	0x080014db
 80014cc:	080014e1 	.word	0x080014e1
 80014d0:	080014e7 	.word	0x080014e7
	{
		case 0: wiper = 0x00; break;
 80014d4:	2300      	movs	r3, #0
 80014d6:	71fb      	strb	r3, [r7, #7]
 80014d8:	e010      	b.n	80014fc <IOL_set_res+0x50>
		case 1: wiper = 0x01; break;
 80014da:	2301      	movs	r3, #1
 80014dc:	71fb      	strb	r3, [r7, #7]
 80014de:	e00d      	b.n	80014fc <IOL_set_res+0x50>
		case 2: wiper = 0x06; break;
 80014e0:	2306      	movs	r3, #6
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	e00a      	b.n	80014fc <IOL_set_res+0x50>
		case 3: wiper = 0x07; break;
 80014e6:	2307      	movs	r3, #7
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	e007      	b.n	80014fc <IOL_set_res+0x50>
		default:
		{
			FL_error_handler("IOL.c", "IOL_set_res", "Unsupported digipot number");
 80014ec:	4a11      	ldr	r2, [pc, #68]	; (8001534 <IOL_set_res+0x88>)
 80014ee:	4912      	ldr	r1, [pc, #72]	; (8001538 <IOL_set_res+0x8c>)
 80014f0:	4812      	ldr	r0, [pc, #72]	; (800153c <IOL_set_res+0x90>)
 80014f2:	f7ff ffb1 	bl	8001458 <FL_error_handler>
			wiper = 0x10;
 80014f6:	2310      	movs	r3, #16
 80014f8:	71fb      	strb	r3, [r7, #7]
		}break;
 80014fa:	bf00      	nop
	}

	uint16_t addr = 0x2c << 1;
 80014fc:	2358      	movs	r3, #88	; 0x58
 80014fe:	80bb      	strh	r3, [r7, #4]
	uint8_t tx[] = { wiper << 4, (uint8_t)command.set_res_cmd.res};
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	b2db      	uxtb	r3, r3
 8001506:	703b      	strb	r3, [r7, #0]
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <IOL_set_res+0x84>)
 800150a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150c:	b2db      	uxtb	r3, r3
 800150e:	707b      	strb	r3, [r7, #1]
	uint16_t num = 2;
 8001510:	2302      	movs	r3, #2
 8001512:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Master_Transmit(&command.i2c_scan_cmd.i2c_handle, addr, tx, num, HAL_MAX_DELAY );
 8001514:	8878      	ldrh	r0, [r7, #2]
 8001516:	463a      	mov	r2, r7
 8001518:	88b9      	ldrh	r1, [r7, #4]
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4603      	mov	r3, r0
 8001522:	4807      	ldr	r0, [pc, #28]	; (8001540 <IOL_set_res+0x94>)
 8001524:	f001 fe32 	bl	800318c <HAL_I2C_Master_Transmit>

}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000618 	.word	0x20000618
 8001534:	080079c8 	.word	0x080079c8
 8001538:	080079e4 	.word	0x080079e4
 800153c:	080079f0 	.word	0x080079f0
 8001540:	2000061c 	.word	0x2000061c

08001544 <IOL_i2c_scan>:



void IOL_i2c_scan()
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
	printf("Scanning I2C bus:\r\n");
 800154a:	4819      	ldr	r0, [pc, #100]	; (80015b0 <IOL_i2c_scan+0x6c>)
 800154c:	f004 f938 	bl	80057c0 <puts>
	HAL_StatusTypeDef result;
	uint8_t i;
	for (i=1; i<128; i++)
 8001550:	2301      	movs	r3, #1
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	e020      	b.n	8001598 <IOL_i2c_scan+0x54>
	   * &hi2c1 is the handle
	   * (uint16_t)(i<<1) is the i2c address left aligned
	   * retries 2
	   * timeout 2
	   */
	  result = HAL_I2C_IsDeviceReady(&command.i2c_scan_cmd.i2c_handle, (uint16_t)(i<<1), 2, 2);
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	b29b      	uxth	r3, r3
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	b299      	uxth	r1, r3
 800155e:	2302      	movs	r3, #2
 8001560:	2202      	movs	r2, #2
 8001562:	4814      	ldr	r0, [pc, #80]	; (80015b4 <IOL_i2c_scan+0x70>)
 8001564:	f001 ff10 	bl	8003388 <HAL_I2C_IsDeviceReady>
 8001568:	4603      	mov	r3, r0
 800156a:	71bb      	strb	r3, [r7, #6]
	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <IOL_i2c_scan+0x34>
	  {
		  printf("."); // No ACK received at that address
 8001572:	202e      	movs	r0, #46	; 0x2e
 8001574:	f004 f8b4 	bl	80056e0 <putchar>
	  }
	  if (result == HAL_OK)
 8001578:	79bb      	ldrb	r3, [r7, #6]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d109      	bne.n	8001592 <IOL_i2c_scan+0x4e>
	  {
		  printf("0x%X", i); // Received an ACK at that address
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	4619      	mov	r1, r3
 8001582:	480d      	ldr	r0, [pc, #52]	; (80015b8 <IOL_i2c_scan+0x74>)
 8001584:	f004 f894 	bl	80056b0 <iprintf>
		  command.i2c_scan_cmd.addr = i;
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <IOL_i2c_scan+0x78>)
 800158e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	for (i=1; i<128; i++)
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	3301      	adds	r3, #1
 8001596:	71fb      	strb	r3, [r7, #7]
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	dada      	bge.n	8001556 <IOL_i2c_scan+0x12>
	  }
	}
	printf("\r\n");
 80015a0:	4807      	ldr	r0, [pc, #28]	; (80015c0 <IOL_i2c_scan+0x7c>)
 80015a2:	f004 f90d 	bl	80057c0 <puts>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	080079f8 	.word	0x080079f8
 80015b4:	2000061c 	.word	0x2000061c
 80015b8:	08007a0c 	.word	0x08007a0c
 80015bc:	20000618 	.word	0x20000618
 80015c0:	08007a14 	.word	0x08007a14

080015c4 <IOL_adc_get>:

uint16_t IOL_adc_get()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&command.adc_get_cmd.adc_handle);
 80015ca:	480b      	ldr	r0, [pc, #44]	; (80015f8 <IOL_adc_get+0x34>)
 80015cc:	f000 fe5e 	bl	800228c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&command.adc_get_cmd.adc_handle, HAL_MAX_DELAY);
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <IOL_adc_get+0x34>)
 80015d6:	f000 ff07 	bl	80023e8 <HAL_ADC_PollForConversion>
	uint16_t ret = HAL_ADC_GetValue(&command.adc_get_cmd.adc_handle);
 80015da:	4807      	ldr	r0, [pc, #28]	; (80015f8 <IOL_adc_get+0x34>)
 80015dc:	f000 fffe 	bl	80025dc <HAL_ADC_GetValue>
 80015e0:	4603      	mov	r3, r0
 80015e2:	80fb      	strh	r3, [r7, #6]
	printf("\nADC Value = %d\n\n", (int)ret);
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	4619      	mov	r1, r3
 80015e8:	4804      	ldr	r0, [pc, #16]	; (80015fc <IOL_adc_get+0x38>)
 80015ea:	f004 f861 	bl	80056b0 <iprintf>
	return ret;
 80015ee:	88fb      	ldrh	r3, [r7, #6]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	2000067c 	.word	0x2000067c
 80015fc:	08007a18 	.word	0x08007a18

08001600 <IOL_res_calc>:

void IOL_res_calc()
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
//	printf("Entering Res Calc Function\n");
	uint16_t adc = IOL_adc_get();
 8001606:	f7ff ffdd 	bl	80015c4 <IOL_adc_get>
 800160a:	4603      	mov	r3, r0
 800160c:	81fb      	strh	r3, [r7, #14]
	float voltage = remap(adc);
 800160e:	89fb      	ldrh	r3, [r7, #14]
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f865 	bl	80016e0 <remap>
 8001616:	60b8      	str	r0, [r7, #8]
	printf("ADC to voltage: %f\n", voltage);
 8001618:	68b8      	ldr	r0, [r7, #8]
 800161a:	f7fe ff0f 	bl	800043c <__aeabi_f2d>
 800161e:	4603      	mov	r3, r0
 8001620:	460c      	mov	r4, r1
 8001622:	461a      	mov	r2, r3
 8001624:	4623      	mov	r3, r4
 8001626:	482a      	ldr	r0, [pc, #168]	; (80016d0 <IOL_res_calc+0xd0>)
 8001628:	f004 f842 	bl	80056b0 <iprintf>
	if(voltage)
 800162c:	f04f 0100 	mov.w	r1, #0
 8001630:	68b8      	ldr	r0, [r7, #8]
 8001632:	f7ff fd25 	bl	8001080 <__aeabi_fcmpeq>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d139      	bne.n	80016b0 <IOL_res_calc+0xb0>
	{
		float R2 = R1 * ( 1 / ((3.3 / voltage) - 1));
 800163c:	68b8      	ldr	r0, [r7, #8]
 800163e:	f7fe fefd 	bl	800043c <__aeabi_f2d>
 8001642:	4603      	mov	r3, r0
 8001644:	460c      	mov	r4, r1
 8001646:	461a      	mov	r2, r3
 8001648:	4623      	mov	r3, r4
 800164a:	a11d      	add	r1, pc, #116	; (adr r1, 80016c0 <IOL_res_calc+0xc0>)
 800164c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001650:	f7ff f876 	bl	8000740 <__aeabi_ddiv>
 8001654:	4603      	mov	r3, r0
 8001656:	460c      	mov	r4, r1
 8001658:	4618      	mov	r0, r3
 800165a:	4621      	mov	r1, r4
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <IOL_res_calc+0xd4>)
 8001662:	f7fe fd8b 	bl	800017c <__aeabi_dsub>
 8001666:	4603      	mov	r3, r0
 8001668:	460c      	mov	r4, r1
 800166a:	461a      	mov	r2, r3
 800166c:	4623      	mov	r3, r4
 800166e:	f04f 0000 	mov.w	r0, #0
 8001672:	4918      	ldr	r1, [pc, #96]	; (80016d4 <IOL_res_calc+0xd4>)
 8001674:	f7ff f864 	bl	8000740 <__aeabi_ddiv>
 8001678:	4603      	mov	r3, r0
 800167a:	460c      	mov	r4, r1
 800167c:	4618      	mov	r0, r3
 800167e:	4621      	mov	r1, r4
 8001680:	a311      	add	r3, pc, #68	; (adr r3, 80016c8 <IOL_res_calc+0xc8>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7fe ff31 	bl	80004ec <__aeabi_dmul>
 800168a:	4603      	mov	r3, r0
 800168c:	460c      	mov	r4, r1
 800168e:	4618      	mov	r0, r3
 8001690:	4621      	mov	r1, r4
 8001692:	f7ff fa03 	bl	8000a9c <__aeabi_d2f>
 8001696:	4603      	mov	r3, r0
 8001698:	607b      	str	r3, [r7, #4]
		printf("Resistance = %f\n", R2);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7fe fece 	bl	800043c <__aeabi_f2d>
 80016a0:	4603      	mov	r3, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	461a      	mov	r2, r3
 80016a6:	4623      	mov	r3, r4
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <IOL_res_calc+0xd8>)
 80016aa:	f004 f801 	bl	80056b0 <iprintf>
	else
	{
		printf("Resistance = 0\n");
	}

}
 80016ae:	e002      	b.n	80016b6 <IOL_res_calc+0xb6>
		printf("Resistance = 0\n");
 80016b0:	480a      	ldr	r0, [pc, #40]	; (80016dc <IOL_res_calc+0xdc>)
 80016b2:	f004 f885 	bl	80057c0 <puts>
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd90      	pop	{r4, r7, pc}
 80016be:	bf00      	nop
 80016c0:	66666666 	.word	0x66666666
 80016c4:	400a6666 	.word	0x400a6666
 80016c8:	00000000 	.word	0x00000000
 80016cc:	40c35b00 	.word	0x40c35b00
 80016d0:	08007a2c 	.word	0x08007a2c
 80016d4:	3ff00000 	.word	0x3ff00000
 80016d8:	08007a40 	.word	0x08007a40
 80016dc:	08007a54 	.word	0x08007a54

080016e0 <remap>:


float remap(uint16_t i)
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
  float input_start = 0;
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
  float input_end = ADC_RES-1;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <remap+0x80>)
 80016f2:	61bb      	str	r3, [r7, #24]
  float output_start = 0.0;
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  float output_end = 3.3;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <remap+0x84>)
 80016fc:	613b      	str	r3, [r7, #16]
  float slope = 0.0;
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]

  float output = 0;
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]

  slope = (output_end - output_start) / (input_end - input_start);
 800170a:	6979      	ldr	r1, [r7, #20]
 800170c:	6938      	ldr	r0, [r7, #16]
 800170e:	f7ff fa19 	bl	8000b44 <__aeabi_fsub>
 8001712:	4603      	mov	r3, r0
 8001714:	461c      	mov	r4, r3
 8001716:	69f9      	ldr	r1, [r7, #28]
 8001718:	69b8      	ldr	r0, [r7, #24]
 800171a:	f7ff fa13 	bl	8000b44 <__aeabi_fsub>
 800171e:	4603      	mov	r3, r0
 8001720:	4619      	mov	r1, r3
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff fbcc 	bl	8000ec0 <__aeabi_fdiv>
 8001728:	4603      	mov	r3, r0
 800172a:	60fb      	str	r3, [r7, #12]
  output = (output_start + slope * (i -input_start));
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fabe 	bl	8000cb0 <__aeabi_i2f>
 8001734:	4603      	mov	r3, r0
 8001736:	69f9      	ldr	r1, [r7, #28]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fa03 	bl	8000b44 <__aeabi_fsub>
 800173e:	4603      	mov	r3, r0
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fb08 	bl	8000d58 <__aeabi_fmul>
 8001748:	4603      	mov	r3, r0
 800174a:	4619      	mov	r1, r3
 800174c:	6978      	ldr	r0, [r7, #20]
 800174e:	f7ff f9fb 	bl	8000b48 <__addsf3>
 8001752:	4603      	mov	r3, r0
 8001754:	60bb      	str	r3, [r7, #8]

  return output;
 8001756:	68bb      	ldr	r3, [r7, #8]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3724      	adds	r7, #36	; 0x24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	457ff000 	.word	0x457ff000
 8001764:	40533333 	.word	0x40533333

08001768 <LL_exec>:


#include "LL.h"

int LL_exec()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	switch(command.cmd_no)
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <LL_exec+0x54>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3b01      	subs	r3, #1
 8001772:	2b03      	cmp	r3, #3
 8001774:	d81c      	bhi.n	80017b0 <LL_exec+0x48>
 8001776:	a201      	add	r2, pc, #4	; (adr r2, 800177c <LL_exec+0x14>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	0800178d 	.word	0x0800178d
 8001780:	08001799 	.word	0x08001799
 8001784:	080017a5 	.word	0x080017a5
 8001788:	080017ab 	.word	0x080017ab
	{
	case COMMAND_SET_RES:
	{
		IOL_set_res();
 800178c:	f7ff fe8e 	bl	80014ac <IOL_set_res>
		printf("Executed COMMAND_SET_RES\n");
 8001790:	480b      	ldr	r0, [pc, #44]	; (80017c0 <LL_exec+0x58>)
 8001792:	f004 f815 	bl	80057c0 <puts>
	}break;
 8001796:	e00e      	b.n	80017b6 <LL_exec+0x4e>
	case COMMAND_I2C_SCAN:
	{
		IOL_i2c_scan();
 8001798:	f7ff fed4 	bl	8001544 <IOL_i2c_scan>
		printf("Executed COMMAND_SET_RES\n");
 800179c:	4808      	ldr	r0, [pc, #32]	; (80017c0 <LL_exec+0x58>)
 800179e:	f004 f80f 	bl	80057c0 <puts>
	}break;
 80017a2:	e008      	b.n	80017b6 <LL_exec+0x4e>
	case COMMAND_ADC_GET:
	{
		IOL_adc_get();
 80017a4:	f7ff ff0e 	bl	80015c4 <IOL_adc_get>
	}break;
 80017a8:	e005      	b.n	80017b6 <LL_exec+0x4e>
	case COMMAND_RES_CALC:
	{
		IOL_res_calc();
 80017aa:	f7ff ff29 	bl	8001600 <IOL_res_calc>
	}break;
 80017ae:	e002      	b.n	80017b6 <LL_exec+0x4e>
	default:
	{
		printf("Dunno 3\n");
 80017b0:	4804      	ldr	r0, [pc, #16]	; (80017c4 <LL_exec+0x5c>)
 80017b2:	f004 f805 	bl	80057c0 <puts>
	}
	}
	return 0;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000618 	.word	0x20000618
 80017c0:	08007a64 	.word	0x08007a64
 80017c4:	08007a80 	.word	0x08007a80

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ca:	b0a1      	sub	sp, #132	; 0x84
 80017cc:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ce:	f000 fc23 	bl	8002018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d2:	f000 f897 	bl	8001904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d6:	f000 f987 	bl	8001ae8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017da:	f000 f95b 	bl	8001a94 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80017de:	f000 f92b 	bl	8001a38 <MX_I2C2_Init>
  MX_ADC1_Init();
 80017e2:	f000 f8eb 	bl	80019bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	int i;
	int error;

	for(i = 0; i < LINE_BUFLEN; i++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	e008      	b.n	80017fe <main+0x36>
		input.line_rx_buffer[i] = 0;
 80017ec:	4a39      	ldr	r2, [pc, #228]	; (80018d4 <main+0x10c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	3301      	adds	r3, #1
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LINE_BUFLEN; i++)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3301      	adds	r3, #1
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001804:	dbf2      	blt.n	80017ec <main+0x24>

	// Reset some stuff
	input.byte_buffer_rx[0] = 0;
 8001806:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <main+0x10c>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
	input.char_counter = 0;
 800180c:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <main+0x10c>)
 800180e:	2200      	movs	r2, #0
 8001810:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	input.command_execute_flag = FALSE;
 8001814:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <main+0x10c>)
 8001816:	2200      	movs	r2, #0
 8001818:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	debug_enable = FALSE;
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <main+0x110>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
	command.i2c_scan_cmd.i2c_handle = hi2c2;
 8001822:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <main+0x114>)
 8001824:	4a2e      	ldr	r2, [pc, #184]	; (80018e0 <main+0x118>)
 8001826:	3304      	adds	r3, #4
 8001828:	4611      	mov	r1, r2
 800182a:	2254      	movs	r2, #84	; 0x54
 800182c:	4618      	mov	r0, r3
 800182e:	f003 fadd 	bl	8004dec <memcpy>
	command.adc_get_cmd.adc_handle = hadc1;
 8001832:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <main+0x114>)
 8001834:	4a2b      	ldr	r2, [pc, #172]	; (80018e4 <main+0x11c>)
 8001836:	f103 0464 	add.w	r4, r3, #100	; 0x64
 800183a:	4615      	mov	r5, r2
 800183c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800183e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001844:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001848:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 800184c:	2201      	movs	r2, #1
 800184e:	4921      	ldr	r1, [pc, #132]	; (80018d4 <main+0x10c>)
 8001850:	4825      	ldr	r0, [pc, #148]	; (80018e8 <main+0x120>)
 8001852:	f002 ff3c 	bl	80046ce <HAL_UART_Receive_IT>

	FL_debug("starting the main function");
 8001856:	4825      	ldr	r0, [pc, #148]	; (80018ec <main+0x124>)
 8001858:	f7ff fe16 	bl	8001488 <FL_debug>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == TRUE)
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <main+0x10c>)
 800185e:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8001862:	2bff      	cmp	r3, #255	; 0xff
 8001864:	d1fa      	bne.n	800185c <main+0x94>
	  {
		  HAL_GPIO_TogglePin(DebugLed_GPIO_Port, DebugLed_Pin);
 8001866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800186a:	4821      	ldr	r0, [pc, #132]	; (80018f0 <main+0x128>)
 800186c:	f001 fb3c 	bl	8002ee8 <HAL_GPIO_TogglePin>
		  FL_debug("");
 8001870:	4820      	ldr	r0, [pc, #128]	; (80018f4 <main+0x12c>)
 8001872:	f7ff fe09 	bl	8001488 <FL_debug>
		  input.command_execute_flag = FALSE;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <main+0x10c>)
 8001878:	2200      	movs	r2, #0
 800187a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		  error = FL_uart_decode();
 800187e:	f7ff fc6f 	bl	8001160 <FL_uart_decode>
 8001882:	6038      	str	r0, [r7, #0]

		  if(error)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d004      	beq.n	8001894 <main+0xcc>
		  {
			  FL_error_handler("main.c", "main", "FL_uart_decode() returned an error\n");
 800188a:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <main+0x130>)
 800188c:	491b      	ldr	r1, [pc, #108]	; (80018fc <main+0x134>)
 800188e:	481c      	ldr	r0, [pc, #112]	; (8001900 <main+0x138>)
 8001890:	f7ff fde2 	bl	8001458 <FL_error_handler>
//		  printf("back in main.c\n");
//		  printf("Command set_res contents:\n");
//		  printf("\tdigipot   : %d\n", command.set_res_cmd.digipot_no);
//		  printf("\tresistance: %d\n", command.set_res_cmd.res);

		  LL_exec();
 8001894:	f7ff ff68 	bl	8001768 <LL_exec>
		  FL_clean(hi2c2, hadc1);
 8001898:	4e11      	ldr	r6, [pc, #68]	; (80018e0 <main+0x118>)
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <main+0x11c>)
 800189c:	ac11      	add	r4, sp, #68	; 0x44
 800189e:	461d      	mov	r5, r3
 80018a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018b0:	4668      	mov	r0, sp
 80018b2:	f106 0310 	add.w	r3, r6, #16
 80018b6:	2244      	movs	r2, #68	; 0x44
 80018b8:	4619      	mov	r1, r3
 80018ba:	f003 fa97 	bl	8004dec <memcpy>
 80018be:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80018c2:	f7ff fc0f 	bl	80010e4 <FL_clean>
		  HAL_GPIO_TogglePin(DebugLed_GPIO_Port, DebugLed_Pin);
 80018c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ca:	4809      	ldr	r0, [pc, #36]	; (80018f0 <main+0x128>)
 80018cc:	f001 fb0c 	bl	8002ee8 <HAL_GPIO_TogglePin>
	  if(input.command_execute_flag == TRUE)
 80018d0:	e7c4      	b.n	800185c <main+0x94>
 80018d2:	bf00      	nop
 80018d4:	20000208 	.word	0x20000208
 80018d8:	20000b64 	.word	0x20000b64
 80018dc:	20000618 	.word	0x20000618
 80018e0:	20000f68 	.word	0x20000f68
 80018e4:	20000fbc 	.word	0x20000fbc
 80018e8:	20000fec 	.word	0x20000fec
 80018ec:	08007a88 	.word	0x08007a88
 80018f0:	40010c00 	.word	0x40010c00
 80018f4:	08007aa4 	.word	0x08007aa4
 80018f8:	08007aa8 	.word	0x08007aa8
 80018fc:	08007acc 	.word	0x08007acc
 8001900:	08007ad4 	.word	0x08007ad4

08001904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b094      	sub	sp, #80	; 0x50
 8001908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800190a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190e:	2228      	movs	r2, #40	; 0x28
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f003 fa75 	bl	8004e02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001934:	2301      	movs	r3, #1
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001942:	2301      	movs	r3, #1
 8001944:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001946:	2302      	movs	r3, #2
 8001948:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800194a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800194e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001950:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001954:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195a:	4618      	mov	r0, r3
 800195c:	f002 f84a 	bl	80039f4 <HAL_RCC_OscConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001966:	f000 f91d 	bl	8001ba4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800196a:	230f      	movs	r3, #15
 800196c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800197a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2102      	movs	r1, #2
 8001986:	4618      	mov	r0, r3
 8001988:	f002 fab4 	bl	8003ef4 <HAL_RCC_ClockConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001992:	f000 f907 	bl	8001ba4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001996:	2302      	movs	r3, #2
 8001998:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800199a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800199e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 fc42 	bl	800422c <HAL_RCCEx_PeriphCLKConfig>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80019ae:	f000 f8f9 	bl	8001ba4 <Error_Handler>
  }
}
 80019b2:	bf00      	nop
 80019b4:	3750      	adds	r7, #80	; 0x50
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <MX_ADC1_Init+0x74>)
 80019ce:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <MX_ADC1_Init+0x78>)
 80019d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <MX_ADC1_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <MX_ADC1_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_ADC1_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <MX_ADC1_Init+0x74>)
 80019e6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <MX_ADC1_Init+0x74>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80019f2:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_ADC1_Init+0x74>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019f8:	480d      	ldr	r0, [pc, #52]	; (8001a30 <MX_ADC1_Init+0x74>)
 80019fa:	f000 fb6f 	bl	80020dc <HAL_ADC_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a04:	f000 f8ce 	bl	8001ba4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a08:	2309      	movs	r3, #9
 8001a0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_ADC1_Init+0x74>)
 8001a1a:	f000 fdeb 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a24:	f000 f8be 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000fbc 	.word	0x20000fbc
 8001a34:	40012400 	.word	0x40012400

08001a38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <MX_I2C2_Init+0x50>)
 8001a3e:	4a13      	ldr	r2, [pc, #76]	; (8001a8c <MX_I2C2_Init+0x54>)
 8001a40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <MX_I2C2_Init+0x50>)
 8001a44:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <MX_I2C2_Init+0x58>)
 8001a46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MX_I2C2_Init+0x50>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <MX_I2C2_Init+0x50>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <MX_I2C2_Init+0x50>)
 8001a56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <MX_I2C2_Init+0x50>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <MX_I2C2_Init+0x50>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <MX_I2C2_Init+0x50>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <MX_I2C2_Init+0x50>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a74:	4804      	ldr	r0, [pc, #16]	; (8001a88 <MX_I2C2_Init+0x50>)
 8001a76:	f001 fa51 	bl	8002f1c <HAL_I2C_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a80:	f000 f890 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000f68 	.word	0x20000f68
 8001a8c:	40005800 	.word	0x40005800
 8001a90:	000186a0 	.word	0x000186a0

08001a94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <MX_USART2_UART_Init+0x50>)
 8001a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001acc:	f002 fd20 	bl	8004510 <HAL_UART_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ad6:	f000 f865 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000fec 	.word	0x20000fec
 8001ae4:	40004400 	.word	0x40004400

08001ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <MX_GPIO_Init+0x90>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <MX_GPIO_Init+0x90>)
 8001b02:	f043 0320 	orr.w	r3, r3, #32
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <MX_GPIO_Init+0x90>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <MX_GPIO_Init+0x90>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <MX_GPIO_Init+0x90>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <MX_GPIO_Init+0x90>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_GPIO_Init+0x90>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a11      	ldr	r2, [pc, #68]	; (8001b78 <MX_GPIO_Init+0x90>)
 8001b32:	f043 0308 	orr.w	r3, r3, #8
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_GPIO_Init+0x90>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DebugLed_GPIO_Port, DebugLed_Pin, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4a:	480c      	ldr	r0, [pc, #48]	; (8001b7c <MX_GPIO_Init+0x94>)
 8001b4c:	f001 f9b4 	bl	8002eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DebugLed_Pin */
  GPIO_InitStruct.Pin = DebugLed_Pin;
 8001b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DebugLed_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	4619      	mov	r1, r3
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <MX_GPIO_Init+0x94>)
 8001b6a:	f001 f84b 	bl	8002c04 <HAL_GPIO_Init>

}
 8001b6e:	bf00      	nop
 8001b70:	3720      	adds	r7, #32
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010c00 	.word	0x40010c00

08001b80 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8001b88:	1d39      	adds	r1, r7, #4
 8001b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <__io_putchar+0x20>)
 8001b92:	f002 fd0a 	bl	80045aa <HAL_UART_Transmit>
	return ch;												//Return the character
 8001b96:	687b      	ldr	r3, [r7, #4]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000fec 	.word	0x20000fec

08001ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6193      	str	r3, [r2, #24]
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	61d3      	str	r3, [r2, #28]
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_MspInit+0x5c>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_MspInit+0x60>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <HAL_MspInit+0x60>)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010000 	.word	0x40010000

08001c14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <HAL_ADC_MspInit+0x6c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d121      	bne.n	8001c78 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <HAL_ADC_MspInit+0x70>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <HAL_ADC_MspInit+0x70>)
 8001c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_ADC_MspInit+0x70>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_ADC_MspInit+0x70>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <HAL_ADC_MspInit+0x70>)
 8001c52:	f043 0308 	orr.w	r3, r3, #8
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_ADC_MspInit+0x70>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c64:	2302      	movs	r3, #2
 8001c66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	4619      	mov	r1, r3
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <HAL_ADC_MspInit+0x74>)
 8001c74:	f000 ffc6 	bl	8002c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c78:	bf00      	nop
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40012400 	.word	0x40012400
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40010c00 	.word	0x40010c00

08001c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <HAL_I2C_MspInit+0x74>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d124      	bne.n	8001cf6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_I2C_MspInit+0x78>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <HAL_I2C_MspInit+0x78>)
 8001cb2:	f043 0308 	orr.w	r3, r3, #8
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_I2C_MspInit+0x78>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cc4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cca:	2312      	movs	r3, #18
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480b      	ldr	r0, [pc, #44]	; (8001d08 <HAL_I2C_MspInit+0x7c>)
 8001cda:	f000 ff93 	bl	8002c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_I2C_MspInit+0x78>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <HAL_I2C_MspInit+0x78>)
 8001ce4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ce8:	61d3      	str	r3, [r2, #28]
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_I2C_MspInit+0x78>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3720      	adds	r7, #32
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40005800 	.word	0x40005800
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40010c00 	.word	0x40010c00

08001d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <HAL_UART_MspInit+0x98>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d137      	bne.n	8001d9c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_UART_MspInit+0x9c>)
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <HAL_UART_MspInit+0x9c>)
 8001d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d36:	61d3      	str	r3, [r2, #28]
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_UART_MspInit+0x9c>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_UART_MspInit+0x9c>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <HAL_UART_MspInit+0x9c>)
 8001d4a:	f043 0304 	orr.w	r3, r3, #4
 8001d4e:	6193      	str	r3, [r2, #24]
 8001d50:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_UART_MspInit+0x9c>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480f      	ldr	r0, [pc, #60]	; (8001dac <HAL_UART_MspInit+0xa0>)
 8001d70:	f000 ff48 	bl	8002c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d74:	2308      	movs	r3, #8
 8001d76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d80:	f107 0310 	add.w	r3, r7, #16
 8001d84:	4619      	mov	r1, r3
 8001d86:	4809      	ldr	r0, [pc, #36]	; (8001dac <HAL_UART_MspInit+0xa0>)
 8001d88:	f000 ff3c 	bl	8002c04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2026      	movs	r0, #38	; 0x26
 8001d92:	f000 fe8a 	bl	8002aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d96:	2026      	movs	r0, #38	; 0x26
 8001d98:	f000 fea3 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d9c:	bf00      	nop
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40004400 	.word	0x40004400
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010800 	.word	0x40010800

08001db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <HardFault_Handler+0x4>

08001dc2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <MemManage_Handler+0x4>

08001dc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <BusFault_Handler+0x4>

08001dce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <UsageFault_Handler+0x4>

08001dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dfc:	f000 f952 	bl	80020a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	char uart_char = USART2->DR;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <USART2_IRQHandler+0x70>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	71fb      	strb	r3, [r7, #7]
	//This way we ignore the '\n' character
	if(uart_char != LINE_FEED)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	2b0a      	cmp	r3, #10
 8001e14:	d026      	beq.n	8001e64 <USART2_IRQHandler+0x60>
	{
		//Check for CR and LF characters
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	2b0d      	cmp	r3, #13
 8001e1a:	d002      	beq.n	8001e22 <USART2_IRQHandler+0x1e>
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8001e20:	d10e      	bne.n	8001e40 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <USART2_IRQHandler+0x74>)
 8001e24:	22ff      	movs	r2, #255	; 0xff
 8001e26:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8001e2a:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <USART2_IRQHandler+0x74>)
 8001e2c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e30:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <USART2_IRQHandler+0x74>)
 8001e32:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <USART2_IRQHandler+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001e3e:	e011      	b.n	8001e64 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8001e40:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <USART2_IRQHandler+0x74>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <USART2_IRQHandler+0x74>)
 8001e4a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <USART2_IRQHandler+0x74>)
 8001e50:	4413      	add	r3, r2
 8001e52:	79fa      	ldrb	r2, [r7, #7]
 8001e54:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <USART2_IRQHandler+0x74>)
 8001e58:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	4a06      	ldr	r2, [pc, #24]	; (8001e78 <USART2_IRQHandler+0x74>)
 8001e60:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e64:	4805      	ldr	r0, [pc, #20]	; (8001e7c <USART2_IRQHandler+0x78>)
 8001e66:	f002 fc87 	bl	8004778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40004400 	.word	0x40004400
 8001e78:	20000208 	.word	0x20000208
 8001e7c:	20000fec 	.word	0x20000fec

08001e80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e00a      	b.n	8001ea8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e92:	f3af 8000 	nop.w
 8001e96:	4601      	mov	r1, r0
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	60ba      	str	r2, [r7, #8]
 8001e9e:	b2ca      	uxtb	r2, r1
 8001ea0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	dbf0      	blt.n	8001e92 <_read+0x12>
	}

return len;
 8001eb0:	687b      	ldr	r3, [r7, #4]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e009      	b.n	8001ee0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	60ba      	str	r2, [r7, #8]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fe53 	bl	8001b80 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	dbf1      	blt.n	8001ecc <_write+0x12>
	}
	return len;
 8001ee8:	687b      	ldr	r3, [r7, #4]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <_close>:

int _close(int file)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
	return -1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f18:	605a      	str	r2, [r3, #4]
	return 0;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <_isatty>:

int _isatty(int file)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
	return 0;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
	...

08001f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <_sbrk+0x5c>)
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <_sbrk+0x60>)
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <_sbrk+0x64>)
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <_sbrk+0x68>)
 8001f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <_sbrk+0x64>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d207      	bcs.n	8001f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f84:	f002 ff08 	bl	8004d98 <__errno>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	230c      	movs	r3, #12
 8001f8c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f92:	e009      	b.n	8001fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <_sbrk+0x64>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <_sbrk+0x64>)
 8001fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20005000 	.word	0x20005000
 8001fb4:	00000400 	.word	0x00000400
 8001fb8:	200001f8 	.word	0x200001f8
 8001fbc:	20001038 	.word	0x20001038

08001fc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001fcc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001fce:	e003      	b.n	8001fd8 <LoopCopyDataInit>

08001fd0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001fd2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001fd4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001fd6:	3104      	adds	r1, #4

08001fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001fd8:	480a      	ldr	r0, [pc, #40]	; (8002004 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001fdc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001fde:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001fe0:	d3f6      	bcc.n	8001fd0 <CopyDataInit>
  ldr r2, =_sbss
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001fe4:	e002      	b.n	8001fec <LoopFillZerobss>

08001fe6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001fe8:	f842 3b04 	str.w	r3, [r2], #4

08001fec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001fee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ff0:	d3f9      	bcc.n	8001fe6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ff2:	f7ff ffe5 	bl	8001fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ff6:	f002 fed5 	bl	8004da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ffa:	f7ff fbe5 	bl	80017c8 <main>
  bx lr
 8001ffe:	4770      	bx	lr
  ldr r3, =_sidata
 8002000:	08007de8 	.word	0x08007de8
  ldr r0, =_sdata
 8002004:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002008:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 800200c:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002010:	20001034 	.word	0x20001034

08002014 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC1_2_IRQHandler>
	...

08002018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <HAL_Init+0x28>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a07      	ldr	r2, [pc, #28]	; (8002040 <HAL_Init+0x28>)
 8002022:	f043 0310 	orr.w	r3, r3, #16
 8002026:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002028:	2003      	movs	r0, #3
 800202a:	f000 fd33 	bl	8002a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202e:	2000      	movs	r0, #0
 8002030:	f000 f808 	bl	8002044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002034:	f7ff fdbc 	bl	8001bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40022000 	.word	0x40022000

08002044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_InitTick+0x54>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_InitTick+0x58>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205a:	fbb3 f3f1 	udiv	r3, r3, r1
 800205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002062:	4618      	mov	r0, r3
 8002064:	f000 fd4b 	bl	8002afe <HAL_SYSTICK_Config>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e00e      	b.n	8002090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b0f      	cmp	r3, #15
 8002076:	d80a      	bhi.n	800208e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002078:	2200      	movs	r2, #0
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	f000 fd13 	bl	8002aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002084:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <HAL_InitTick+0x5c>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e000      	b.n	8002090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000000 	.word	0x20000000
 800209c:	20000008 	.word	0x20000008
 80020a0:	20000004 	.word	0x20000004

080020a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_IncTick+0x1c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_IncTick+0x20>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	4a03      	ldr	r2, [pc, #12]	; (80020c4 <HAL_IncTick+0x20>)
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	20000008 	.word	0x20000008
 80020c4:	2000102c 	.word	0x2000102c

080020c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;
 80020cc:	4b02      	ldr	r3, [pc, #8]	; (80020d8 <HAL_GetTick+0x10>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	2000102c 	.word	0x2000102c

080020dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e0be      	b.n	800227c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	d109      	bne.n	8002120 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fd7a 	bl	8001c14 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 fbb1 	bl	8002888 <ADC_ConversionStop_Disable>
 8002126:	4603      	mov	r3, r0
 8002128:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	f040 8099 	bne.w	800226a <HAL_ADC_Init+0x18e>
 8002138:	7dfb      	ldrb	r3, [r7, #23]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f040 8095 	bne.w	800226a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002148:	f023 0302 	bic.w	r3, r3, #2
 800214c:	f043 0202 	orr.w	r2, r3, #2
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800215c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7b1b      	ldrb	r3, [r3, #12]
 8002162:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002164:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	4313      	orrs	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002174:	d003      	beq.n	800217e <HAL_ADC_Init+0xa2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d102      	bne.n	8002184 <HAL_ADC_Init+0xa8>
 800217e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002182:	e000      	b.n	8002186 <HAL_ADC_Init+0xaa>
 8002184:	2300      	movs	r3, #0
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7d1b      	ldrb	r3, [r3, #20]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d119      	bne.n	80021c8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7b1b      	ldrb	r3, [r3, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	035a      	lsls	r2, r3, #13
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	e00b      	b.n	80021c8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	f043 0220 	orr.w	r2, r3, #32
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	f043 0201 	orr.w	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	430a      	orrs	r2, r1
 80021da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	4b28      	ldr	r3, [pc, #160]	; (8002284 <HAL_ADC_Init+0x1a8>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	68b9      	ldr	r1, [r7, #8]
 80021ec:	430b      	orrs	r3, r1
 80021ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f8:	d003      	beq.n	8002202 <HAL_ADC_Init+0x126>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d104      	bne.n	800220c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	3b01      	subs	r3, #1
 8002208:	051b      	lsls	r3, r3, #20
 800220a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	430a      	orrs	r2, r1
 800221e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <HAL_ADC_Init+0x1ac>)
 8002228:	4013      	ands	r3, r2
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	429a      	cmp	r2, r3
 800222e:	d10b      	bne.n	8002248 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	f023 0303 	bic.w	r3, r3, #3
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002246:	e018      	b.n	800227a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	f023 0312 	bic.w	r3, r3, #18
 8002250:	f043 0210 	orr.w	r2, r3, #16
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	f043 0201 	orr.w	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002268:	e007      	b.n	800227a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	f043 0210 	orr.w	r2, r3, #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800227a:	7dfb      	ldrb	r3, [r7, #23]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	ffe1f7fd 	.word	0xffe1f7fd
 8002288:	ff1f0efe 	.word	0xff1f0efe

0800228c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_Start+0x1a>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e098      	b.n	80023d8 <HAL_ADC_Start+0x14c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fa98 	bl	80027e4 <ADC_Enable>
 80022b4:	4603      	mov	r3, r0
 80022b6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f040 8087 	bne.w	80023ce <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a41      	ldr	r2, [pc, #260]	; (80023e0 <HAL_ADC_Start+0x154>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d105      	bne.n	80022ea <HAL_ADC_Start+0x5e>
 80022de:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <HAL_ADC_Start+0x158>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d115      	bne.n	8002316 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002300:	2b00      	cmp	r3, #0
 8002302:	d026      	beq.n	8002352 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800230c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002314:	e01d      	b.n	8002352 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a2f      	ldr	r2, [pc, #188]	; (80023e4 <HAL_ADC_Start+0x158>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d004      	beq.n	8002336 <HAL_ADC_Start+0xaa>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a2b      	ldr	r2, [pc, #172]	; (80023e0 <HAL_ADC_Start+0x154>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d10d      	bne.n	8002352 <HAL_ADC_Start+0xc6>
 8002336:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <HAL_ADC_Start+0x158>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800234a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	f023 0206 	bic.w	r2, r3, #6
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	62da      	str	r2, [r3, #44]	; 0x2c
 800236a:	e002      	b.n	8002372 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f06f 0202 	mvn.w	r2, #2
 8002382:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800238e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002392:	d113      	bne.n	80023bc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002398:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <HAL_ADC_Start+0x154>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d105      	bne.n	80023aa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_ADC_Start+0x158>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d108      	bne.n	80023bc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	e00c      	b.n	80023d6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	e003      	b.n	80023d6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40012800 	.word	0x40012800
 80023e4:	40012400 	.word	0x40012400

080023e8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80023fe:	f7ff fe63 	bl	80020c8 <HAL_GetTick>
 8002402:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	f043 0220 	orr.w	r2, r3, #32
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e0c8      	b.n	80025bc <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d12a      	bne.n	800248e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002442:	2b00      	cmp	r3, #0
 8002444:	d123      	bne.n	800248e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002446:	e01a      	b.n	800247e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244e:	d016      	beq.n	800247e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <HAL_ADC_PollForConversion+0x7e>
 8002456:	f7ff fe37 	bl	80020c8 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d20b      	bcs.n	800247e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	f043 0204 	orr.w	r2, r3, #4
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e09e      	b.n	80025bc <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0dd      	beq.n	8002448 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800248c:	e06c      	b.n	8002568 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800248e:	4b4d      	ldr	r3, [pc, #308]	; (80025c4 <HAL_ADC_PollForConversion+0x1dc>)
 8002490:	681c      	ldr	r4, [r3, #0]
 8002492:	2002      	movs	r0, #2
 8002494:	f001 ff80 	bl	8004398 <HAL_RCCEx_GetPeriphCLKFreq>
 8002498:	4603      	mov	r3, r0
 800249a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6919      	ldr	r1, [r3, #16]
 80024a4:	4b48      	ldr	r3, [pc, #288]	; (80025c8 <HAL_ADC_PollForConversion+0x1e0>)
 80024a6:	400b      	ands	r3, r1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d118      	bne.n	80024de <HAL_ADC_PollForConversion+0xf6>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68d9      	ldr	r1, [r3, #12]
 80024b2:	4b46      	ldr	r3, [pc, #280]	; (80025cc <HAL_ADC_PollForConversion+0x1e4>)
 80024b4:	400b      	ands	r3, r1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d111      	bne.n	80024de <HAL_ADC_PollForConversion+0xf6>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6919      	ldr	r1, [r3, #16]
 80024c0:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <HAL_ADC_PollForConversion+0x1e8>)
 80024c2:	400b      	ands	r3, r1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d108      	bne.n	80024da <HAL_ADC_PollForConversion+0xf2>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68d9      	ldr	r1, [r3, #12]
 80024ce:	4b41      	ldr	r3, [pc, #260]	; (80025d4 <HAL_ADC_PollForConversion+0x1ec>)
 80024d0:	400b      	ands	r3, r1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_ADC_PollForConversion+0xf2>
 80024d6:	2314      	movs	r3, #20
 80024d8:	e020      	b.n	800251c <HAL_ADC_PollForConversion+0x134>
 80024da:	2329      	movs	r3, #41	; 0x29
 80024dc:	e01e      	b.n	800251c <HAL_ADC_PollForConversion+0x134>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6919      	ldr	r1, [r3, #16]
 80024e4:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <HAL_ADC_PollForConversion+0x1e8>)
 80024e6:	400b      	ands	r3, r1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d106      	bne.n	80024fa <HAL_ADC_PollForConversion+0x112>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68d9      	ldr	r1, [r3, #12]
 80024f2:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <HAL_ADC_PollForConversion+0x1ec>)
 80024f4:	400b      	ands	r3, r1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00d      	beq.n	8002516 <HAL_ADC_PollForConversion+0x12e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6919      	ldr	r1, [r3, #16]
 8002500:	4b35      	ldr	r3, [pc, #212]	; (80025d8 <HAL_ADC_PollForConversion+0x1f0>)
 8002502:	400b      	ands	r3, r1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d108      	bne.n	800251a <HAL_ADC_PollForConversion+0x132>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68d9      	ldr	r1, [r3, #12]
 800250e:	4b32      	ldr	r3, [pc, #200]	; (80025d8 <HAL_ADC_PollForConversion+0x1f0>)
 8002510:	400b      	ands	r3, r1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_PollForConversion+0x132>
 8002516:	2354      	movs	r3, #84	; 0x54
 8002518:	e000      	b.n	800251c <HAL_ADC_PollForConversion+0x134>
 800251a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002522:	e01d      	b.n	8002560 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252a:	d016      	beq.n	800255a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <HAL_ADC_PollForConversion+0x15a>
 8002532:	f7ff fdc9 	bl	80020c8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d20b      	bcs.n	800255a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	f043 0204 	orr.w	r2, r3, #4
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e030      	b.n	80025bc <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	3301      	adds	r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	429a      	cmp	r2, r3
 8002566:	d8dd      	bhi.n	8002524 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0212 	mvn.w	r2, #18
 8002570:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002588:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800258c:	d115      	bne.n	80025ba <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002592:	2b00      	cmp	r3, #0
 8002594:	d111      	bne.n	80025ba <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d105      	bne.n	80025ba <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	371c      	adds	r7, #28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd90      	pop	{r4, r7, pc}
 80025c4:	20000000 	.word	0x20000000
 80025c8:	24924924 	.word	0x24924924
 80025cc:	00924924 	.word	0x00924924
 80025d0:	12492492 	.word	0x12492492
 80025d4:	00492492 	.word	0x00492492
 80025d8:	00249249 	.word	0x00249249

080025dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x20>
 8002610:	2302      	movs	r3, #2
 8002612:	e0dc      	b.n	80027ce <HAL_ADC_ConfigChannel+0x1da>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b06      	cmp	r3, #6
 8002622:	d81c      	bhi.n	800265e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	3b05      	subs	r3, #5
 8002636:	221f      	movs	r2, #31
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	4019      	ands	r1, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	3b05      	subs	r3, #5
 8002650:	fa00 f203 	lsl.w	r2, r0, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	635a      	str	r2, [r3, #52]	; 0x34
 800265c:	e03c      	b.n	80026d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d81c      	bhi.n	80026a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	3b23      	subs	r3, #35	; 0x23
 8002678:	221f      	movs	r2, #31
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	4019      	ands	r1, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	3b23      	subs	r3, #35	; 0x23
 8002692:	fa00 f203 	lsl.w	r2, r0, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
 800269e:	e01b      	b.n	80026d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	3b41      	subs	r3, #65	; 0x41
 80026b2:	221f      	movs	r2, #31
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	4019      	ands	r1, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	3b41      	subs	r3, #65	; 0x41
 80026cc:	fa00 f203 	lsl.w	r2, r0, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b09      	cmp	r3, #9
 80026de:	d91c      	bls.n	800271a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68d9      	ldr	r1, [r3, #12]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	3b1e      	subs	r3, #30
 80026f2:	2207      	movs	r2, #7
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	4019      	ands	r1, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6898      	ldr	r0, [r3, #8]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	3b1e      	subs	r3, #30
 800270c:	fa00 f203 	lsl.w	r2, r0, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	e019      	b.n	800274e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6919      	ldr	r1, [r3, #16]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	2207      	movs	r2, #7
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	4019      	ands	r1, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6898      	ldr	r0, [r3, #8]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	fa00 f203 	lsl.w	r2, r0, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b10      	cmp	r3, #16
 8002754:	d003      	beq.n	800275e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800275a:	2b11      	cmp	r3, #17
 800275c:	d132      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d125      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d126      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002784:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b10      	cmp	r3, #16
 800278c:	d11a      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <HAL_ADC_ConfigChannel+0x1e8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	0c9a      	lsrs	r2, r3, #18
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027a4:	e002      	b.n	80027ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f9      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x1b2>
 80027b2:	e007      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	40012400 	.word	0x40012400
 80027dc:	20000000 	.word	0x20000000
 80027e0:	431bde83 	.word	0x431bde83

080027e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d039      	beq.n	8002876 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002812:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <ADC_Enable+0x9c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1b      	ldr	r2, [pc, #108]	; (8002884 <ADC_Enable+0xa0>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	0c9b      	lsrs	r3, r3, #18
 800281e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002820:	e002      	b.n	8002828 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3b01      	subs	r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f9      	bne.n	8002822 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800282e:	f7ff fc4b 	bl	80020c8 <HAL_GetTick>
 8002832:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002834:	e018      	b.n	8002868 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002836:	f7ff fc47 	bl	80020c8 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d911      	bls.n	8002868 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	f043 0210 	orr.w	r2, r3, #16
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	f043 0201 	orr.w	r2, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e007      	b.n	8002878 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b01      	cmp	r3, #1
 8002874:	d1df      	bne.n	8002836 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20000000 	.word	0x20000000
 8002884:	431bde83 	.word	0x431bde83

08002888 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d127      	bne.n	80028f2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0201 	bic.w	r2, r2, #1
 80028b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028b2:	f7ff fc09 	bl	80020c8 <HAL_GetTick>
 80028b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028b8:	e014      	b.n	80028e4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028ba:	f7ff fc05 	bl	80020c8 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d90d      	bls.n	80028e4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	f043 0210 	orr.w	r2, r3, #16
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	f043 0201 	orr.w	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e007      	b.n	80028f4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d0e3      	beq.n	80028ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002918:	4013      	ands	r3, r2
 800291a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800292c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292e:	4a04      	ldr	r2, [pc, #16]	; (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	60d3      	str	r3, [r2, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002948:	4b04      	ldr	r3, [pc, #16]	; (800295c <__NVIC_GetPriorityGrouping+0x18>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	0a1b      	lsrs	r3, r3, #8
 800294e:	f003 0307 	and.w	r3, r3, #7
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	2b00      	cmp	r3, #0
 8002970:	db0b      	blt.n	800298a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	f003 021f 	and.w	r2, r3, #31
 8002978:	4906      	ldr	r1, [pc, #24]	; (8002994 <__NVIC_EnableIRQ+0x34>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	2001      	movs	r0, #1
 8002982:	fa00 f202 	lsl.w	r2, r0, r2
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	e000e100 	.word	0xe000e100

08002998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	6039      	str	r1, [r7, #0]
 80029a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	db0a      	blt.n	80029c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	490c      	ldr	r1, [pc, #48]	; (80029e4 <__NVIC_SetPriority+0x4c>)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	0112      	lsls	r2, r2, #4
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	440b      	add	r3, r1
 80029bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c0:	e00a      	b.n	80029d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4908      	ldr	r1, [pc, #32]	; (80029e8 <__NVIC_SetPriority+0x50>)
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	3b04      	subs	r3, #4
 80029d0:	0112      	lsls	r2, r2, #4
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	440b      	add	r3, r1
 80029d6:	761a      	strb	r2, [r3, #24]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000e100 	.word	0xe000e100
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b089      	sub	sp, #36	; 0x24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f1c3 0307 	rsb	r3, r3, #7
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	bf28      	it	cs
 8002a0a:	2304      	movcs	r3, #4
 8002a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3304      	adds	r3, #4
 8002a12:	2b06      	cmp	r3, #6
 8002a14:	d902      	bls.n	8002a1c <NVIC_EncodePriority+0x30>
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3b03      	subs	r3, #3
 8002a1a:	e000      	b.n	8002a1e <NVIC_EncodePriority+0x32>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	f04f 32ff 	mov.w	r2, #4294967295
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	401a      	ands	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a34:	f04f 31ff 	mov.w	r1, #4294967295
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3e:	43d9      	mvns	r1, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	4313      	orrs	r3, r2
         );
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3724      	adds	r7, #36	; 0x24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a60:	d301      	bcc.n	8002a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00f      	b.n	8002a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a66:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <SysTick_Config+0x40>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a6e:	210f      	movs	r1, #15
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295
 8002a74:	f7ff ff90 	bl	8002998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <SysTick_Config+0x40>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7e:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <SysTick_Config+0x40>)
 8002a80:	2207      	movs	r2, #7
 8002a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	e000e010 	.word	0xe000e010

08002a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ff2d 	bl	80028fc <__NVIC_SetPriorityGrouping>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002abc:	f7ff ff42 	bl	8002944 <__NVIC_GetPriorityGrouping>
 8002ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	6978      	ldr	r0, [r7, #20]
 8002ac8:	f7ff ff90 	bl	80029ec <NVIC_EncodePriority>
 8002acc:	4602      	mov	r2, r0
 8002ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff5f 	bl	8002998 <__NVIC_SetPriority>
}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff35 	bl	8002960 <__NVIC_EnableIRQ>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ffa2 	bl	8002a50 <SysTick_Config>
 8002b0c:	4603      	mov	r3, r0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d005      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2204      	movs	r2, #4
 8002b32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	e051      	b.n	8002bde <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 020e 	bic.w	r2, r2, #14
 8002b48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0201 	bic.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a22      	ldr	r2, [pc, #136]	; (8002be8 <HAL_DMA_Abort_IT+0xd0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d029      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0xa0>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a20      	ldr	r2, [pc, #128]	; (8002bec <HAL_DMA_Abort_IT+0xd4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d022      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x9c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <HAL_DMA_Abort_IT+0xd8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d01a      	beq.n	8002bae <HAL_DMA_Abort_IT+0x96>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <HAL_DMA_Abort_IT+0xdc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d012      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x90>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <HAL_DMA_Abort_IT+0xe0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_DMA_Abort_IT+0x8a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <HAL_DMA_Abort_IT+0xe4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d102      	bne.n	8002b9c <HAL_DMA_Abort_IT+0x84>
 8002b96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b9a:	e00e      	b.n	8002bba <HAL_DMA_Abort_IT+0xa2>
 8002b9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ba0:	e00b      	b.n	8002bba <HAL_DMA_Abort_IT+0xa2>
 8002ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ba6:	e008      	b.n	8002bba <HAL_DMA_Abort_IT+0xa2>
 8002ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bac:	e005      	b.n	8002bba <HAL_DMA_Abort_IT+0xa2>
 8002bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bb2:	e002      	b.n	8002bba <HAL_DMA_Abort_IT+0xa2>
 8002bb4:	2310      	movs	r3, #16
 8002bb6:	e000      	b.n	8002bba <HAL_DMA_Abort_IT+0xa2>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	4a11      	ldr	r2, [pc, #68]	; (8002c00 <HAL_DMA_Abort_IT+0xe8>)
 8002bbc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	4798      	blx	r3
    } 
  }
  return status;
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40020008 	.word	0x40020008
 8002bec:	4002001c 	.word	0x4002001c
 8002bf0:	40020030 	.word	0x40020030
 8002bf4:	40020044 	.word	0x40020044
 8002bf8:	40020058 	.word	0x40020058
 8002bfc:	4002006c 	.word	0x4002006c
 8002c00:	40020000 	.word	0x40020000

08002c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b08b      	sub	sp, #44	; 0x2c
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c12:	2300      	movs	r3, #0
 8002c14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c16:	e127      	b.n	8002e68 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c18:	2201      	movs	r2, #1
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	f040 8116 	bne.w	8002e62 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b12      	cmp	r3, #18
 8002c3c:	d034      	beq.n	8002ca8 <HAL_GPIO_Init+0xa4>
 8002c3e:	2b12      	cmp	r3, #18
 8002c40:	d80d      	bhi.n	8002c5e <HAL_GPIO_Init+0x5a>
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d02b      	beq.n	8002c9e <HAL_GPIO_Init+0x9a>
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d804      	bhi.n	8002c54 <HAL_GPIO_Init+0x50>
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d031      	beq.n	8002cb2 <HAL_GPIO_Init+0xae>
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d01c      	beq.n	8002c8c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c52:	e048      	b.n	8002ce6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d043      	beq.n	8002ce0 <HAL_GPIO_Init+0xdc>
 8002c58:	2b11      	cmp	r3, #17
 8002c5a:	d01b      	beq.n	8002c94 <HAL_GPIO_Init+0x90>
          break;
 8002c5c:	e043      	b.n	8002ce6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c5e:	4a89      	ldr	r2, [pc, #548]	; (8002e84 <HAL_GPIO_Init+0x280>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d026      	beq.n	8002cb2 <HAL_GPIO_Init+0xae>
 8002c64:	4a87      	ldr	r2, [pc, #540]	; (8002e84 <HAL_GPIO_Init+0x280>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d806      	bhi.n	8002c78 <HAL_GPIO_Init+0x74>
 8002c6a:	4a87      	ldr	r2, [pc, #540]	; (8002e88 <HAL_GPIO_Init+0x284>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d020      	beq.n	8002cb2 <HAL_GPIO_Init+0xae>
 8002c70:	4a86      	ldr	r2, [pc, #536]	; (8002e8c <HAL_GPIO_Init+0x288>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01d      	beq.n	8002cb2 <HAL_GPIO_Init+0xae>
          break;
 8002c76:	e036      	b.n	8002ce6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c78:	4a85      	ldr	r2, [pc, #532]	; (8002e90 <HAL_GPIO_Init+0x28c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d019      	beq.n	8002cb2 <HAL_GPIO_Init+0xae>
 8002c7e:	4a85      	ldr	r2, [pc, #532]	; (8002e94 <HAL_GPIO_Init+0x290>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d016      	beq.n	8002cb2 <HAL_GPIO_Init+0xae>
 8002c84:	4a84      	ldr	r2, [pc, #528]	; (8002e98 <HAL_GPIO_Init+0x294>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_GPIO_Init+0xae>
          break;
 8002c8a:	e02c      	b.n	8002ce6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	623b      	str	r3, [r7, #32]
          break;
 8002c92:	e028      	b.n	8002ce6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	623b      	str	r3, [r7, #32]
          break;
 8002c9c:	e023      	b.n	8002ce6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	3308      	adds	r3, #8
 8002ca4:	623b      	str	r3, [r7, #32]
          break;
 8002ca6:	e01e      	b.n	8002ce6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	330c      	adds	r3, #12
 8002cae:	623b      	str	r3, [r7, #32]
          break;
 8002cb0:	e019      	b.n	8002ce6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d102      	bne.n	8002cc0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cba:	2304      	movs	r3, #4
 8002cbc:	623b      	str	r3, [r7, #32]
          break;
 8002cbe:	e012      	b.n	8002ce6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d105      	bne.n	8002cd4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cc8:	2308      	movs	r3, #8
 8002cca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	611a      	str	r2, [r3, #16]
          break;
 8002cd2:	e008      	b.n	8002ce6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	615a      	str	r2, [r3, #20]
          break;
 8002cde:	e002      	b.n	8002ce6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	623b      	str	r3, [r7, #32]
          break;
 8002ce4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2bff      	cmp	r3, #255	; 0xff
 8002cea:	d801      	bhi.n	8002cf0 <HAL_GPIO_Init+0xec>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	e001      	b.n	8002cf4 <HAL_GPIO_Init+0xf0>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2bff      	cmp	r3, #255	; 0xff
 8002cfa:	d802      	bhi.n	8002d02 <HAL_GPIO_Init+0xfe>
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	e002      	b.n	8002d08 <HAL_GPIO_Init+0x104>
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	3b08      	subs	r3, #8
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	210f      	movs	r1, #15
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	fa01 f303 	lsl.w	r3, r1, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	401a      	ands	r2, r3
 8002d1a:	6a39      	ldr	r1, [r7, #32]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	431a      	orrs	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8096 	beq.w	8002e62 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d36:	4b59      	ldr	r3, [pc, #356]	; (8002e9c <HAL_GPIO_Init+0x298>)
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	4a58      	ldr	r2, [pc, #352]	; (8002e9c <HAL_GPIO_Init+0x298>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6193      	str	r3, [r2, #24]
 8002d42:	4b56      	ldr	r3, [pc, #344]	; (8002e9c <HAL_GPIO_Init+0x298>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d4e:	4a54      	ldr	r2, [pc, #336]	; (8002ea0 <HAL_GPIO_Init+0x29c>)
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	089b      	lsrs	r3, r3, #2
 8002d54:	3302      	adds	r3, #2
 8002d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	220f      	movs	r2, #15
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4b      	ldr	r2, [pc, #300]	; (8002ea4 <HAL_GPIO_Init+0x2a0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <HAL_GPIO_Init+0x19e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4a      	ldr	r2, [pc, #296]	; (8002ea8 <HAL_GPIO_Init+0x2a4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00d      	beq.n	8002d9e <HAL_GPIO_Init+0x19a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a49      	ldr	r2, [pc, #292]	; (8002eac <HAL_GPIO_Init+0x2a8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d007      	beq.n	8002d9a <HAL_GPIO_Init+0x196>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a48      	ldr	r2, [pc, #288]	; (8002eb0 <HAL_GPIO_Init+0x2ac>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d101      	bne.n	8002d96 <HAL_GPIO_Init+0x192>
 8002d92:	2303      	movs	r3, #3
 8002d94:	e006      	b.n	8002da4 <HAL_GPIO_Init+0x1a0>
 8002d96:	2304      	movs	r3, #4
 8002d98:	e004      	b.n	8002da4 <HAL_GPIO_Init+0x1a0>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e002      	b.n	8002da4 <HAL_GPIO_Init+0x1a0>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_GPIO_Init+0x1a0>
 8002da2:	2300      	movs	r3, #0
 8002da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da6:	f002 0203 	and.w	r2, r2, #3
 8002daa:	0092      	lsls	r2, r2, #2
 8002dac:	4093      	lsls	r3, r2
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002db4:	493a      	ldr	r1, [pc, #232]	; (8002ea0 <HAL_GPIO_Init+0x29c>)
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	089b      	lsrs	r3, r3, #2
 8002dba:	3302      	adds	r3, #2
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dce:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4938      	ldr	r1, [pc, #224]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]
 8002dda:	e006      	b.n	8002dea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ddc:	4b35      	ldr	r3, [pc, #212]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	4933      	ldr	r1, [pc, #204]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d006      	beq.n	8002e04 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002df6:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	492e      	ldr	r1, [pc, #184]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
 8002e02:	e006      	b.n	8002e12 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e04:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	4929      	ldr	r1, [pc, #164]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e1e:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	4924      	ldr	r1, [pc, #144]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
 8002e2a:	e006      	b.n	8002e3a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e2c:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	491f      	ldr	r1, [pc, #124]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d006      	beq.n	8002e54 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e46:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	491a      	ldr	r1, [pc, #104]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60cb      	str	r3, [r1, #12]
 8002e52:	e006      	b.n	8002e62 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e54:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	4915      	ldr	r1, [pc, #84]	; (8002eb4 <HAL_GPIO_Init+0x2b0>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	3301      	adds	r3, #1
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f47f aed0 	bne.w	8002c18 <HAL_GPIO_Init+0x14>
  }
}
 8002e78:	bf00      	nop
 8002e7a:	372c      	adds	r7, #44	; 0x2c
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	10210000 	.word	0x10210000
 8002e88:	10110000 	.word	0x10110000
 8002e8c:	10120000 	.word	0x10120000
 8002e90:	10310000 	.word	0x10310000
 8002e94:	10320000 	.word	0x10320000
 8002e98:	10220000 	.word	0x10220000
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40010000 	.word	0x40010000
 8002ea4:	40010800 	.word	0x40010800
 8002ea8:	40010c00 	.word	0x40010c00
 8002eac:	40011000 	.word	0x40011000
 8002eb0:	40011400 	.word	0x40011400
 8002eb4:	40010400 	.word	0x40010400

08002eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ec8:	787b      	ldrb	r3, [r7, #1]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ece:	887a      	ldrh	r2, [r7, #2]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ed4:	e003      	b.n	8002ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ed6:	887b      	ldrh	r3, [r7, #2]
 8002ed8:	041a      	lsls	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	611a      	str	r2, [r3, #16]
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002efa:	887a      	ldrh	r2, [r7, #2]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4013      	ands	r3, r2
 8002f00:	041a      	lsls	r2, r3, #16
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	43d9      	mvns	r1, r3
 8002f06:	887b      	ldrh	r3, [r7, #2]
 8002f08:	400b      	ands	r3, r1
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	611a      	str	r2, [r3, #16]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e11f      	b.n	800316e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe fea2 	bl	8001c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2224      	movs	r2, #36	; 0x24
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0201 	bic.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f80:	f001 f90e 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
 8002f84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4a7b      	ldr	r2, [pc, #492]	; (8003178 <HAL_I2C_Init+0x25c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d807      	bhi.n	8002fa0 <HAL_I2C_Init+0x84>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4a7a      	ldr	r2, [pc, #488]	; (800317c <HAL_I2C_Init+0x260>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	bf94      	ite	ls
 8002f98:	2301      	movls	r3, #1
 8002f9a:	2300      	movhi	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e006      	b.n	8002fae <HAL_I2C_Init+0x92>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a77      	ldr	r2, [pc, #476]	; (8003180 <HAL_I2C_Init+0x264>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	bf94      	ite	ls
 8002fa8:	2301      	movls	r3, #1
 8002faa:	2300      	movhi	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e0db      	b.n	800316e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4a72      	ldr	r2, [pc, #456]	; (8003184 <HAL_I2C_Init+0x268>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	0c9b      	lsrs	r3, r3, #18
 8002fc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4a64      	ldr	r2, [pc, #400]	; (8003178 <HAL_I2C_Init+0x25c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d802      	bhi.n	8002ff0 <HAL_I2C_Init+0xd4>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	3301      	adds	r3, #1
 8002fee:	e009      	b.n	8003004 <HAL_I2C_Init+0xe8>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	4a63      	ldr	r2, [pc, #396]	; (8003188 <HAL_I2C_Init+0x26c>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	099b      	lsrs	r3, r3, #6
 8003002:	3301      	adds	r3, #1
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	430b      	orrs	r3, r1
 800300a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003016:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4956      	ldr	r1, [pc, #344]	; (8003178 <HAL_I2C_Init+0x25c>)
 8003020:	428b      	cmp	r3, r1
 8003022:	d80d      	bhi.n	8003040 <HAL_I2C_Init+0x124>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1e59      	subs	r1, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003032:	3301      	adds	r3, #1
 8003034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003038:	2b04      	cmp	r3, #4
 800303a:	bf38      	it	cc
 800303c:	2304      	movcc	r3, #4
 800303e:	e04f      	b.n	80030e0 <HAL_I2C_Init+0x1c4>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d111      	bne.n	800306c <HAL_I2C_Init+0x150>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1e58      	subs	r0, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	440b      	add	r3, r1
 8003056:	fbb0 f3f3 	udiv	r3, r0, r3
 800305a:	3301      	adds	r3, #1
 800305c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e012      	b.n	8003092 <HAL_I2C_Init+0x176>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1e58      	subs	r0, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	0099      	lsls	r1, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003082:	3301      	adds	r3, #1
 8003084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_I2C_Init+0x17e>
 8003096:	2301      	movs	r3, #1
 8003098:	e022      	b.n	80030e0 <HAL_I2C_Init+0x1c4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10e      	bne.n	80030c0 <HAL_I2C_Init+0x1a4>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1e58      	subs	r0, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6859      	ldr	r1, [r3, #4]
 80030aa:	460b      	mov	r3, r1
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	440b      	add	r3, r1
 80030b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b4:	3301      	adds	r3, #1
 80030b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030be:	e00f      	b.n	80030e0 <HAL_I2C_Init+0x1c4>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1e58      	subs	r0, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	0099      	lsls	r1, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d6:	3301      	adds	r3, #1
 80030d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	6809      	ldr	r1, [r1, #0]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800310e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6911      	ldr	r1, [r2, #16]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68d2      	ldr	r2, [r2, #12]
 800311a:	4311      	orrs	r1, r2
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	430b      	orrs	r3, r1
 8003122:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	000186a0 	.word	0x000186a0
 800317c:	001e847f 	.word	0x001e847f
 8003180:	003d08ff 	.word	0x003d08ff
 8003184:	431bde83 	.word	0x431bde83
 8003188:	10624dd3 	.word	0x10624dd3

0800318c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	461a      	mov	r2, r3
 8003198:	460b      	mov	r3, r1
 800319a:	817b      	strh	r3, [r7, #10]
 800319c:	4613      	mov	r3, r2
 800319e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7fe ff92 	bl	80020c8 <HAL_GetTick>
 80031a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	f040 80e0 	bne.w	8003374 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	2319      	movs	r3, #25
 80031ba:	2201      	movs	r2, #1
 80031bc:	4970      	ldr	r1, [pc, #448]	; (8003380 <HAL_I2C_Master_Transmit+0x1f4>)
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 fa92 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
 80031cc:	e0d3      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_I2C_Master_Transmit+0x50>
 80031d8:	2302      	movs	r3, #2
 80031da:	e0cc      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d007      	beq.n	8003202 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003210:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2221      	movs	r2, #33	; 0x21
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2210      	movs	r2, #16
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	893a      	ldrh	r2, [r7, #8]
 8003232:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4a50      	ldr	r2, [pc, #320]	; (8003384 <HAL_I2C_Master_Transmit+0x1f8>)
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003244:	8979      	ldrh	r1, [r7, #10]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	6a3a      	ldr	r2, [r7, #32]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f9ca 	bl	80035e4 <I2C_MasterRequestWrite>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e08d      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003270:	e066      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	6a39      	ldr	r1, [r7, #32]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fb0c 	bl	8003894 <I2C_WaitOnTXEFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2b04      	cmp	r3, #4
 8003288:	d107      	bne.n	800329a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e06b      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d11b      	bne.n	8003314 <HAL_I2C_Master_Transmit+0x188>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d017      	beq.n	8003314 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	6a39      	ldr	r1, [r7, #32]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fafc 	bl	8003916 <I2C_WaitOnBTFFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00d      	beq.n	8003340 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	2b04      	cmp	r3, #4
 800332a:	d107      	bne.n	800333c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e01a      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	d194      	bne.n	8003272 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	00100002 	.word	0x00100002
 8003384:	ffff0000 	.word	0xffff0000

08003388 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	460b      	mov	r3, r1
 8003396:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003398:	f7fe fe96 	bl	80020c8 <HAL_GetTick>
 800339c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800339e:	2301      	movs	r3, #1
 80033a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	f040 8111 	bne.w	80035d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2319      	movs	r3, #25
 80033b6:	2201      	movs	r2, #1
 80033b8:	4988      	ldr	r1, [pc, #544]	; (80035dc <HAL_I2C_IsDeviceReady+0x254>)
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f994 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80033c6:	2302      	movs	r3, #2
 80033c8:	e104      	b.n	80035d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_I2C_IsDeviceReady+0x50>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e0fd      	b.n	80035d4 <HAL_I2C_IsDeviceReady+0x24c>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d007      	beq.n	80033fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0201 	orr.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800340c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2224      	movs	r2, #36	; 0x24
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a70      	ldr	r2, [pc, #448]	; (80035e0 <HAL_I2C_IsDeviceReady+0x258>)
 8003420:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003430:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2200      	movs	r2, #0
 800343a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f952 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00d      	beq.n	8003466 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003458:	d103      	bne.n	8003462 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e0b6      	b.n	80035d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003466:	897b      	ldrh	r3, [r7, #10]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003474:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003476:	f7fe fe27 	bl	80020c8 <HAL_GetTick>
 800347a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b02      	cmp	r3, #2
 8003488:	bf0c      	ite	eq
 800348a:	2301      	moveq	r3, #1
 800348c:	2300      	movne	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a0:	bf0c      	ite	eq
 80034a2:	2301      	moveq	r3, #1
 80034a4:	2300      	movne	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034aa:	e025      	b.n	80034f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034ac:	f7fe fe0c 	bl	80020c8 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d302      	bcc.n	80034c2 <HAL_I2C_IsDeviceReady+0x13a>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	22a0      	movs	r2, #160	; 0xa0
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2ba0      	cmp	r3, #160	; 0xa0
 8003502:	d005      	beq.n	8003510 <HAL_I2C_IsDeviceReady+0x188>
 8003504:	7dfb      	ldrb	r3, [r7, #23]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d102      	bne.n	8003510 <HAL_I2C_IsDeviceReady+0x188>
 800350a:	7dbb      	ldrb	r3, [r7, #22]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0cd      	beq.n	80034ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b02      	cmp	r3, #2
 8003524:	d129      	bne.n	800357a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003534:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2319      	movs	r3, #25
 8003552:	2201      	movs	r2, #1
 8003554:	4921      	ldr	r1, [pc, #132]	; (80035dc <HAL_I2C_IsDeviceReady+0x254>)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f8c6 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e036      	b.n	80035d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e02c      	b.n	80035d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003588:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003592:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	2319      	movs	r3, #25
 800359a:	2201      	movs	r2, #1
 800359c:	490f      	ldr	r1, [pc, #60]	; (80035dc <HAL_I2C_IsDeviceReady+0x254>)
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f8a2 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e012      	b.n	80035d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	3301      	adds	r3, #1
 80035b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	f4ff af32 	bcc.w	8003422 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
  }
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	00100002 	.word	0x00100002
 80035e0:	ffff0000 	.word	0xffff0000

080035e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	460b      	mov	r3, r1
 80035f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d006      	beq.n	800360e <I2C_MasterRequestWrite+0x2a>
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d003      	beq.n	800360e <I2C_MasterRequestWrite+0x2a>
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800360c:	d108      	bne.n	8003620 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e00b      	b.n	8003638 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	2b12      	cmp	r3, #18
 8003626:	d107      	bne.n	8003638 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003636:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f84f 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365e:	d103      	bne.n	8003668 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003666:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e035      	b.n	80036d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003674:	d108      	bne.n	8003688 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003676:	897b      	ldrh	r3, [r7, #10]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003684:	611a      	str	r2, [r3, #16]
 8003686:	e01b      	b.n	80036c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003688:	897b      	ldrh	r3, [r7, #10]
 800368a:	11db      	asrs	r3, r3, #7
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f003 0306 	and.w	r3, r3, #6
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f063 030f 	orn	r3, r3, #15
 8003698:	b2da      	uxtb	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	490e      	ldr	r1, [pc, #56]	; (80036e0 <I2C_MasterRequestWrite+0xfc>)
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f875 	bl	8003796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e010      	b.n	80036d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036b6:	897b      	ldrh	r3, [r7, #10]
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4907      	ldr	r1, [pc, #28]	; (80036e4 <I2C_MasterRequestWrite+0x100>)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f865 	bl	8003796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	00010008 	.word	0x00010008
 80036e4:	00010002 	.word	0x00010002

080036e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f8:	e025      	b.n	8003746 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d021      	beq.n	8003746 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fe fce1 	bl	80020c8 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d116      	bne.n	8003746 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e023      	b.n	800378e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d10d      	bne.n	800376c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	43da      	mvns	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4013      	ands	r3, r2
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	bf0c      	ite	eq
 8003762:	2301      	moveq	r3, #1
 8003764:	2300      	movne	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	e00c      	b.n	8003786 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	43da      	mvns	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4013      	ands	r3, r2
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	bf0c      	ite	eq
 800377e:	2301      	moveq	r3, #1
 8003780:	2300      	movne	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	429a      	cmp	r2, r3
 800378a:	d0b6      	beq.n	80036fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037a4:	e051      	b.n	800384a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b4:	d123      	bne.n	80037fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f043 0204 	orr.w	r2, r3, #4
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e046      	b.n	800388c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d021      	beq.n	800384a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003806:	f7fe fc5f 	bl	80020c8 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	429a      	cmp	r2, r3
 8003814:	d302      	bcc.n	800381c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d116      	bne.n	800384a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f043 0220 	orr.w	r2, r3, #32
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e020      	b.n	800388c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	0c1b      	lsrs	r3, r3, #16
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	d10c      	bne.n	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	43da      	mvns	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4013      	ands	r3, r2
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	bf14      	ite	ne
 8003866:	2301      	movne	r3, #1
 8003868:	2300      	moveq	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	e00b      	b.n	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	43da      	mvns	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	4013      	ands	r3, r2
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf14      	ite	ne
 8003880:	2301      	movne	r3, #1
 8003882:	2300      	moveq	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d18d      	bne.n	80037a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038a0:	e02d      	b.n	80038fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f878 	bl	8003998 <I2C_IsAcknowledgeFailed>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e02d      	b.n	800390e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b8:	d021      	beq.n	80038fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ba:	f7fe fc05 	bl	80020c8 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d302      	bcc.n	80038d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d116      	bne.n	80038fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f043 0220 	orr.w	r2, r3, #32
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e007      	b.n	800390e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	2b80      	cmp	r3, #128	; 0x80
 800390a:	d1ca      	bne.n	80038a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003922:	e02d      	b.n	8003980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f837 	bl	8003998 <I2C_IsAcknowledgeFailed>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e02d      	b.n	8003990 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393a:	d021      	beq.n	8003980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393c:	f7fe fbc4 	bl	80020c8 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	429a      	cmp	r2, r3
 800394a:	d302      	bcc.n	8003952 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d116      	bne.n	8003980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	f043 0220 	orr.w	r2, r3, #32
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e007      	b.n	8003990 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b04      	cmp	r3, #4
 800398c:	d1ca      	bne.n	8003924 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ae:	d11b      	bne.n	80039e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f043 0204 	orr.w	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e26c      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8087 	beq.w	8003b22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a14:	4b92      	ldr	r3, [pc, #584]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 030c 	and.w	r3, r3, #12
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d00c      	beq.n	8003a3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a20:	4b8f      	ldr	r3, [pc, #572]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 030c 	and.w	r3, r3, #12
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d112      	bne.n	8003a52 <HAL_RCC_OscConfig+0x5e>
 8003a2c:	4b8c      	ldr	r3, [pc, #560]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a38:	d10b      	bne.n	8003a52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3a:	4b89      	ldr	r3, [pc, #548]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d06c      	beq.n	8003b20 <HAL_RCC_OscConfig+0x12c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d168      	bne.n	8003b20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e246      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5a:	d106      	bne.n	8003a6a <HAL_RCC_OscConfig+0x76>
 8003a5c:	4b80      	ldr	r3, [pc, #512]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a7f      	ldr	r2, [pc, #508]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	e02e      	b.n	8003ac8 <HAL_RCC_OscConfig+0xd4>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x98>
 8003a72:	4b7b      	ldr	r3, [pc, #492]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a7a      	ldr	r2, [pc, #488]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4b78      	ldr	r3, [pc, #480]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a77      	ldr	r2, [pc, #476]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	e01d      	b.n	8003ac8 <HAL_RCC_OscConfig+0xd4>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0xbc>
 8003a96:	4b72      	ldr	r3, [pc, #456]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a71      	ldr	r2, [pc, #452]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b6f      	ldr	r3, [pc, #444]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a6e      	ldr	r2, [pc, #440]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCC_OscConfig+0xd4>
 8003ab0:	4b6b      	ldr	r3, [pc, #428]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a6a      	ldr	r2, [pc, #424]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b68      	ldr	r3, [pc, #416]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a67      	ldr	r2, [pc, #412]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ac6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d013      	beq.n	8003af8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7fe fafa 	bl	80020c8 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fe faf6 	bl	80020c8 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e1fa      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	4b5d      	ldr	r3, [pc, #372]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xe4>
 8003af6:	e014      	b.n	8003b22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af8:	f7fe fae6 	bl	80020c8 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b00:	f7fe fae2 	bl	80020c8 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e1e6      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	4b53      	ldr	r3, [pc, #332]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x10c>
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d063      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b2e:	4b4c      	ldr	r3, [pc, #304]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b3a:	4b49      	ldr	r3, [pc, #292]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d11c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x18c>
 8003b46:	4b46      	ldr	r3, [pc, #280]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d116      	bne.n	8003b80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b52:	4b43      	ldr	r3, [pc, #268]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_RCC_OscConfig+0x176>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d001      	beq.n	8003b6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e1ba      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6a:	4b3d      	ldr	r3, [pc, #244]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4939      	ldr	r1, [pc, #228]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7e:	e03a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d020      	beq.n	8003bca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b88:	4b36      	ldr	r3, [pc, #216]	; (8003c64 <HAL_RCC_OscConfig+0x270>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8e:	f7fe fa9b 	bl	80020c8 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b96:	f7fe fa97 	bl	80020c8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e19b      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb4:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4927      	ldr	r1, [pc, #156]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	600b      	str	r3, [r1, #0]
 8003bc8:	e015      	b.n	8003bf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bca:	4b26      	ldr	r3, [pc, #152]	; (8003c64 <HAL_RCC_OscConfig+0x270>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fa7a 	bl	80020c8 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd8:	f7fe fa76 	bl	80020c8 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e17a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d03a      	beq.n	8003c78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d019      	beq.n	8003c3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0a:	4b17      	ldr	r3, [pc, #92]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c10:	f7fe fa5a 	bl	80020c8 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c18:	f7fe fa56 	bl	80020c8 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e15a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c36:	2001      	movs	r0, #1
 8003c38:	f000 fada 	bl	80041f0 <RCC_Delay>
 8003c3c:	e01c      	b.n	8003c78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <HAL_RCC_OscConfig+0x274>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c44:	f7fe fa40 	bl	80020c8 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c4a:	e00f      	b.n	8003c6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c4c:	f7fe fa3c 	bl	80020c8 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d908      	bls.n	8003c6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e140      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000
 8003c64:	42420000 	.word	0x42420000
 8003c68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c6c:	4b9e      	ldr	r3, [pc, #632]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e9      	bne.n	8003c4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80a6 	beq.w	8003dd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c86:	2300      	movs	r3, #0
 8003c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c8a:	4b97      	ldr	r3, [pc, #604]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10d      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c96:	4b94      	ldr	r3, [pc, #592]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	4a93      	ldr	r2, [pc, #588]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	61d3      	str	r3, [r2, #28]
 8003ca2:	4b91      	ldr	r3, [pc, #580]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003caa:	60bb      	str	r3, [r7, #8]
 8003cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb2:	4b8e      	ldr	r3, [pc, #568]	; (8003eec <HAL_RCC_OscConfig+0x4f8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d118      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cbe:	4b8b      	ldr	r3, [pc, #556]	; (8003eec <HAL_RCC_OscConfig+0x4f8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a8a      	ldr	r2, [pc, #552]	; (8003eec <HAL_RCC_OscConfig+0x4f8>)
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cca:	f7fe f9fd 	bl	80020c8 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd2:	f7fe f9f9 	bl	80020c8 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b64      	cmp	r3, #100	; 0x64
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e0fd      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce4:	4b81      	ldr	r3, [pc, #516]	; (8003eec <HAL_RCC_OscConfig+0x4f8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCC_OscConfig+0x312>
 8003cf8:	4b7b      	ldr	r3, [pc, #492]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	4a7a      	ldr	r2, [pc, #488]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	6213      	str	r3, [r2, #32]
 8003d04:	e02d      	b.n	8003d62 <HAL_RCC_OscConfig+0x36e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x334>
 8003d0e:	4b76      	ldr	r3, [pc, #472]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	4a75      	ldr	r2, [pc, #468]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	6213      	str	r3, [r2, #32]
 8003d1a:	4b73      	ldr	r3, [pc, #460]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	4a72      	ldr	r2, [pc, #456]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003d20:	f023 0304 	bic.w	r3, r3, #4
 8003d24:	6213      	str	r3, [r2, #32]
 8003d26:	e01c      	b.n	8003d62 <HAL_RCC_OscConfig+0x36e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	2b05      	cmp	r3, #5
 8003d2e:	d10c      	bne.n	8003d4a <HAL_RCC_OscConfig+0x356>
 8003d30:	4b6d      	ldr	r3, [pc, #436]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	4a6c      	ldr	r2, [pc, #432]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003d36:	f043 0304 	orr.w	r3, r3, #4
 8003d3a:	6213      	str	r3, [r2, #32]
 8003d3c:	4b6a      	ldr	r3, [pc, #424]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	4a69      	ldr	r2, [pc, #420]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	6213      	str	r3, [r2, #32]
 8003d48:	e00b      	b.n	8003d62 <HAL_RCC_OscConfig+0x36e>
 8003d4a:	4b67      	ldr	r3, [pc, #412]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	4a66      	ldr	r2, [pc, #408]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	6213      	str	r3, [r2, #32]
 8003d56:	4b64      	ldr	r3, [pc, #400]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	4a63      	ldr	r2, [pc, #396]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003d5c:	f023 0304 	bic.w	r3, r3, #4
 8003d60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d015      	beq.n	8003d96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6a:	f7fe f9ad 	bl	80020c8 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d70:	e00a      	b.n	8003d88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d72:	f7fe f9a9 	bl	80020c8 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0ab      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d88:	4b57      	ldr	r3, [pc, #348]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0ee      	beq.n	8003d72 <HAL_RCC_OscConfig+0x37e>
 8003d94:	e014      	b.n	8003dc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d96:	f7fe f997 	bl	80020c8 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9e:	f7fe f993 	bl	80020c8 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e095      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db4:	4b4c      	ldr	r3, [pc, #304]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1ee      	bne.n	8003d9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d105      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc6:	4b48      	ldr	r3, [pc, #288]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	4a47      	ldr	r2, [pc, #284]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8081 	beq.w	8003ede <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ddc:	4b42      	ldr	r3, [pc, #264]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 030c 	and.w	r3, r3, #12
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d061      	beq.n	8003eac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d146      	bne.n	8003e7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df0:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <HAL_RCC_OscConfig+0x4fc>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df6:	f7fe f967 	bl	80020c8 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfe:	f7fe f963 	bl	80020c8 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e067      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e10:	4b35      	ldr	r3, [pc, #212]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1f0      	bne.n	8003dfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e24:	d108      	bne.n	8003e38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e26:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	492d      	ldr	r1, [pc, #180]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e38:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a19      	ldr	r1, [r3, #32]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	4927      	ldr	r1, [pc, #156]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e50:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <HAL_RCC_OscConfig+0x4fc>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e56:	f7fe f937 	bl	80020c8 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5e:	f7fe f933 	bl	80020c8 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e037      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e70:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f0      	beq.n	8003e5e <HAL_RCC_OscConfig+0x46a>
 8003e7c:	e02f      	b.n	8003ede <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <HAL_RCC_OscConfig+0x4fc>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fe f920 	bl	80020c8 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fe f91c 	bl	80020c8 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e020      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9e:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x498>
 8003eaa:	e018      	b.n	8003ede <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e013      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <HAL_RCC_OscConfig+0x4f4>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d106      	bne.n	8003eda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d001      	beq.n	8003ede <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	40007000 	.word	0x40007000
 8003ef0:	42420060 	.word	0x42420060

08003ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0d0      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f08:	4b6a      	ldr	r3, [pc, #424]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d910      	bls.n	8003f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b67      	ldr	r3, [pc, #412]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 0207 	bic.w	r2, r3, #7
 8003f1e:	4965      	ldr	r1, [pc, #404]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f26:	4b63      	ldr	r3, [pc, #396]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0b8      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d020      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f50:	4b59      	ldr	r3, [pc, #356]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4a58      	ldr	r2, [pc, #352]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f68:	4b53      	ldr	r3, [pc, #332]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	4a52      	ldr	r2, [pc, #328]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f74:	4b50      	ldr	r3, [pc, #320]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	494d      	ldr	r1, [pc, #308]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d040      	beq.n	8004014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	4b47      	ldr	r3, [pc, #284]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d115      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e07f      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb2:	4b41      	ldr	r3, [pc, #260]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e073      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc2:	4b3d      	ldr	r3, [pc, #244]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e06b      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fd2:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f023 0203 	bic.w	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4936      	ldr	r1, [pc, #216]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fe4:	f7fe f870 	bl	80020c8 <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	e00a      	b.n	8004002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fec:	f7fe f86c 	bl	80020c8 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e053      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	4b2d      	ldr	r3, [pc, #180]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 020c 	and.w	r2, r3, #12
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	429a      	cmp	r2, r3
 8004012:	d1eb      	bne.n	8003fec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004014:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d210      	bcs.n	8004044 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 0207 	bic.w	r2, r3, #7
 800402a:	4922      	ldr	r1, [pc, #136]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b20      	ldr	r3, [pc, #128]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e032      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004050:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4916      	ldr	r1, [pc, #88]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	490e      	ldr	r1, [pc, #56]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 800407e:	4313      	orrs	r3, r2
 8004080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004082:	f000 f821 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8004086:	4601      	mov	r1, r0
 8004088:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <HAL_RCC_ClockConfig+0x1c8>)
 8004094:	5cd3      	ldrb	r3, [r2, r3]
 8004096:	fa21 f303 	lsr.w	r3, r1, r3
 800409a:	4a09      	ldr	r2, [pc, #36]	; (80040c0 <HAL_RCC_ClockConfig+0x1cc>)
 800409c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800409e:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <HAL_RCC_ClockConfig+0x1d0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd ffce 	bl	8002044 <HAL_InitTick>

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40022000 	.word	0x40022000
 80040b8:	40021000 	.word	0x40021000
 80040bc:	08007b04 	.word	0x08007b04
 80040c0:	20000000 	.word	0x20000000
 80040c4:	20000004 	.word	0x20000004

080040c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c8:	b490      	push	{r4, r7}
 80040ca:	b08a      	sub	sp, #40	; 0x28
 80040cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80040ce:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <HAL_RCC_GetSysClockFreq+0xb0>)
 80040d0:	1d3c      	adds	r4, r7, #4
 80040d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040d8:	4b28      	ldr	r3, [pc, #160]	; (800417c <HAL_RCC_GetSysClockFreq+0xb4>)
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	2300      	movs	r3, #0
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040f2:	4b23      	ldr	r3, [pc, #140]	; (8004180 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d002      	beq.n	8004108 <HAL_RCC_GetSysClockFreq+0x40>
 8004102:	2b08      	cmp	r3, #8
 8004104:	d003      	beq.n	800410e <HAL_RCC_GetSysClockFreq+0x46>
 8004106:	e02d      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004108:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <HAL_RCC_GetSysClockFreq+0xbc>)
 800410a:	623b      	str	r3, [r7, #32]
      break;
 800410c:	e02d      	b.n	800416a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	0c9b      	lsrs	r3, r3, #18
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800411a:	4413      	add	r3, r2
 800411c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004120:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d013      	beq.n	8004154 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800412c:	4b14      	ldr	r3, [pc, #80]	; (8004180 <HAL_RCC_GetSysClockFreq+0xb8>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	0c5b      	lsrs	r3, r3, #17
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800413a:	4413      	add	r3, r2
 800413c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004140:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	4a0f      	ldr	r2, [pc, #60]	; (8004184 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004146:	fb02 f203 	mul.w	r2, r2, r3
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
 8004152:	e004      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	4a0c      	ldr	r2, [pc, #48]	; (8004188 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004158:	fb02 f303 	mul.w	r3, r2, r3
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	623b      	str	r3, [r7, #32]
      break;
 8004162:	e002      	b.n	800416a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004164:	4b07      	ldr	r3, [pc, #28]	; (8004184 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004166:	623b      	str	r3, [r7, #32]
      break;
 8004168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800416a:	6a3b      	ldr	r3, [r7, #32]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3728      	adds	r7, #40	; 0x28
 8004170:	46bd      	mov	sp, r7
 8004172:	bc90      	pop	{r4, r7}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	08007adc 	.word	0x08007adc
 800417c:	08007aec 	.word	0x08007aec
 8004180:	40021000 	.word	0x40021000
 8004184:	007a1200 	.word	0x007a1200
 8004188:	003d0900 	.word	0x003d0900

0800418c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004190:	4b02      	ldr	r3, [pc, #8]	; (800419c <HAL_RCC_GetHCLKFreq+0x10>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr
 800419c:	20000000 	.word	0x20000000

080041a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041a4:	f7ff fff2 	bl	800418c <HAL_RCC_GetHCLKFreq>
 80041a8:	4601      	mov	r1, r0
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	0a1b      	lsrs	r3, r3, #8
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	4a03      	ldr	r2, [pc, #12]	; (80041c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b6:	5cd3      	ldrb	r3, [r2, r3]
 80041b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041bc:	4618      	mov	r0, r3
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000
 80041c4:	08007b14 	.word	0x08007b14

080041c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041cc:	f7ff ffde 	bl	800418c <HAL_RCC_GetHCLKFreq>
 80041d0:	4601      	mov	r1, r0
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	0adb      	lsrs	r3, r3, #11
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	4a03      	ldr	r2, [pc, #12]	; (80041ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80041de:	5cd3      	ldrb	r3, [r2, r3]
 80041e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40021000 	.word	0x40021000
 80041ec:	08007b14 	.word	0x08007b14

080041f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041f8:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <RCC_Delay+0x34>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <RCC_Delay+0x38>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	0a5b      	lsrs	r3, r3, #9
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	fb02 f303 	mul.w	r3, r2, r3
 800420a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800420c:	bf00      	nop
  }
  while (Delay --);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1e5a      	subs	r2, r3, #1
 8004212:	60fa      	str	r2, [r7, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f9      	bne.n	800420c <RCC_Delay+0x1c>
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	20000000 	.word	0x20000000
 8004228:	10624dd3 	.word	0x10624dd3

0800422c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d07d      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004248:	2300      	movs	r3, #0
 800424a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800424c:	4b4f      	ldr	r3, [pc, #316]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10d      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004258:	4b4c      	ldr	r3, [pc, #304]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	4a4b      	ldr	r2, [pc, #300]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004262:	61d3      	str	r3, [r2, #28]
 8004264:	4b49      	ldr	r3, [pc, #292]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004270:	2301      	movs	r3, #1
 8004272:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	4b46      	ldr	r3, [pc, #280]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d118      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004280:	4b43      	ldr	r3, [pc, #268]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a42      	ldr	r2, [pc, #264]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800428c:	f7fd ff1c 	bl	80020c8 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004292:	e008      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004294:	f7fd ff18 	bl	80020c8 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e06d      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a6:	4b3a      	ldr	r3, [pc, #232]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042b2:	4b36      	ldr	r3, [pc, #216]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d02e      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d027      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042d0:	4b2e      	ldr	r3, [pc, #184]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042da:	4b2e      	ldr	r3, [pc, #184]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042e0:	4b2c      	ldr	r3, [pc, #176]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042e6:	4a29      	ldr	r2, [pc, #164]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d014      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f6:	f7fd fee7 	bl	80020c8 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fc:	e00a      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fe:	f7fd fee3 	bl	80020c8 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f241 3288 	movw	r2, #5000	; 0x1388
 800430c:	4293      	cmp	r3, r2
 800430e:	d901      	bls.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e036      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004314:	4b1d      	ldr	r3, [pc, #116]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0ee      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004320:	4b1a      	ldr	r3, [pc, #104]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	4917      	ldr	r1, [pc, #92]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432e:	4313      	orrs	r3, r2
 8004330:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004332:	7dfb      	ldrb	r3, [r7, #23]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d105      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004338:	4b14      	ldr	r3, [pc, #80]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	4a13      	ldr	r2, [pc, #76]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004342:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004350:	4b0e      	ldr	r3, [pc, #56]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	490b      	ldr	r1, [pc, #44]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435e:	4313      	orrs	r3, r2
 8004360:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800436e:	4b07      	ldr	r3, [pc, #28]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	4904      	ldr	r1, [pc, #16]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40021000 	.word	0x40021000
 8004390:	40007000 	.word	0x40007000
 8004394:	42420440 	.word	0x42420440

08004398 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	b08d      	sub	sp, #52	; 0x34
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043a0:	4b55      	ldr	r3, [pc, #340]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80043a2:	f107 040c 	add.w	r4, r7, #12
 80043a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043ac:	4b53      	ldr	r3, [pc, #332]	; (80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
 80043b6:	2300      	movs	r3, #0
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ba:	2300      	movs	r3, #0
 80043bc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	2300      	movs	r3, #0
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d07f      	beq.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80043cc:	2b10      	cmp	r3, #16
 80043ce:	d002      	beq.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d048      	beq.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80043d4:	e08b      	b.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80043d6:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80043dc:	4b48      	ldr	r3, [pc, #288]	; (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d07f      	beq.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	0c9b      	lsrs	r3, r3, #18
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80043f4:	4413      	add	r3, r2
 80043f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80043fa:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d018      	beq.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004406:	4b3e      	ldr	r3, [pc, #248]	; (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	0c5b      	lsrs	r3, r3, #17
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004414:	4413      	add	r3, r2
 8004416:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004426:	4a37      	ldr	r2, [pc, #220]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	fbb2 f2f3 	udiv	r2, r2, r3
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	fb02 f303 	mul.w	r3, r2, r3
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004436:	e004      	b.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	4a33      	ldr	r2, [pc, #204]	; (8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800443c:	fb02 f303 	mul.w	r3, r2, r3
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004442:	4b2f      	ldr	r3, [pc, #188]	; (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444e:	d102      	bne.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004454:	e048      	b.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	4a2c      	ldr	r2, [pc, #176]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	085b      	lsrs	r3, r3, #1
 8004462:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004464:	e040      	b.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004466:	4b26      	ldr	r3, [pc, #152]	; (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004476:	d108      	bne.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
 8004488:	e01f      	b.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004494:	d109      	bne.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004496:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80044a2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044a8:	e00f      	b.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b4:	d11a      	bne.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d014      	beq.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80044c2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80044c8:	e010      	b.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80044ca:	e00f      	b.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80044cc:	f7ff fe7c 	bl	80041c8 <HAL_RCC_GetPCLK2Freq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	0b9b      	lsrs	r3, r3, #14
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	3301      	adds	r3, #1
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80044e6:	e002      	b.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80044e8:	bf00      	nop
 80044ea:	e000      	b.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80044ec:	bf00      	nop
    }
  }
  return (frequency);
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3734      	adds	r7, #52	; 0x34
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd90      	pop	{r4, r7, pc}
 80044f8:	08007af0 	.word	0x08007af0
 80044fc:	08007b00 	.word	0x08007b00
 8004500:	40021000 	.word	0x40021000
 8004504:	007a1200 	.word	0x007a1200
 8004508:	003d0900 	.word	0x003d0900
 800450c:	aaaaaaab 	.word	0xaaaaaaab

08004510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e03f      	b.n	80045a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fd fbe8 	bl	8001d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2224      	movs	r2, #36	; 0x24
 8004540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 fb8d 	bl	8004c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b08a      	sub	sp, #40	; 0x28
 80045ae:	af02      	add	r7, sp, #8
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d17c      	bne.n	80046c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_UART_Transmit+0x2c>
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e075      	b.n	80046c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_UART_Transmit+0x3e>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e06e      	b.n	80046c6 <HAL_UART_Transmit+0x11c>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2221      	movs	r2, #33	; 0x21
 80045fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80045fe:	f7fd fd63 	bl	80020c8 <HAL_GetTick>
 8004602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	88fa      	ldrh	r2, [r7, #6]
 800460e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004618:	d108      	bne.n	800462c <HAL_UART_Transmit+0x82>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d104      	bne.n	800462c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	e003      	b.n	8004634 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004630:	2300      	movs	r3, #0
 8004632:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800463c:	e02a      	b.n	8004694 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2200      	movs	r2, #0
 8004646:	2180      	movs	r1, #128	; 0x80
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f9b0 	bl	80049ae <UART_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e036      	b.n	80046c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10b      	bne.n	8004676 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800466c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	3302      	adds	r3, #2
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	e007      	b.n	8004686 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	3301      	adds	r3, #1
 8004684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1cf      	bne.n	800463e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2200      	movs	r2, #0
 80046a6:	2140      	movs	r1, #64	; 0x40
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f980 	bl	80049ae <UART_WaitOnFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e006      	b.n	80046c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	e000      	b.n	80046c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046c4:	2302      	movs	r3, #2
  }
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	4613      	mov	r3, r2
 80046da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d140      	bne.n	800476a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <HAL_UART_Receive_IT+0x26>
 80046ee:	88fb      	ldrh	r3, [r7, #6]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e039      	b.n	800476c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_UART_Receive_IT+0x38>
 8004702:	2302      	movs	r3, #2
 8004704:	e032      	b.n	800476c <HAL_UART_Receive_IT+0x9e>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	88fa      	ldrh	r2, [r7, #6]
 800471e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2222      	movs	r2, #34	; 0x22
 800472a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004744:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0201 	orr.w	r2, r2, #1
 8004754:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0220 	orr.w	r2, r2, #32
 8004764:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	e000      	b.n	800476c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800476a:	2302      	movs	r3, #2
  }
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr
	...

08004778 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004798:	2300      	movs	r3, #0
 800479a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10d      	bne.n	80047ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_UART_IRQHandler+0x52>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f9d5 	bl	8004b72 <UART_Receive_IT>
      return;
 80047c8:	e0d1      	b.n	800496e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80b0 	beq.w	8004932 <HAL_UART_IRQHandler+0x1ba>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <HAL_UART_IRQHandler+0x70>
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80a5 	beq.w	8004932 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_UART_IRQHandler+0x90>
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004800:	f043 0201 	orr.w	r2, r3, #1
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <HAL_UART_IRQHandler+0xb0>
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004820:	f043 0202 	orr.w	r2, r3, #2
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_UART_IRQHandler+0xd0>
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	f043 0204 	orr.w	r2, r3, #4
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00f      	beq.n	8004872 <HAL_UART_IRQHandler+0xfa>
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <HAL_UART_IRQHandler+0xee>
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	f043 0208 	orr.w	r2, r3, #8
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d078      	beq.n	800496c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d007      	beq.n	8004894 <HAL_UART_IRQHandler+0x11c>
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f96f 	bl	8004b72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	bf14      	ite	ne
 80048a2:	2301      	movne	r3, #1
 80048a4:	2300      	moveq	r3, #0
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d102      	bne.n	80048bc <HAL_UART_IRQHandler+0x144>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d031      	beq.n	8004920 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f8c0 	bl	8004a42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d023      	beq.n	8004918 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695a      	ldr	r2, [r3, #20]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048de:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d013      	beq.n	8004910 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ec:	4a21      	ldr	r2, [pc, #132]	; (8004974 <HAL_UART_IRQHandler+0x1fc>)
 80048ee:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fe f90f 	bl	8002b18 <HAL_DMA_Abort_IT>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d016      	beq.n	800492e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800490a:	4610      	mov	r0, r2
 800490c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490e:	e00e      	b.n	800492e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f843 	bl	800499c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004916:	e00a      	b.n	800492e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f83f 	bl	800499c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491e:	e006      	b.n	800492e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f83b 	bl	800499c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800492c:	e01e      	b.n	800496c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492e:	bf00      	nop
    return;
 8004930:	e01c      	b.n	800496c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <HAL_UART_IRQHandler+0x1d6>
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f8ac 	bl	8004aa4 <UART_Transmit_IT>
    return;
 800494c:	e00f      	b.n	800496e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <HAL_UART_IRQHandler+0x1f6>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f8ed 	bl	8004b42 <UART_EndTransmit_IT>
    return;
 8004968:	bf00      	nop
 800496a:	e000      	b.n	800496e <HAL_UART_IRQHandler+0x1f6>
    return;
 800496c:	bf00      	nop
  }
}
 800496e:	3720      	adds	r7, #32
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	08004a7d 	.word	0x08004a7d

08004978 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr

0800498a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr

0800499c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr

080049ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	4613      	mov	r3, r2
 80049bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049be:	e02c      	b.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c6:	d028      	beq.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <UART_WaitOnFlagUntilTimeout+0x30>
 80049ce:	f7fd fb7b 	bl	80020c8 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d21d      	bcs.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049ec:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0201 	bic.w	r2, r2, #1
 80049fc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e00f      	b.n	8004a3a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4013      	ands	r3, r2
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d0c3      	beq.n	80049c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a58:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0201 	bic.w	r2, r2, #1
 8004a68:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr

08004a7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f7ff ff80 	bl	800499c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a9c:	bf00      	nop
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b21      	cmp	r3, #33	; 0x21
 8004ab6:	d13e      	bne.n	8004b36 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac0:	d114      	bne.n	8004aec <UART_Transmit_IT+0x48>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d110      	bne.n	8004aec <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ade:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	1c9a      	adds	r2, r3, #2
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	621a      	str	r2, [r3, #32]
 8004aea:	e008      	b.n	8004afe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	1c59      	adds	r1, r3, #1
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6211      	str	r1, [r2, #32]
 8004af6:	781a      	ldrb	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10f      	bne.n	8004b32 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b20:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b30:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e000      	b.n	8004b38 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b36:	2302      	movs	r3, #2
  }
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr

08004b42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff ff08 	bl	8004978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b084      	sub	sp, #16
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b22      	cmp	r3, #34	; 0x22
 8004b84:	d170      	bne.n	8004c68 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8e:	d117      	bne.n	8004bc0 <UART_Receive_IT+0x4e>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d113      	bne.n	8004bc0 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	1c9a      	adds	r2, r3, #2
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28
 8004bbe:	e026      	b.n	8004c0e <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd2:	d007      	beq.n	8004be4 <UART_Receive_IT+0x72>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10a      	bne.n	8004bf2 <UART_Receive_IT+0x80>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d106      	bne.n	8004bf2 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	e008      	b.n	8004c04 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d120      	bne.n	8004c64 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0220 	bic.w	r2, r2, #32
 8004c30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695a      	ldr	r2, [r3, #20]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0201 	bic.w	r2, r2, #1
 8004c50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff fe95 	bl	800498a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	e002      	b.n	8004c6a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	e000      	b.n	8004c6a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004c68:	2302      	movs	r3, #2
  }
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cae:	f023 030c 	bic.w	r3, r3, #12
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a2c      	ldr	r2, [pc, #176]	; (8004d88 <UART_SetConfig+0x114>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d103      	bne.n	8004ce4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cdc:	f7ff fa74 	bl	80041c8 <HAL_RCC_GetPCLK2Freq>
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	e002      	b.n	8004cea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ce4:	f7ff fa5c 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
 8004ce8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009a      	lsls	r2, r3, #2
 8004cf4:	441a      	add	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d00:	4a22      	ldr	r2, [pc, #136]	; (8004d8c <UART_SetConfig+0x118>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	0119      	lsls	r1, r3, #4
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009a      	lsls	r2, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d20:	4b1a      	ldr	r3, [pc, #104]	; (8004d8c <UART_SetConfig+0x118>)
 8004d22:	fba3 0302 	umull	r0, r3, r3, r2
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	2064      	movs	r0, #100	; 0x64
 8004d2a:	fb00 f303 	mul.w	r3, r0, r3
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	3332      	adds	r3, #50	; 0x32
 8004d34:	4a15      	ldr	r2, [pc, #84]	; (8004d8c <UART_SetConfig+0x118>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d40:	4419      	add	r1, r3
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009a      	lsls	r2, r3, #2
 8004d4c:	441a      	add	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <UART_SetConfig+0x118>)
 8004d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	2064      	movs	r0, #100	; 0x64
 8004d62:	fb00 f303 	mul.w	r3, r0, r3
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	3332      	adds	r3, #50	; 0x32
 8004d6c:	4a07      	ldr	r2, [pc, #28]	; (8004d8c <UART_SetConfig+0x118>)
 8004d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	f003 020f 	and.w	r2, r3, #15
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	440a      	add	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d80:	bf00      	nop
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40013800 	.word	0x40013800
 8004d8c:	51eb851f 	.word	0x51eb851f

08004d90 <atoi>:
 8004d90:	220a      	movs	r2, #10
 8004d92:	2100      	movs	r1, #0
 8004d94:	f000 bdf4 	b.w	8005980 <strtol>

08004d98 <__errno>:
 8004d98:	4b01      	ldr	r3, [pc, #4]	; (8004da0 <__errno+0x8>)
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	2000000c 	.word	0x2000000c

08004da4 <__libc_init_array>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	2500      	movs	r5, #0
 8004da8:	4e0c      	ldr	r6, [pc, #48]	; (8004ddc <__libc_init_array+0x38>)
 8004daa:	4c0d      	ldr	r4, [pc, #52]	; (8004de0 <__libc_init_array+0x3c>)
 8004dac:	1ba4      	subs	r4, r4, r6
 8004dae:	10a4      	asrs	r4, r4, #2
 8004db0:	42a5      	cmp	r5, r4
 8004db2:	d109      	bne.n	8004dc8 <__libc_init_array+0x24>
 8004db4:	f002 fce2 	bl	800777c <_init>
 8004db8:	2500      	movs	r5, #0
 8004dba:	4e0a      	ldr	r6, [pc, #40]	; (8004de4 <__libc_init_array+0x40>)
 8004dbc:	4c0a      	ldr	r4, [pc, #40]	; (8004de8 <__libc_init_array+0x44>)
 8004dbe:	1ba4      	subs	r4, r4, r6
 8004dc0:	10a4      	asrs	r4, r4, #2
 8004dc2:	42a5      	cmp	r5, r4
 8004dc4:	d105      	bne.n	8004dd2 <__libc_init_array+0x2e>
 8004dc6:	bd70      	pop	{r4, r5, r6, pc}
 8004dc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dcc:	4798      	blx	r3
 8004dce:	3501      	adds	r5, #1
 8004dd0:	e7ee      	b.n	8004db0 <__libc_init_array+0xc>
 8004dd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dd6:	4798      	blx	r3
 8004dd8:	3501      	adds	r5, #1
 8004dda:	e7f2      	b.n	8004dc2 <__libc_init_array+0x1e>
 8004ddc:	08007de0 	.word	0x08007de0
 8004de0:	08007de0 	.word	0x08007de0
 8004de4:	08007de0 	.word	0x08007de0
 8004de8:	08007de4 	.word	0x08007de4

08004dec <memcpy>:
 8004dec:	b510      	push	{r4, lr}
 8004dee:	1e43      	subs	r3, r0, #1
 8004df0:	440a      	add	r2, r1
 8004df2:	4291      	cmp	r1, r2
 8004df4:	d100      	bne.n	8004df8 <memcpy+0xc>
 8004df6:	bd10      	pop	{r4, pc}
 8004df8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e00:	e7f7      	b.n	8004df2 <memcpy+0x6>

08004e02 <memset>:
 8004e02:	4603      	mov	r3, r0
 8004e04:	4402      	add	r2, r0
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d100      	bne.n	8004e0c <memset+0xa>
 8004e0a:	4770      	bx	lr
 8004e0c:	f803 1b01 	strb.w	r1, [r3], #1
 8004e10:	e7f9      	b.n	8004e06 <memset+0x4>

08004e12 <__cvt>:
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e18:	461e      	mov	r6, r3
 8004e1a:	bfbb      	ittet	lt
 8004e1c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004e20:	461e      	movlt	r6, r3
 8004e22:	2300      	movge	r3, #0
 8004e24:	232d      	movlt	r3, #45	; 0x2d
 8004e26:	b088      	sub	sp, #32
 8004e28:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004e2a:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004e2e:	f027 0720 	bic.w	r7, r7, #32
 8004e32:	2f46      	cmp	r7, #70	; 0x46
 8004e34:	4614      	mov	r4, r2
 8004e36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004e38:	700b      	strb	r3, [r1, #0]
 8004e3a:	d004      	beq.n	8004e46 <__cvt+0x34>
 8004e3c:	2f45      	cmp	r7, #69	; 0x45
 8004e3e:	d100      	bne.n	8004e42 <__cvt+0x30>
 8004e40:	3501      	adds	r5, #1
 8004e42:	2302      	movs	r3, #2
 8004e44:	e000      	b.n	8004e48 <__cvt+0x36>
 8004e46:	2303      	movs	r3, #3
 8004e48:	aa07      	add	r2, sp, #28
 8004e4a:	9204      	str	r2, [sp, #16]
 8004e4c:	aa06      	add	r2, sp, #24
 8004e4e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004e52:	e9cd 3500 	strd	r3, r5, [sp]
 8004e56:	4622      	mov	r2, r4
 8004e58:	4633      	mov	r3, r6
 8004e5a:	f000 fef5 	bl	8005c48 <_dtoa_r>
 8004e5e:	2f47      	cmp	r7, #71	; 0x47
 8004e60:	4680      	mov	r8, r0
 8004e62:	d102      	bne.n	8004e6a <__cvt+0x58>
 8004e64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e66:	07db      	lsls	r3, r3, #31
 8004e68:	d526      	bpl.n	8004eb8 <__cvt+0xa6>
 8004e6a:	2f46      	cmp	r7, #70	; 0x46
 8004e6c:	eb08 0905 	add.w	r9, r8, r5
 8004e70:	d111      	bne.n	8004e96 <__cvt+0x84>
 8004e72:	f898 3000 	ldrb.w	r3, [r8]
 8004e76:	2b30      	cmp	r3, #48	; 0x30
 8004e78:	d10a      	bne.n	8004e90 <__cvt+0x7e>
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4620      	mov	r0, r4
 8004e80:	4631      	mov	r1, r6
 8004e82:	f7fb fd9b 	bl	80009bc <__aeabi_dcmpeq>
 8004e86:	b918      	cbnz	r0, 8004e90 <__cvt+0x7e>
 8004e88:	f1c5 0501 	rsb	r5, r5, #1
 8004e8c:	f8ca 5000 	str.w	r5, [sl]
 8004e90:	f8da 3000 	ldr.w	r3, [sl]
 8004e94:	4499      	add	r9, r3
 8004e96:	2200      	movs	r2, #0
 8004e98:	2300      	movs	r3, #0
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	4631      	mov	r1, r6
 8004e9e:	f7fb fd8d 	bl	80009bc <__aeabi_dcmpeq>
 8004ea2:	b938      	cbnz	r0, 8004eb4 <__cvt+0xa2>
 8004ea4:	2230      	movs	r2, #48	; 0x30
 8004ea6:	9b07      	ldr	r3, [sp, #28]
 8004ea8:	454b      	cmp	r3, r9
 8004eaa:	d205      	bcs.n	8004eb8 <__cvt+0xa6>
 8004eac:	1c59      	adds	r1, r3, #1
 8004eae:	9107      	str	r1, [sp, #28]
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	e7f8      	b.n	8004ea6 <__cvt+0x94>
 8004eb4:	f8cd 901c 	str.w	r9, [sp, #28]
 8004eb8:	4640      	mov	r0, r8
 8004eba:	9b07      	ldr	r3, [sp, #28]
 8004ebc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ebe:	eba3 0308 	sub.w	r3, r3, r8
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	b008      	add	sp, #32
 8004ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004eca <__exponent>:
 8004eca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ecc:	2900      	cmp	r1, #0
 8004ece:	bfb4      	ite	lt
 8004ed0:	232d      	movlt	r3, #45	; 0x2d
 8004ed2:	232b      	movge	r3, #43	; 0x2b
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	bfb8      	it	lt
 8004ed8:	4249      	neglt	r1, r1
 8004eda:	2909      	cmp	r1, #9
 8004edc:	f804 2b02 	strb.w	r2, [r4], #2
 8004ee0:	7043      	strb	r3, [r0, #1]
 8004ee2:	dd21      	ble.n	8004f28 <__exponent+0x5e>
 8004ee4:	f10d 0307 	add.w	r3, sp, #7
 8004ee8:	461f      	mov	r7, r3
 8004eea:	260a      	movs	r6, #10
 8004eec:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ef0:	fb06 1115 	mls	r1, r6, r5, r1
 8004ef4:	2d09      	cmp	r5, #9
 8004ef6:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004efa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004efe:	f103 32ff 	add.w	r2, r3, #4294967295
 8004f02:	4629      	mov	r1, r5
 8004f04:	dc09      	bgt.n	8004f1a <__exponent+0x50>
 8004f06:	3130      	adds	r1, #48	; 0x30
 8004f08:	3b02      	subs	r3, #2
 8004f0a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f0e:	42bb      	cmp	r3, r7
 8004f10:	4622      	mov	r2, r4
 8004f12:	d304      	bcc.n	8004f1e <__exponent+0x54>
 8004f14:	1a10      	subs	r0, r2, r0
 8004f16:	b003      	add	sp, #12
 8004f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	e7e6      	b.n	8004eec <__exponent+0x22>
 8004f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f22:	f804 2b01 	strb.w	r2, [r4], #1
 8004f26:	e7f2      	b.n	8004f0e <__exponent+0x44>
 8004f28:	2330      	movs	r3, #48	; 0x30
 8004f2a:	4419      	add	r1, r3
 8004f2c:	7083      	strb	r3, [r0, #2]
 8004f2e:	1d02      	adds	r2, r0, #4
 8004f30:	70c1      	strb	r1, [r0, #3]
 8004f32:	e7ef      	b.n	8004f14 <__exponent+0x4a>

08004f34 <_printf_float>:
 8004f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f38:	b091      	sub	sp, #68	; 0x44
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004f3e:	4693      	mov	fp, r2
 8004f40:	461e      	mov	r6, r3
 8004f42:	4605      	mov	r5, r0
 8004f44:	f001 fdb2 	bl	8006aac <_localeconv_r>
 8004f48:	6803      	ldr	r3, [r0, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f4e:	f7fb f909 	bl	8000164 <strlen>
 8004f52:	2300      	movs	r3, #0
 8004f54:	930e      	str	r3, [sp, #56]	; 0x38
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	900a      	str	r0, [sp, #40]	; 0x28
 8004f5a:	3307      	adds	r3, #7
 8004f5c:	f023 0307 	bic.w	r3, r3, #7
 8004f60:	f103 0208 	add.w	r2, r3, #8
 8004f64:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004f68:	f8d4 a000 	ldr.w	sl, [r4]
 8004f6c:	603a      	str	r2, [r7, #0]
 8004f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f76:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004f7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f80:	f04f 32ff 	mov.w	r2, #4294967295
 8004f84:	4ba6      	ldr	r3, [pc, #664]	; (8005220 <_printf_float+0x2ec>)
 8004f86:	4638      	mov	r0, r7
 8004f88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f8a:	f7fb fd49 	bl	8000a20 <__aeabi_dcmpun>
 8004f8e:	bb68      	cbnz	r0, 8004fec <_printf_float+0xb8>
 8004f90:	f04f 32ff 	mov.w	r2, #4294967295
 8004f94:	4ba2      	ldr	r3, [pc, #648]	; (8005220 <_printf_float+0x2ec>)
 8004f96:	4638      	mov	r0, r7
 8004f98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f9a:	f7fb fd23 	bl	80009e4 <__aeabi_dcmple>
 8004f9e:	bb28      	cbnz	r0, 8004fec <_printf_float+0xb8>
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	4638      	mov	r0, r7
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	f7fb fd12 	bl	80009d0 <__aeabi_dcmplt>
 8004fac:	b110      	cbz	r0, 8004fb4 <_printf_float+0x80>
 8004fae:	232d      	movs	r3, #45	; 0x2d
 8004fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb4:	4f9b      	ldr	r7, [pc, #620]	; (8005224 <_printf_float+0x2f0>)
 8004fb6:	4b9c      	ldr	r3, [pc, #624]	; (8005228 <_printf_float+0x2f4>)
 8004fb8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004fbc:	bf98      	it	ls
 8004fbe:	461f      	movls	r7, r3
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	f04f 0900 	mov.w	r9, #0
 8004fc6:	6123      	str	r3, [r4, #16]
 8004fc8:	f02a 0304 	bic.w	r3, sl, #4
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	9600      	str	r6, [sp, #0]
 8004fd0:	465b      	mov	r3, fp
 8004fd2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	f000 f9e2 	bl	80053a0 <_printf_common>
 8004fdc:	3001      	adds	r0, #1
 8004fde:	f040 8090 	bne.w	8005102 <_printf_float+0x1ce>
 8004fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe6:	b011      	add	sp, #68	; 0x44
 8004fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fec:	463a      	mov	r2, r7
 8004fee:	464b      	mov	r3, r9
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	f7fb fd14 	bl	8000a20 <__aeabi_dcmpun>
 8004ff8:	b110      	cbz	r0, 8005000 <_printf_float+0xcc>
 8004ffa:	4f8c      	ldr	r7, [pc, #560]	; (800522c <_printf_float+0x2f8>)
 8004ffc:	4b8c      	ldr	r3, [pc, #560]	; (8005230 <_printf_float+0x2fc>)
 8004ffe:	e7db      	b.n	8004fb8 <_printf_float+0x84>
 8005000:	6863      	ldr	r3, [r4, #4]
 8005002:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005006:	1c59      	adds	r1, r3, #1
 8005008:	a80d      	add	r0, sp, #52	; 0x34
 800500a:	a90e      	add	r1, sp, #56	; 0x38
 800500c:	d140      	bne.n	8005090 <_printf_float+0x15c>
 800500e:	2306      	movs	r3, #6
 8005010:	6063      	str	r3, [r4, #4]
 8005012:	f04f 0c00 	mov.w	ip, #0
 8005016:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800501a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800501e:	6863      	ldr	r3, [r4, #4]
 8005020:	6022      	str	r2, [r4, #0]
 8005022:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	463a      	mov	r2, r7
 800502a:	464b      	mov	r3, r9
 800502c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005030:	4628      	mov	r0, r5
 8005032:	f7ff feee 	bl	8004e12 <__cvt>
 8005036:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800503a:	2b47      	cmp	r3, #71	; 0x47
 800503c:	4607      	mov	r7, r0
 800503e:	d109      	bne.n	8005054 <_printf_float+0x120>
 8005040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005042:	1cd8      	adds	r0, r3, #3
 8005044:	db02      	blt.n	800504c <_printf_float+0x118>
 8005046:	6862      	ldr	r2, [r4, #4]
 8005048:	4293      	cmp	r3, r2
 800504a:	dd47      	ble.n	80050dc <_printf_float+0x1a8>
 800504c:	f1a8 0802 	sub.w	r8, r8, #2
 8005050:	fa5f f888 	uxtb.w	r8, r8
 8005054:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005058:	990d      	ldr	r1, [sp, #52]	; 0x34
 800505a:	d824      	bhi.n	80050a6 <_printf_float+0x172>
 800505c:	3901      	subs	r1, #1
 800505e:	4642      	mov	r2, r8
 8005060:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005064:	910d      	str	r1, [sp, #52]	; 0x34
 8005066:	f7ff ff30 	bl	8004eca <__exponent>
 800506a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800506c:	4681      	mov	r9, r0
 800506e:	1813      	adds	r3, r2, r0
 8005070:	2a01      	cmp	r2, #1
 8005072:	6123      	str	r3, [r4, #16]
 8005074:	dc02      	bgt.n	800507c <_printf_float+0x148>
 8005076:	6822      	ldr	r2, [r4, #0]
 8005078:	07d1      	lsls	r1, r2, #31
 800507a:	d501      	bpl.n	8005080 <_printf_float+0x14c>
 800507c:	3301      	adds	r3, #1
 800507e:	6123      	str	r3, [r4, #16]
 8005080:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0a2      	beq.n	8004fce <_printf_float+0x9a>
 8005088:	232d      	movs	r3, #45	; 0x2d
 800508a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800508e:	e79e      	b.n	8004fce <_printf_float+0x9a>
 8005090:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005094:	f000 816e 	beq.w	8005374 <_printf_float+0x440>
 8005098:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800509c:	d1b9      	bne.n	8005012 <_printf_float+0xde>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1b7      	bne.n	8005012 <_printf_float+0xde>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e7b4      	b.n	8005010 <_printf_float+0xdc>
 80050a6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80050aa:	d119      	bne.n	80050e0 <_printf_float+0x1ac>
 80050ac:	2900      	cmp	r1, #0
 80050ae:	6863      	ldr	r3, [r4, #4]
 80050b0:	dd0c      	ble.n	80050cc <_printf_float+0x198>
 80050b2:	6121      	str	r1, [r4, #16]
 80050b4:	b913      	cbnz	r3, 80050bc <_printf_float+0x188>
 80050b6:	6822      	ldr	r2, [r4, #0]
 80050b8:	07d2      	lsls	r2, r2, #31
 80050ba:	d502      	bpl.n	80050c2 <_printf_float+0x18e>
 80050bc:	3301      	adds	r3, #1
 80050be:	440b      	add	r3, r1
 80050c0:	6123      	str	r3, [r4, #16]
 80050c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050c4:	f04f 0900 	mov.w	r9, #0
 80050c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80050ca:	e7d9      	b.n	8005080 <_printf_float+0x14c>
 80050cc:	b913      	cbnz	r3, 80050d4 <_printf_float+0x1a0>
 80050ce:	6822      	ldr	r2, [r4, #0]
 80050d0:	07d0      	lsls	r0, r2, #31
 80050d2:	d501      	bpl.n	80050d8 <_printf_float+0x1a4>
 80050d4:	3302      	adds	r3, #2
 80050d6:	e7f3      	b.n	80050c0 <_printf_float+0x18c>
 80050d8:	2301      	movs	r3, #1
 80050da:	e7f1      	b.n	80050c0 <_printf_float+0x18c>
 80050dc:	f04f 0867 	mov.w	r8, #103	; 0x67
 80050e0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80050e4:	4293      	cmp	r3, r2
 80050e6:	db05      	blt.n	80050f4 <_printf_float+0x1c0>
 80050e8:	6822      	ldr	r2, [r4, #0]
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	07d1      	lsls	r1, r2, #31
 80050ee:	d5e8      	bpl.n	80050c2 <_printf_float+0x18e>
 80050f0:	3301      	adds	r3, #1
 80050f2:	e7e5      	b.n	80050c0 <_printf_float+0x18c>
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	bfcc      	ite	gt
 80050f8:	2301      	movgt	r3, #1
 80050fa:	f1c3 0302 	rsble	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	e7de      	b.n	80050c0 <_printf_float+0x18c>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	055a      	lsls	r2, r3, #21
 8005106:	d407      	bmi.n	8005118 <_printf_float+0x1e4>
 8005108:	6923      	ldr	r3, [r4, #16]
 800510a:	463a      	mov	r2, r7
 800510c:	4659      	mov	r1, fp
 800510e:	4628      	mov	r0, r5
 8005110:	47b0      	blx	r6
 8005112:	3001      	adds	r0, #1
 8005114:	d129      	bne.n	800516a <_printf_float+0x236>
 8005116:	e764      	b.n	8004fe2 <_printf_float+0xae>
 8005118:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800511c:	f240 80d7 	bls.w	80052ce <_printf_float+0x39a>
 8005120:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005124:	2200      	movs	r2, #0
 8005126:	2300      	movs	r3, #0
 8005128:	f7fb fc48 	bl	80009bc <__aeabi_dcmpeq>
 800512c:	b388      	cbz	r0, 8005192 <_printf_float+0x25e>
 800512e:	2301      	movs	r3, #1
 8005130:	4a40      	ldr	r2, [pc, #256]	; (8005234 <_printf_float+0x300>)
 8005132:	4659      	mov	r1, fp
 8005134:	4628      	mov	r0, r5
 8005136:	47b0      	blx	r6
 8005138:	3001      	adds	r0, #1
 800513a:	f43f af52 	beq.w	8004fe2 <_printf_float+0xae>
 800513e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005142:	429a      	cmp	r2, r3
 8005144:	db02      	blt.n	800514c <_printf_float+0x218>
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	07d8      	lsls	r0, r3, #31
 800514a:	d50e      	bpl.n	800516a <_printf_float+0x236>
 800514c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005150:	4659      	mov	r1, fp
 8005152:	4628      	mov	r0, r5
 8005154:	47b0      	blx	r6
 8005156:	3001      	adds	r0, #1
 8005158:	f43f af43 	beq.w	8004fe2 <_printf_float+0xae>
 800515c:	2700      	movs	r7, #0
 800515e:	f104 081a 	add.w	r8, r4, #26
 8005162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005164:	3b01      	subs	r3, #1
 8005166:	42bb      	cmp	r3, r7
 8005168:	dc09      	bgt.n	800517e <_printf_float+0x24a>
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	079f      	lsls	r7, r3, #30
 800516e:	f100 80fd 	bmi.w	800536c <_printf_float+0x438>
 8005172:	68e0      	ldr	r0, [r4, #12]
 8005174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005176:	4298      	cmp	r0, r3
 8005178:	bfb8      	it	lt
 800517a:	4618      	movlt	r0, r3
 800517c:	e733      	b.n	8004fe6 <_printf_float+0xb2>
 800517e:	2301      	movs	r3, #1
 8005180:	4642      	mov	r2, r8
 8005182:	4659      	mov	r1, fp
 8005184:	4628      	mov	r0, r5
 8005186:	47b0      	blx	r6
 8005188:	3001      	adds	r0, #1
 800518a:	f43f af2a 	beq.w	8004fe2 <_printf_float+0xae>
 800518e:	3701      	adds	r7, #1
 8005190:	e7e7      	b.n	8005162 <_printf_float+0x22e>
 8005192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005194:	2b00      	cmp	r3, #0
 8005196:	dc2b      	bgt.n	80051f0 <_printf_float+0x2bc>
 8005198:	2301      	movs	r3, #1
 800519a:	4a26      	ldr	r2, [pc, #152]	; (8005234 <_printf_float+0x300>)
 800519c:	4659      	mov	r1, fp
 800519e:	4628      	mov	r0, r5
 80051a0:	47b0      	blx	r6
 80051a2:	3001      	adds	r0, #1
 80051a4:	f43f af1d 	beq.w	8004fe2 <_printf_float+0xae>
 80051a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051aa:	b923      	cbnz	r3, 80051b6 <_printf_float+0x282>
 80051ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051ae:	b913      	cbnz	r3, 80051b6 <_printf_float+0x282>
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	07d9      	lsls	r1, r3, #31
 80051b4:	d5d9      	bpl.n	800516a <_printf_float+0x236>
 80051b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051ba:	4659      	mov	r1, fp
 80051bc:	4628      	mov	r0, r5
 80051be:	47b0      	blx	r6
 80051c0:	3001      	adds	r0, #1
 80051c2:	f43f af0e 	beq.w	8004fe2 <_printf_float+0xae>
 80051c6:	f04f 0800 	mov.w	r8, #0
 80051ca:	f104 091a 	add.w	r9, r4, #26
 80051ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051d0:	425b      	negs	r3, r3
 80051d2:	4543      	cmp	r3, r8
 80051d4:	dc01      	bgt.n	80051da <_printf_float+0x2a6>
 80051d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051d8:	e797      	b.n	800510a <_printf_float+0x1d6>
 80051da:	2301      	movs	r3, #1
 80051dc:	464a      	mov	r2, r9
 80051de:	4659      	mov	r1, fp
 80051e0:	4628      	mov	r0, r5
 80051e2:	47b0      	blx	r6
 80051e4:	3001      	adds	r0, #1
 80051e6:	f43f aefc 	beq.w	8004fe2 <_printf_float+0xae>
 80051ea:	f108 0801 	add.w	r8, r8, #1
 80051ee:	e7ee      	b.n	80051ce <_printf_float+0x29a>
 80051f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051f4:	429a      	cmp	r2, r3
 80051f6:	bfa8      	it	ge
 80051f8:	461a      	movge	r2, r3
 80051fa:	2a00      	cmp	r2, #0
 80051fc:	4690      	mov	r8, r2
 80051fe:	dd07      	ble.n	8005210 <_printf_float+0x2dc>
 8005200:	4613      	mov	r3, r2
 8005202:	4659      	mov	r1, fp
 8005204:	463a      	mov	r2, r7
 8005206:	4628      	mov	r0, r5
 8005208:	47b0      	blx	r6
 800520a:	3001      	adds	r0, #1
 800520c:	f43f aee9 	beq.w	8004fe2 <_printf_float+0xae>
 8005210:	f104 031a 	add.w	r3, r4, #26
 8005214:	f04f 0a00 	mov.w	sl, #0
 8005218:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800521c:	930b      	str	r3, [sp, #44]	; 0x2c
 800521e:	e015      	b.n	800524c <_printf_float+0x318>
 8005220:	7fefffff 	.word	0x7fefffff
 8005224:	08007b24 	.word	0x08007b24
 8005228:	08007b20 	.word	0x08007b20
 800522c:	08007b2c 	.word	0x08007b2c
 8005230:	08007b28 	.word	0x08007b28
 8005234:	08007b30 	.word	0x08007b30
 8005238:	2301      	movs	r3, #1
 800523a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800523c:	4659      	mov	r1, fp
 800523e:	4628      	mov	r0, r5
 8005240:	47b0      	blx	r6
 8005242:	3001      	adds	r0, #1
 8005244:	f43f aecd 	beq.w	8004fe2 <_printf_float+0xae>
 8005248:	f10a 0a01 	add.w	sl, sl, #1
 800524c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005250:	eba9 0308 	sub.w	r3, r9, r8
 8005254:	4553      	cmp	r3, sl
 8005256:	dcef      	bgt.n	8005238 <_printf_float+0x304>
 8005258:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800525c:	429a      	cmp	r2, r3
 800525e:	444f      	add	r7, r9
 8005260:	db14      	blt.n	800528c <_printf_float+0x358>
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	07da      	lsls	r2, r3, #31
 8005266:	d411      	bmi.n	800528c <_printf_float+0x358>
 8005268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800526a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800526c:	eba3 0209 	sub.w	r2, r3, r9
 8005270:	eba3 0901 	sub.w	r9, r3, r1
 8005274:	4591      	cmp	r9, r2
 8005276:	bfa8      	it	ge
 8005278:	4691      	movge	r9, r2
 800527a:	f1b9 0f00 	cmp.w	r9, #0
 800527e:	dc0d      	bgt.n	800529c <_printf_float+0x368>
 8005280:	2700      	movs	r7, #0
 8005282:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005286:	f104 081a 	add.w	r8, r4, #26
 800528a:	e018      	b.n	80052be <_printf_float+0x38a>
 800528c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005290:	4659      	mov	r1, fp
 8005292:	4628      	mov	r0, r5
 8005294:	47b0      	blx	r6
 8005296:	3001      	adds	r0, #1
 8005298:	d1e6      	bne.n	8005268 <_printf_float+0x334>
 800529a:	e6a2      	b.n	8004fe2 <_printf_float+0xae>
 800529c:	464b      	mov	r3, r9
 800529e:	463a      	mov	r2, r7
 80052a0:	4659      	mov	r1, fp
 80052a2:	4628      	mov	r0, r5
 80052a4:	47b0      	blx	r6
 80052a6:	3001      	adds	r0, #1
 80052a8:	d1ea      	bne.n	8005280 <_printf_float+0x34c>
 80052aa:	e69a      	b.n	8004fe2 <_printf_float+0xae>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4642      	mov	r2, r8
 80052b0:	4659      	mov	r1, fp
 80052b2:	4628      	mov	r0, r5
 80052b4:	47b0      	blx	r6
 80052b6:	3001      	adds	r0, #1
 80052b8:	f43f ae93 	beq.w	8004fe2 <_printf_float+0xae>
 80052bc:	3701      	adds	r7, #1
 80052be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80052c2:	1a9b      	subs	r3, r3, r2
 80052c4:	eba3 0309 	sub.w	r3, r3, r9
 80052c8:	42bb      	cmp	r3, r7
 80052ca:	dcef      	bgt.n	80052ac <_printf_float+0x378>
 80052cc:	e74d      	b.n	800516a <_printf_float+0x236>
 80052ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052d0:	2a01      	cmp	r2, #1
 80052d2:	dc01      	bgt.n	80052d8 <_printf_float+0x3a4>
 80052d4:	07db      	lsls	r3, r3, #31
 80052d6:	d538      	bpl.n	800534a <_printf_float+0x416>
 80052d8:	2301      	movs	r3, #1
 80052da:	463a      	mov	r2, r7
 80052dc:	4659      	mov	r1, fp
 80052de:	4628      	mov	r0, r5
 80052e0:	47b0      	blx	r6
 80052e2:	3001      	adds	r0, #1
 80052e4:	f43f ae7d 	beq.w	8004fe2 <_printf_float+0xae>
 80052e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052ec:	4659      	mov	r1, fp
 80052ee:	4628      	mov	r0, r5
 80052f0:	47b0      	blx	r6
 80052f2:	3001      	adds	r0, #1
 80052f4:	f107 0701 	add.w	r7, r7, #1
 80052f8:	f43f ae73 	beq.w	8004fe2 <_printf_float+0xae>
 80052fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005302:	2200      	movs	r2, #0
 8005304:	f103 38ff 	add.w	r8, r3, #4294967295
 8005308:	2300      	movs	r3, #0
 800530a:	f7fb fb57 	bl	80009bc <__aeabi_dcmpeq>
 800530e:	b9c0      	cbnz	r0, 8005342 <_printf_float+0x40e>
 8005310:	4643      	mov	r3, r8
 8005312:	463a      	mov	r2, r7
 8005314:	4659      	mov	r1, fp
 8005316:	4628      	mov	r0, r5
 8005318:	47b0      	blx	r6
 800531a:	3001      	adds	r0, #1
 800531c:	d10d      	bne.n	800533a <_printf_float+0x406>
 800531e:	e660      	b.n	8004fe2 <_printf_float+0xae>
 8005320:	2301      	movs	r3, #1
 8005322:	4642      	mov	r2, r8
 8005324:	4659      	mov	r1, fp
 8005326:	4628      	mov	r0, r5
 8005328:	47b0      	blx	r6
 800532a:	3001      	adds	r0, #1
 800532c:	f43f ae59 	beq.w	8004fe2 <_printf_float+0xae>
 8005330:	3701      	adds	r7, #1
 8005332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005334:	3b01      	subs	r3, #1
 8005336:	42bb      	cmp	r3, r7
 8005338:	dcf2      	bgt.n	8005320 <_printf_float+0x3ec>
 800533a:	464b      	mov	r3, r9
 800533c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005340:	e6e4      	b.n	800510c <_printf_float+0x1d8>
 8005342:	2700      	movs	r7, #0
 8005344:	f104 081a 	add.w	r8, r4, #26
 8005348:	e7f3      	b.n	8005332 <_printf_float+0x3fe>
 800534a:	2301      	movs	r3, #1
 800534c:	e7e1      	b.n	8005312 <_printf_float+0x3de>
 800534e:	2301      	movs	r3, #1
 8005350:	4642      	mov	r2, r8
 8005352:	4659      	mov	r1, fp
 8005354:	4628      	mov	r0, r5
 8005356:	47b0      	blx	r6
 8005358:	3001      	adds	r0, #1
 800535a:	f43f ae42 	beq.w	8004fe2 <_printf_float+0xae>
 800535e:	3701      	adds	r7, #1
 8005360:	68e3      	ldr	r3, [r4, #12]
 8005362:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	42bb      	cmp	r3, r7
 8005368:	dcf1      	bgt.n	800534e <_printf_float+0x41a>
 800536a:	e702      	b.n	8005172 <_printf_float+0x23e>
 800536c:	2700      	movs	r7, #0
 800536e:	f104 0819 	add.w	r8, r4, #25
 8005372:	e7f5      	b.n	8005360 <_printf_float+0x42c>
 8005374:	2b00      	cmp	r3, #0
 8005376:	f43f ae94 	beq.w	80050a2 <_printf_float+0x16e>
 800537a:	f04f 0c00 	mov.w	ip, #0
 800537e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005382:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005386:	6022      	str	r2, [r4, #0]
 8005388:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800538c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	463a      	mov	r2, r7
 8005394:	464b      	mov	r3, r9
 8005396:	4628      	mov	r0, r5
 8005398:	f7ff fd3b 	bl	8004e12 <__cvt>
 800539c:	4607      	mov	r7, r0
 800539e:	e64f      	b.n	8005040 <_printf_float+0x10c>

080053a0 <_printf_common>:
 80053a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a4:	4691      	mov	r9, r2
 80053a6:	461f      	mov	r7, r3
 80053a8:	688a      	ldr	r2, [r1, #8]
 80053aa:	690b      	ldr	r3, [r1, #16]
 80053ac:	4606      	mov	r6, r0
 80053ae:	4293      	cmp	r3, r2
 80053b0:	bfb8      	it	lt
 80053b2:	4613      	movlt	r3, r2
 80053b4:	f8c9 3000 	str.w	r3, [r9]
 80053b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053bc:	460c      	mov	r4, r1
 80053be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053c2:	b112      	cbz	r2, 80053ca <_printf_common+0x2a>
 80053c4:	3301      	adds	r3, #1
 80053c6:	f8c9 3000 	str.w	r3, [r9]
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	0699      	lsls	r1, r3, #26
 80053ce:	bf42      	ittt	mi
 80053d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80053d4:	3302      	addmi	r3, #2
 80053d6:	f8c9 3000 	strmi.w	r3, [r9]
 80053da:	6825      	ldr	r5, [r4, #0]
 80053dc:	f015 0506 	ands.w	r5, r5, #6
 80053e0:	d107      	bne.n	80053f2 <_printf_common+0x52>
 80053e2:	f104 0a19 	add.w	sl, r4, #25
 80053e6:	68e3      	ldr	r3, [r4, #12]
 80053e8:	f8d9 2000 	ldr.w	r2, [r9]
 80053ec:	1a9b      	subs	r3, r3, r2
 80053ee:	42ab      	cmp	r3, r5
 80053f0:	dc29      	bgt.n	8005446 <_printf_common+0xa6>
 80053f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80053f6:	6822      	ldr	r2, [r4, #0]
 80053f8:	3300      	adds	r3, #0
 80053fa:	bf18      	it	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	0692      	lsls	r2, r2, #26
 8005400:	d42e      	bmi.n	8005460 <_printf_common+0xc0>
 8005402:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005406:	4639      	mov	r1, r7
 8005408:	4630      	mov	r0, r6
 800540a:	47c0      	blx	r8
 800540c:	3001      	adds	r0, #1
 800540e:	d021      	beq.n	8005454 <_printf_common+0xb4>
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	68e5      	ldr	r5, [r4, #12]
 8005414:	f003 0306 	and.w	r3, r3, #6
 8005418:	2b04      	cmp	r3, #4
 800541a:	bf18      	it	ne
 800541c:	2500      	movne	r5, #0
 800541e:	f8d9 2000 	ldr.w	r2, [r9]
 8005422:	f04f 0900 	mov.w	r9, #0
 8005426:	bf08      	it	eq
 8005428:	1aad      	subeq	r5, r5, r2
 800542a:	68a3      	ldr	r3, [r4, #8]
 800542c:	6922      	ldr	r2, [r4, #16]
 800542e:	bf08      	it	eq
 8005430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005434:	4293      	cmp	r3, r2
 8005436:	bfc4      	itt	gt
 8005438:	1a9b      	subgt	r3, r3, r2
 800543a:	18ed      	addgt	r5, r5, r3
 800543c:	341a      	adds	r4, #26
 800543e:	454d      	cmp	r5, r9
 8005440:	d11a      	bne.n	8005478 <_printf_common+0xd8>
 8005442:	2000      	movs	r0, #0
 8005444:	e008      	b.n	8005458 <_printf_common+0xb8>
 8005446:	2301      	movs	r3, #1
 8005448:	4652      	mov	r2, sl
 800544a:	4639      	mov	r1, r7
 800544c:	4630      	mov	r0, r6
 800544e:	47c0      	blx	r8
 8005450:	3001      	adds	r0, #1
 8005452:	d103      	bne.n	800545c <_printf_common+0xbc>
 8005454:	f04f 30ff 	mov.w	r0, #4294967295
 8005458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545c:	3501      	adds	r5, #1
 800545e:	e7c2      	b.n	80053e6 <_printf_common+0x46>
 8005460:	2030      	movs	r0, #48	; 0x30
 8005462:	18e1      	adds	r1, r4, r3
 8005464:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800546e:	4422      	add	r2, r4
 8005470:	3302      	adds	r3, #2
 8005472:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005476:	e7c4      	b.n	8005402 <_printf_common+0x62>
 8005478:	2301      	movs	r3, #1
 800547a:	4622      	mov	r2, r4
 800547c:	4639      	mov	r1, r7
 800547e:	4630      	mov	r0, r6
 8005480:	47c0      	blx	r8
 8005482:	3001      	adds	r0, #1
 8005484:	d0e6      	beq.n	8005454 <_printf_common+0xb4>
 8005486:	f109 0901 	add.w	r9, r9, #1
 800548a:	e7d8      	b.n	800543e <_printf_common+0x9e>

0800548c <_printf_i>:
 800548c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005490:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005494:	460c      	mov	r4, r1
 8005496:	7e09      	ldrb	r1, [r1, #24]
 8005498:	b085      	sub	sp, #20
 800549a:	296e      	cmp	r1, #110	; 0x6e
 800549c:	4617      	mov	r7, r2
 800549e:	4606      	mov	r6, r0
 80054a0:	4698      	mov	r8, r3
 80054a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054a4:	f000 80b3 	beq.w	800560e <_printf_i+0x182>
 80054a8:	d822      	bhi.n	80054f0 <_printf_i+0x64>
 80054aa:	2963      	cmp	r1, #99	; 0x63
 80054ac:	d036      	beq.n	800551c <_printf_i+0x90>
 80054ae:	d80a      	bhi.n	80054c6 <_printf_i+0x3a>
 80054b0:	2900      	cmp	r1, #0
 80054b2:	f000 80b9 	beq.w	8005628 <_printf_i+0x19c>
 80054b6:	2958      	cmp	r1, #88	; 0x58
 80054b8:	f000 8083 	beq.w	80055c2 <_printf_i+0x136>
 80054bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80054c4:	e032      	b.n	800552c <_printf_i+0xa0>
 80054c6:	2964      	cmp	r1, #100	; 0x64
 80054c8:	d001      	beq.n	80054ce <_printf_i+0x42>
 80054ca:	2969      	cmp	r1, #105	; 0x69
 80054cc:	d1f6      	bne.n	80054bc <_printf_i+0x30>
 80054ce:	6820      	ldr	r0, [r4, #0]
 80054d0:	6813      	ldr	r3, [r2, #0]
 80054d2:	0605      	lsls	r5, r0, #24
 80054d4:	f103 0104 	add.w	r1, r3, #4
 80054d8:	d52a      	bpl.n	8005530 <_printf_i+0xa4>
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6011      	str	r1, [r2, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	da03      	bge.n	80054ea <_printf_i+0x5e>
 80054e2:	222d      	movs	r2, #45	; 0x2d
 80054e4:	425b      	negs	r3, r3
 80054e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80054ea:	486f      	ldr	r0, [pc, #444]	; (80056a8 <_printf_i+0x21c>)
 80054ec:	220a      	movs	r2, #10
 80054ee:	e039      	b.n	8005564 <_printf_i+0xd8>
 80054f0:	2973      	cmp	r1, #115	; 0x73
 80054f2:	f000 809d 	beq.w	8005630 <_printf_i+0x1a4>
 80054f6:	d808      	bhi.n	800550a <_printf_i+0x7e>
 80054f8:	296f      	cmp	r1, #111	; 0x6f
 80054fa:	d020      	beq.n	800553e <_printf_i+0xb2>
 80054fc:	2970      	cmp	r1, #112	; 0x70
 80054fe:	d1dd      	bne.n	80054bc <_printf_i+0x30>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	f043 0320 	orr.w	r3, r3, #32
 8005506:	6023      	str	r3, [r4, #0]
 8005508:	e003      	b.n	8005512 <_printf_i+0x86>
 800550a:	2975      	cmp	r1, #117	; 0x75
 800550c:	d017      	beq.n	800553e <_printf_i+0xb2>
 800550e:	2978      	cmp	r1, #120	; 0x78
 8005510:	d1d4      	bne.n	80054bc <_printf_i+0x30>
 8005512:	2378      	movs	r3, #120	; 0x78
 8005514:	4865      	ldr	r0, [pc, #404]	; (80056ac <_printf_i+0x220>)
 8005516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800551a:	e055      	b.n	80055c8 <_printf_i+0x13c>
 800551c:	6813      	ldr	r3, [r2, #0]
 800551e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005522:	1d19      	adds	r1, r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6011      	str	r1, [r2, #0]
 8005528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800552c:	2301      	movs	r3, #1
 800552e:	e08c      	b.n	800564a <_printf_i+0x1be>
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005536:	6011      	str	r1, [r2, #0]
 8005538:	bf18      	it	ne
 800553a:	b21b      	sxthne	r3, r3
 800553c:	e7cf      	b.n	80054de <_printf_i+0x52>
 800553e:	6813      	ldr	r3, [r2, #0]
 8005540:	6825      	ldr	r5, [r4, #0]
 8005542:	1d18      	adds	r0, r3, #4
 8005544:	6010      	str	r0, [r2, #0]
 8005546:	0628      	lsls	r0, r5, #24
 8005548:	d501      	bpl.n	800554e <_printf_i+0xc2>
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	e002      	b.n	8005554 <_printf_i+0xc8>
 800554e:	0668      	lsls	r0, r5, #25
 8005550:	d5fb      	bpl.n	800554a <_printf_i+0xbe>
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	296f      	cmp	r1, #111	; 0x6f
 8005556:	bf14      	ite	ne
 8005558:	220a      	movne	r2, #10
 800555a:	2208      	moveq	r2, #8
 800555c:	4852      	ldr	r0, [pc, #328]	; (80056a8 <_printf_i+0x21c>)
 800555e:	2100      	movs	r1, #0
 8005560:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005564:	6865      	ldr	r5, [r4, #4]
 8005566:	2d00      	cmp	r5, #0
 8005568:	60a5      	str	r5, [r4, #8]
 800556a:	f2c0 8095 	blt.w	8005698 <_printf_i+0x20c>
 800556e:	6821      	ldr	r1, [r4, #0]
 8005570:	f021 0104 	bic.w	r1, r1, #4
 8005574:	6021      	str	r1, [r4, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d13d      	bne.n	80055f6 <_printf_i+0x16a>
 800557a:	2d00      	cmp	r5, #0
 800557c:	f040 808e 	bne.w	800569c <_printf_i+0x210>
 8005580:	4665      	mov	r5, ip
 8005582:	2a08      	cmp	r2, #8
 8005584:	d10b      	bne.n	800559e <_printf_i+0x112>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	07db      	lsls	r3, r3, #31
 800558a:	d508      	bpl.n	800559e <_printf_i+0x112>
 800558c:	6923      	ldr	r3, [r4, #16]
 800558e:	6862      	ldr	r2, [r4, #4]
 8005590:	429a      	cmp	r2, r3
 8005592:	bfde      	ittt	le
 8005594:	2330      	movle	r3, #48	; 0x30
 8005596:	f805 3c01 	strble.w	r3, [r5, #-1]
 800559a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800559e:	ebac 0305 	sub.w	r3, ip, r5
 80055a2:	6123      	str	r3, [r4, #16]
 80055a4:	f8cd 8000 	str.w	r8, [sp]
 80055a8:	463b      	mov	r3, r7
 80055aa:	aa03      	add	r2, sp, #12
 80055ac:	4621      	mov	r1, r4
 80055ae:	4630      	mov	r0, r6
 80055b0:	f7ff fef6 	bl	80053a0 <_printf_common>
 80055b4:	3001      	adds	r0, #1
 80055b6:	d14d      	bne.n	8005654 <_printf_i+0x1c8>
 80055b8:	f04f 30ff 	mov.w	r0, #4294967295
 80055bc:	b005      	add	sp, #20
 80055be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055c2:	4839      	ldr	r0, [pc, #228]	; (80056a8 <_printf_i+0x21c>)
 80055c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80055c8:	6813      	ldr	r3, [r2, #0]
 80055ca:	6821      	ldr	r1, [r4, #0]
 80055cc:	1d1d      	adds	r5, r3, #4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6015      	str	r5, [r2, #0]
 80055d2:	060a      	lsls	r2, r1, #24
 80055d4:	d50b      	bpl.n	80055ee <_printf_i+0x162>
 80055d6:	07ca      	lsls	r2, r1, #31
 80055d8:	bf44      	itt	mi
 80055da:	f041 0120 	orrmi.w	r1, r1, #32
 80055de:	6021      	strmi	r1, [r4, #0]
 80055e0:	b91b      	cbnz	r3, 80055ea <_printf_i+0x15e>
 80055e2:	6822      	ldr	r2, [r4, #0]
 80055e4:	f022 0220 	bic.w	r2, r2, #32
 80055e8:	6022      	str	r2, [r4, #0]
 80055ea:	2210      	movs	r2, #16
 80055ec:	e7b7      	b.n	800555e <_printf_i+0xd2>
 80055ee:	064d      	lsls	r5, r1, #25
 80055f0:	bf48      	it	mi
 80055f2:	b29b      	uxthmi	r3, r3
 80055f4:	e7ef      	b.n	80055d6 <_printf_i+0x14a>
 80055f6:	4665      	mov	r5, ip
 80055f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80055fc:	fb02 3311 	mls	r3, r2, r1, r3
 8005600:	5cc3      	ldrb	r3, [r0, r3]
 8005602:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005606:	460b      	mov	r3, r1
 8005608:	2900      	cmp	r1, #0
 800560a:	d1f5      	bne.n	80055f8 <_printf_i+0x16c>
 800560c:	e7b9      	b.n	8005582 <_printf_i+0xf6>
 800560e:	6813      	ldr	r3, [r2, #0]
 8005610:	6825      	ldr	r5, [r4, #0]
 8005612:	1d18      	adds	r0, r3, #4
 8005614:	6961      	ldr	r1, [r4, #20]
 8005616:	6010      	str	r0, [r2, #0]
 8005618:	0628      	lsls	r0, r5, #24
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	d501      	bpl.n	8005622 <_printf_i+0x196>
 800561e:	6019      	str	r1, [r3, #0]
 8005620:	e002      	b.n	8005628 <_printf_i+0x19c>
 8005622:	066a      	lsls	r2, r5, #25
 8005624:	d5fb      	bpl.n	800561e <_printf_i+0x192>
 8005626:	8019      	strh	r1, [r3, #0]
 8005628:	2300      	movs	r3, #0
 800562a:	4665      	mov	r5, ip
 800562c:	6123      	str	r3, [r4, #16]
 800562e:	e7b9      	b.n	80055a4 <_printf_i+0x118>
 8005630:	6813      	ldr	r3, [r2, #0]
 8005632:	1d19      	adds	r1, r3, #4
 8005634:	6011      	str	r1, [r2, #0]
 8005636:	681d      	ldr	r5, [r3, #0]
 8005638:	6862      	ldr	r2, [r4, #4]
 800563a:	2100      	movs	r1, #0
 800563c:	4628      	mov	r0, r5
 800563e:	f001 fac1 	bl	8006bc4 <memchr>
 8005642:	b108      	cbz	r0, 8005648 <_printf_i+0x1bc>
 8005644:	1b40      	subs	r0, r0, r5
 8005646:	6060      	str	r0, [r4, #4]
 8005648:	6863      	ldr	r3, [r4, #4]
 800564a:	6123      	str	r3, [r4, #16]
 800564c:	2300      	movs	r3, #0
 800564e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005652:	e7a7      	b.n	80055a4 <_printf_i+0x118>
 8005654:	6923      	ldr	r3, [r4, #16]
 8005656:	462a      	mov	r2, r5
 8005658:	4639      	mov	r1, r7
 800565a:	4630      	mov	r0, r6
 800565c:	47c0      	blx	r8
 800565e:	3001      	adds	r0, #1
 8005660:	d0aa      	beq.n	80055b8 <_printf_i+0x12c>
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	079b      	lsls	r3, r3, #30
 8005666:	d413      	bmi.n	8005690 <_printf_i+0x204>
 8005668:	68e0      	ldr	r0, [r4, #12]
 800566a:	9b03      	ldr	r3, [sp, #12]
 800566c:	4298      	cmp	r0, r3
 800566e:	bfb8      	it	lt
 8005670:	4618      	movlt	r0, r3
 8005672:	e7a3      	b.n	80055bc <_printf_i+0x130>
 8005674:	2301      	movs	r3, #1
 8005676:	464a      	mov	r2, r9
 8005678:	4639      	mov	r1, r7
 800567a:	4630      	mov	r0, r6
 800567c:	47c0      	blx	r8
 800567e:	3001      	adds	r0, #1
 8005680:	d09a      	beq.n	80055b8 <_printf_i+0x12c>
 8005682:	3501      	adds	r5, #1
 8005684:	68e3      	ldr	r3, [r4, #12]
 8005686:	9a03      	ldr	r2, [sp, #12]
 8005688:	1a9b      	subs	r3, r3, r2
 800568a:	42ab      	cmp	r3, r5
 800568c:	dcf2      	bgt.n	8005674 <_printf_i+0x1e8>
 800568e:	e7eb      	b.n	8005668 <_printf_i+0x1dc>
 8005690:	2500      	movs	r5, #0
 8005692:	f104 0919 	add.w	r9, r4, #25
 8005696:	e7f5      	b.n	8005684 <_printf_i+0x1f8>
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1ac      	bne.n	80055f6 <_printf_i+0x16a>
 800569c:	7803      	ldrb	r3, [r0, #0]
 800569e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056a6:	e76c      	b.n	8005582 <_printf_i+0xf6>
 80056a8:	08007b32 	.word	0x08007b32
 80056ac:	08007b43 	.word	0x08007b43

080056b0 <iprintf>:
 80056b0:	b40f      	push	{r0, r1, r2, r3}
 80056b2:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <iprintf+0x2c>)
 80056b4:	b513      	push	{r0, r1, r4, lr}
 80056b6:	681c      	ldr	r4, [r3, #0]
 80056b8:	b124      	cbz	r4, 80056c4 <iprintf+0x14>
 80056ba:	69a3      	ldr	r3, [r4, #24]
 80056bc:	b913      	cbnz	r3, 80056c4 <iprintf+0x14>
 80056be:	4620      	mov	r0, r4
 80056c0:	f001 f966 	bl	8006990 <__sinit>
 80056c4:	ab05      	add	r3, sp, #20
 80056c6:	9a04      	ldr	r2, [sp, #16]
 80056c8:	68a1      	ldr	r1, [r4, #8]
 80056ca:	4620      	mov	r0, r4
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	f001 fe3f 	bl	8007350 <_vfiprintf_r>
 80056d2:	b002      	add	sp, #8
 80056d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d8:	b004      	add	sp, #16
 80056da:	4770      	bx	lr
 80056dc:	2000000c 	.word	0x2000000c

080056e0 <putchar>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4b08      	ldr	r3, [pc, #32]	; (8005704 <putchar+0x24>)
 80056e4:	4605      	mov	r5, r0
 80056e6:	681c      	ldr	r4, [r3, #0]
 80056e8:	b124      	cbz	r4, 80056f4 <putchar+0x14>
 80056ea:	69a3      	ldr	r3, [r4, #24]
 80056ec:	b913      	cbnz	r3, 80056f4 <putchar+0x14>
 80056ee:	4620      	mov	r0, r4
 80056f0:	f001 f94e 	bl	8006990 <__sinit>
 80056f4:	68a2      	ldr	r2, [r4, #8]
 80056f6:	4629      	mov	r1, r5
 80056f8:	4620      	mov	r0, r4
 80056fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056fe:	f001 bf3d 	b.w	800757c <_putc_r>
 8005702:	bf00      	nop
 8005704:	2000000c 	.word	0x2000000c

08005708 <_puts_r>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	460e      	mov	r6, r1
 800570c:	4605      	mov	r5, r0
 800570e:	b118      	cbz	r0, 8005718 <_puts_r+0x10>
 8005710:	6983      	ldr	r3, [r0, #24]
 8005712:	b90b      	cbnz	r3, 8005718 <_puts_r+0x10>
 8005714:	f001 f93c 	bl	8006990 <__sinit>
 8005718:	69ab      	ldr	r3, [r5, #24]
 800571a:	68ac      	ldr	r4, [r5, #8]
 800571c:	b913      	cbnz	r3, 8005724 <_puts_r+0x1c>
 800571e:	4628      	mov	r0, r5
 8005720:	f001 f936 	bl	8006990 <__sinit>
 8005724:	4b23      	ldr	r3, [pc, #140]	; (80057b4 <_puts_r+0xac>)
 8005726:	429c      	cmp	r4, r3
 8005728:	d117      	bne.n	800575a <_puts_r+0x52>
 800572a:	686c      	ldr	r4, [r5, #4]
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	071b      	lsls	r3, r3, #28
 8005730:	d51d      	bpl.n	800576e <_puts_r+0x66>
 8005732:	6923      	ldr	r3, [r4, #16]
 8005734:	b1db      	cbz	r3, 800576e <_puts_r+0x66>
 8005736:	3e01      	subs	r6, #1
 8005738:	68a3      	ldr	r3, [r4, #8]
 800573a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800573e:	3b01      	subs	r3, #1
 8005740:	60a3      	str	r3, [r4, #8]
 8005742:	b9e9      	cbnz	r1, 8005780 <_puts_r+0x78>
 8005744:	2b00      	cmp	r3, #0
 8005746:	da2e      	bge.n	80057a6 <_puts_r+0x9e>
 8005748:	4622      	mov	r2, r4
 800574a:	210a      	movs	r1, #10
 800574c:	4628      	mov	r0, r5
 800574e:	f000 f92d 	bl	80059ac <__swbuf_r>
 8005752:	3001      	adds	r0, #1
 8005754:	d011      	beq.n	800577a <_puts_r+0x72>
 8005756:	200a      	movs	r0, #10
 8005758:	e011      	b.n	800577e <_puts_r+0x76>
 800575a:	4b17      	ldr	r3, [pc, #92]	; (80057b8 <_puts_r+0xb0>)
 800575c:	429c      	cmp	r4, r3
 800575e:	d101      	bne.n	8005764 <_puts_r+0x5c>
 8005760:	68ac      	ldr	r4, [r5, #8]
 8005762:	e7e3      	b.n	800572c <_puts_r+0x24>
 8005764:	4b15      	ldr	r3, [pc, #84]	; (80057bc <_puts_r+0xb4>)
 8005766:	429c      	cmp	r4, r3
 8005768:	bf08      	it	eq
 800576a:	68ec      	ldreq	r4, [r5, #12]
 800576c:	e7de      	b.n	800572c <_puts_r+0x24>
 800576e:	4621      	mov	r1, r4
 8005770:	4628      	mov	r0, r5
 8005772:	f000 f96d 	bl	8005a50 <__swsetup_r>
 8005776:	2800      	cmp	r0, #0
 8005778:	d0dd      	beq.n	8005736 <_puts_r+0x2e>
 800577a:	f04f 30ff 	mov.w	r0, #4294967295
 800577e:	bd70      	pop	{r4, r5, r6, pc}
 8005780:	2b00      	cmp	r3, #0
 8005782:	da04      	bge.n	800578e <_puts_r+0x86>
 8005784:	69a2      	ldr	r2, [r4, #24]
 8005786:	429a      	cmp	r2, r3
 8005788:	dc06      	bgt.n	8005798 <_puts_r+0x90>
 800578a:	290a      	cmp	r1, #10
 800578c:	d004      	beq.n	8005798 <_puts_r+0x90>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	6022      	str	r2, [r4, #0]
 8005794:	7019      	strb	r1, [r3, #0]
 8005796:	e7cf      	b.n	8005738 <_puts_r+0x30>
 8005798:	4622      	mov	r2, r4
 800579a:	4628      	mov	r0, r5
 800579c:	f000 f906 	bl	80059ac <__swbuf_r>
 80057a0:	3001      	adds	r0, #1
 80057a2:	d1c9      	bne.n	8005738 <_puts_r+0x30>
 80057a4:	e7e9      	b.n	800577a <_puts_r+0x72>
 80057a6:	200a      	movs	r0, #10
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	6022      	str	r2, [r4, #0]
 80057ae:	7018      	strb	r0, [r3, #0]
 80057b0:	e7e5      	b.n	800577e <_puts_r+0x76>
 80057b2:	bf00      	nop
 80057b4:	08007b84 	.word	0x08007b84
 80057b8:	08007ba4 	.word	0x08007ba4
 80057bc:	08007b64 	.word	0x08007b64

080057c0 <puts>:
 80057c0:	4b02      	ldr	r3, [pc, #8]	; (80057cc <puts+0xc>)
 80057c2:	4601      	mov	r1, r0
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	f7ff bf9f 	b.w	8005708 <_puts_r>
 80057ca:	bf00      	nop
 80057cc:	2000000c 	.word	0x2000000c

080057d0 <strcpy>:
 80057d0:	4603      	mov	r3, r0
 80057d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057d6:	f803 2b01 	strb.w	r2, [r3], #1
 80057da:	2a00      	cmp	r2, #0
 80057dc:	d1f9      	bne.n	80057d2 <strcpy+0x2>
 80057de:	4770      	bx	lr

080057e0 <strtok>:
 80057e0:	4b13      	ldr	r3, [pc, #76]	; (8005830 <strtok+0x50>)
 80057e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e6:	681d      	ldr	r5, [r3, #0]
 80057e8:	4606      	mov	r6, r0
 80057ea:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80057ec:	460f      	mov	r7, r1
 80057ee:	b9b4      	cbnz	r4, 800581e <strtok+0x3e>
 80057f0:	2050      	movs	r0, #80	; 0x50
 80057f2:	f001 f9cd 	bl	8006b90 <malloc>
 80057f6:	65a8      	str	r0, [r5, #88]	; 0x58
 80057f8:	e9c0 4400 	strd	r4, r4, [r0]
 80057fc:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005800:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005804:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005808:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800580c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005810:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005814:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005818:	6184      	str	r4, [r0, #24]
 800581a:	7704      	strb	r4, [r0, #28]
 800581c:	6244      	str	r4, [r0, #36]	; 0x24
 800581e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005820:	4639      	mov	r1, r7
 8005822:	4630      	mov	r0, r6
 8005824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005828:	2301      	movs	r3, #1
 800582a:	f000 b803 	b.w	8005834 <__strtok_r>
 800582e:	bf00      	nop
 8005830:	2000000c 	.word	0x2000000c

08005834 <__strtok_r>:
 8005834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005836:	b918      	cbnz	r0, 8005840 <__strtok_r+0xc>
 8005838:	6810      	ldr	r0, [r2, #0]
 800583a:	b908      	cbnz	r0, 8005840 <__strtok_r+0xc>
 800583c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800583e:	4620      	mov	r0, r4
 8005840:	4604      	mov	r4, r0
 8005842:	460f      	mov	r7, r1
 8005844:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005848:	f817 6b01 	ldrb.w	r6, [r7], #1
 800584c:	b91e      	cbnz	r6, 8005856 <__strtok_r+0x22>
 800584e:	b96d      	cbnz	r5, 800586c <__strtok_r+0x38>
 8005850:	6015      	str	r5, [r2, #0]
 8005852:	4628      	mov	r0, r5
 8005854:	e7f2      	b.n	800583c <__strtok_r+0x8>
 8005856:	42b5      	cmp	r5, r6
 8005858:	d1f6      	bne.n	8005848 <__strtok_r+0x14>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1ef      	bne.n	800583e <__strtok_r+0xa>
 800585e:	6014      	str	r4, [r2, #0]
 8005860:	7003      	strb	r3, [r0, #0]
 8005862:	e7eb      	b.n	800583c <__strtok_r+0x8>
 8005864:	462b      	mov	r3, r5
 8005866:	e00d      	b.n	8005884 <__strtok_r+0x50>
 8005868:	b926      	cbnz	r6, 8005874 <__strtok_r+0x40>
 800586a:	461c      	mov	r4, r3
 800586c:	4623      	mov	r3, r4
 800586e:	460f      	mov	r7, r1
 8005870:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005874:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005878:	42b5      	cmp	r5, r6
 800587a:	d1f5      	bne.n	8005868 <__strtok_r+0x34>
 800587c:	2d00      	cmp	r5, #0
 800587e:	d0f1      	beq.n	8005864 <__strtok_r+0x30>
 8005880:	2100      	movs	r1, #0
 8005882:	7021      	strb	r1, [r4, #0]
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	e7d9      	b.n	800583c <__strtok_r+0x8>

08005888 <_strtol_l.isra.0>:
 8005888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800588c:	4680      	mov	r8, r0
 800588e:	4689      	mov	r9, r1
 8005890:	4692      	mov	sl, r2
 8005892:	461e      	mov	r6, r3
 8005894:	460f      	mov	r7, r1
 8005896:	463d      	mov	r5, r7
 8005898:	9808      	ldr	r0, [sp, #32]
 800589a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800589e:	f001 f901 	bl	8006aa4 <__locale_ctype_ptr_l>
 80058a2:	4420      	add	r0, r4
 80058a4:	7843      	ldrb	r3, [r0, #1]
 80058a6:	f013 0308 	ands.w	r3, r3, #8
 80058aa:	d132      	bne.n	8005912 <_strtol_l.isra.0+0x8a>
 80058ac:	2c2d      	cmp	r4, #45	; 0x2d
 80058ae:	d132      	bne.n	8005916 <_strtol_l.isra.0+0x8e>
 80058b0:	2201      	movs	r2, #1
 80058b2:	787c      	ldrb	r4, [r7, #1]
 80058b4:	1cbd      	adds	r5, r7, #2
 80058b6:	2e00      	cmp	r6, #0
 80058b8:	d05d      	beq.n	8005976 <_strtol_l.isra.0+0xee>
 80058ba:	2e10      	cmp	r6, #16
 80058bc:	d109      	bne.n	80058d2 <_strtol_l.isra.0+0x4a>
 80058be:	2c30      	cmp	r4, #48	; 0x30
 80058c0:	d107      	bne.n	80058d2 <_strtol_l.isra.0+0x4a>
 80058c2:	782b      	ldrb	r3, [r5, #0]
 80058c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80058c8:	2b58      	cmp	r3, #88	; 0x58
 80058ca:	d14f      	bne.n	800596c <_strtol_l.isra.0+0xe4>
 80058cc:	2610      	movs	r6, #16
 80058ce:	786c      	ldrb	r4, [r5, #1]
 80058d0:	3502      	adds	r5, #2
 80058d2:	2a00      	cmp	r2, #0
 80058d4:	bf14      	ite	ne
 80058d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80058da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80058de:	2700      	movs	r7, #0
 80058e0:	fbb1 fcf6 	udiv	ip, r1, r6
 80058e4:	4638      	mov	r0, r7
 80058e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80058ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80058ee:	2b09      	cmp	r3, #9
 80058f0:	d817      	bhi.n	8005922 <_strtol_l.isra.0+0x9a>
 80058f2:	461c      	mov	r4, r3
 80058f4:	42a6      	cmp	r6, r4
 80058f6:	dd23      	ble.n	8005940 <_strtol_l.isra.0+0xb8>
 80058f8:	1c7b      	adds	r3, r7, #1
 80058fa:	d007      	beq.n	800590c <_strtol_l.isra.0+0x84>
 80058fc:	4584      	cmp	ip, r0
 80058fe:	d31c      	bcc.n	800593a <_strtol_l.isra.0+0xb2>
 8005900:	d101      	bne.n	8005906 <_strtol_l.isra.0+0x7e>
 8005902:	45a6      	cmp	lr, r4
 8005904:	db19      	blt.n	800593a <_strtol_l.isra.0+0xb2>
 8005906:	2701      	movs	r7, #1
 8005908:	fb00 4006 	mla	r0, r0, r6, r4
 800590c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005910:	e7eb      	b.n	80058ea <_strtol_l.isra.0+0x62>
 8005912:	462f      	mov	r7, r5
 8005914:	e7bf      	b.n	8005896 <_strtol_l.isra.0+0xe>
 8005916:	2c2b      	cmp	r4, #43	; 0x2b
 8005918:	bf04      	itt	eq
 800591a:	1cbd      	addeq	r5, r7, #2
 800591c:	787c      	ldrbeq	r4, [r7, #1]
 800591e:	461a      	mov	r2, r3
 8005920:	e7c9      	b.n	80058b6 <_strtol_l.isra.0+0x2e>
 8005922:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005926:	2b19      	cmp	r3, #25
 8005928:	d801      	bhi.n	800592e <_strtol_l.isra.0+0xa6>
 800592a:	3c37      	subs	r4, #55	; 0x37
 800592c:	e7e2      	b.n	80058f4 <_strtol_l.isra.0+0x6c>
 800592e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005932:	2b19      	cmp	r3, #25
 8005934:	d804      	bhi.n	8005940 <_strtol_l.isra.0+0xb8>
 8005936:	3c57      	subs	r4, #87	; 0x57
 8005938:	e7dc      	b.n	80058f4 <_strtol_l.isra.0+0x6c>
 800593a:	f04f 37ff 	mov.w	r7, #4294967295
 800593e:	e7e5      	b.n	800590c <_strtol_l.isra.0+0x84>
 8005940:	1c7b      	adds	r3, r7, #1
 8005942:	d108      	bne.n	8005956 <_strtol_l.isra.0+0xce>
 8005944:	2322      	movs	r3, #34	; 0x22
 8005946:	4608      	mov	r0, r1
 8005948:	f8c8 3000 	str.w	r3, [r8]
 800594c:	f1ba 0f00 	cmp.w	sl, #0
 8005950:	d107      	bne.n	8005962 <_strtol_l.isra.0+0xda>
 8005952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005956:	b102      	cbz	r2, 800595a <_strtol_l.isra.0+0xd2>
 8005958:	4240      	negs	r0, r0
 800595a:	f1ba 0f00 	cmp.w	sl, #0
 800595e:	d0f8      	beq.n	8005952 <_strtol_l.isra.0+0xca>
 8005960:	b10f      	cbz	r7, 8005966 <_strtol_l.isra.0+0xde>
 8005962:	f105 39ff 	add.w	r9, r5, #4294967295
 8005966:	f8ca 9000 	str.w	r9, [sl]
 800596a:	e7f2      	b.n	8005952 <_strtol_l.isra.0+0xca>
 800596c:	2430      	movs	r4, #48	; 0x30
 800596e:	2e00      	cmp	r6, #0
 8005970:	d1af      	bne.n	80058d2 <_strtol_l.isra.0+0x4a>
 8005972:	2608      	movs	r6, #8
 8005974:	e7ad      	b.n	80058d2 <_strtol_l.isra.0+0x4a>
 8005976:	2c30      	cmp	r4, #48	; 0x30
 8005978:	d0a3      	beq.n	80058c2 <_strtol_l.isra.0+0x3a>
 800597a:	260a      	movs	r6, #10
 800597c:	e7a9      	b.n	80058d2 <_strtol_l.isra.0+0x4a>
	...

08005980 <strtol>:
 8005980:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <strtol+0x24>)
 8005982:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005984:	681c      	ldr	r4, [r3, #0]
 8005986:	4d08      	ldr	r5, [pc, #32]	; (80059a8 <strtol+0x28>)
 8005988:	6a23      	ldr	r3, [r4, #32]
 800598a:	2b00      	cmp	r3, #0
 800598c:	bf08      	it	eq
 800598e:	462b      	moveq	r3, r5
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	4613      	mov	r3, r2
 8005994:	460a      	mov	r2, r1
 8005996:	4601      	mov	r1, r0
 8005998:	4620      	mov	r0, r4
 800599a:	f7ff ff75 	bl	8005888 <_strtol_l.isra.0>
 800599e:	b003      	add	sp, #12
 80059a0:	bd30      	pop	{r4, r5, pc}
 80059a2:	bf00      	nop
 80059a4:	2000000c 	.word	0x2000000c
 80059a8:	20000070 	.word	0x20000070

080059ac <__swbuf_r>:
 80059ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ae:	460e      	mov	r6, r1
 80059b0:	4614      	mov	r4, r2
 80059b2:	4605      	mov	r5, r0
 80059b4:	b118      	cbz	r0, 80059be <__swbuf_r+0x12>
 80059b6:	6983      	ldr	r3, [r0, #24]
 80059b8:	b90b      	cbnz	r3, 80059be <__swbuf_r+0x12>
 80059ba:	f000 ffe9 	bl	8006990 <__sinit>
 80059be:	4b21      	ldr	r3, [pc, #132]	; (8005a44 <__swbuf_r+0x98>)
 80059c0:	429c      	cmp	r4, r3
 80059c2:	d12a      	bne.n	8005a1a <__swbuf_r+0x6e>
 80059c4:	686c      	ldr	r4, [r5, #4]
 80059c6:	69a3      	ldr	r3, [r4, #24]
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	071a      	lsls	r2, r3, #28
 80059ce:	d52e      	bpl.n	8005a2e <__swbuf_r+0x82>
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	b363      	cbz	r3, 8005a2e <__swbuf_r+0x82>
 80059d4:	6923      	ldr	r3, [r4, #16]
 80059d6:	6820      	ldr	r0, [r4, #0]
 80059d8:	b2f6      	uxtb	r6, r6
 80059da:	1ac0      	subs	r0, r0, r3
 80059dc:	6963      	ldr	r3, [r4, #20]
 80059de:	4637      	mov	r7, r6
 80059e0:	4283      	cmp	r3, r0
 80059e2:	dc04      	bgt.n	80059ee <__swbuf_r+0x42>
 80059e4:	4621      	mov	r1, r4
 80059e6:	4628      	mov	r0, r5
 80059e8:	f000 ff68 	bl	80068bc <_fflush_r>
 80059ec:	bb28      	cbnz	r0, 8005a3a <__swbuf_r+0x8e>
 80059ee:	68a3      	ldr	r3, [r4, #8]
 80059f0:	3001      	adds	r0, #1
 80059f2:	3b01      	subs	r3, #1
 80059f4:	60a3      	str	r3, [r4, #8]
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	6022      	str	r2, [r4, #0]
 80059fc:	701e      	strb	r6, [r3, #0]
 80059fe:	6963      	ldr	r3, [r4, #20]
 8005a00:	4283      	cmp	r3, r0
 8005a02:	d004      	beq.n	8005a0e <__swbuf_r+0x62>
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	07db      	lsls	r3, r3, #31
 8005a08:	d519      	bpl.n	8005a3e <__swbuf_r+0x92>
 8005a0a:	2e0a      	cmp	r6, #10
 8005a0c:	d117      	bne.n	8005a3e <__swbuf_r+0x92>
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4628      	mov	r0, r5
 8005a12:	f000 ff53 	bl	80068bc <_fflush_r>
 8005a16:	b190      	cbz	r0, 8005a3e <__swbuf_r+0x92>
 8005a18:	e00f      	b.n	8005a3a <__swbuf_r+0x8e>
 8005a1a:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <__swbuf_r+0x9c>)
 8005a1c:	429c      	cmp	r4, r3
 8005a1e:	d101      	bne.n	8005a24 <__swbuf_r+0x78>
 8005a20:	68ac      	ldr	r4, [r5, #8]
 8005a22:	e7d0      	b.n	80059c6 <__swbuf_r+0x1a>
 8005a24:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <__swbuf_r+0xa0>)
 8005a26:	429c      	cmp	r4, r3
 8005a28:	bf08      	it	eq
 8005a2a:	68ec      	ldreq	r4, [r5, #12]
 8005a2c:	e7cb      	b.n	80059c6 <__swbuf_r+0x1a>
 8005a2e:	4621      	mov	r1, r4
 8005a30:	4628      	mov	r0, r5
 8005a32:	f000 f80d 	bl	8005a50 <__swsetup_r>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d0cc      	beq.n	80059d4 <__swbuf_r+0x28>
 8005a3a:	f04f 37ff 	mov.w	r7, #4294967295
 8005a3e:	4638      	mov	r0, r7
 8005a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a42:	bf00      	nop
 8005a44:	08007b84 	.word	0x08007b84
 8005a48:	08007ba4 	.word	0x08007ba4
 8005a4c:	08007b64 	.word	0x08007b64

08005a50 <__swsetup_r>:
 8005a50:	4b32      	ldr	r3, [pc, #200]	; (8005b1c <__swsetup_r+0xcc>)
 8005a52:	b570      	push	{r4, r5, r6, lr}
 8005a54:	681d      	ldr	r5, [r3, #0]
 8005a56:	4606      	mov	r6, r0
 8005a58:	460c      	mov	r4, r1
 8005a5a:	b125      	cbz	r5, 8005a66 <__swsetup_r+0x16>
 8005a5c:	69ab      	ldr	r3, [r5, #24]
 8005a5e:	b913      	cbnz	r3, 8005a66 <__swsetup_r+0x16>
 8005a60:	4628      	mov	r0, r5
 8005a62:	f000 ff95 	bl	8006990 <__sinit>
 8005a66:	4b2e      	ldr	r3, [pc, #184]	; (8005b20 <__swsetup_r+0xd0>)
 8005a68:	429c      	cmp	r4, r3
 8005a6a:	d10f      	bne.n	8005a8c <__swsetup_r+0x3c>
 8005a6c:	686c      	ldr	r4, [r5, #4]
 8005a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	0715      	lsls	r5, r2, #28
 8005a76:	d42c      	bmi.n	8005ad2 <__swsetup_r+0x82>
 8005a78:	06d0      	lsls	r0, r2, #27
 8005a7a:	d411      	bmi.n	8005aa0 <__swsetup_r+0x50>
 8005a7c:	2209      	movs	r2, #9
 8005a7e:	6032      	str	r2, [r6, #0]
 8005a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a84:	81a3      	strh	r3, [r4, #12]
 8005a86:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8a:	e03e      	b.n	8005b0a <__swsetup_r+0xba>
 8005a8c:	4b25      	ldr	r3, [pc, #148]	; (8005b24 <__swsetup_r+0xd4>)
 8005a8e:	429c      	cmp	r4, r3
 8005a90:	d101      	bne.n	8005a96 <__swsetup_r+0x46>
 8005a92:	68ac      	ldr	r4, [r5, #8]
 8005a94:	e7eb      	b.n	8005a6e <__swsetup_r+0x1e>
 8005a96:	4b24      	ldr	r3, [pc, #144]	; (8005b28 <__swsetup_r+0xd8>)
 8005a98:	429c      	cmp	r4, r3
 8005a9a:	bf08      	it	eq
 8005a9c:	68ec      	ldreq	r4, [r5, #12]
 8005a9e:	e7e6      	b.n	8005a6e <__swsetup_r+0x1e>
 8005aa0:	0751      	lsls	r1, r2, #29
 8005aa2:	d512      	bpl.n	8005aca <__swsetup_r+0x7a>
 8005aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aa6:	b141      	cbz	r1, 8005aba <__swsetup_r+0x6a>
 8005aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005aac:	4299      	cmp	r1, r3
 8005aae:	d002      	beq.n	8005ab6 <__swsetup_r+0x66>
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	f001 fb7f 	bl	80071b4 <_free_r>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	6363      	str	r3, [r4, #52]	; 0x34
 8005aba:	89a3      	ldrh	r3, [r4, #12]
 8005abc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ac0:	81a3      	strh	r3, [r4, #12]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	6063      	str	r3, [r4, #4]
 8005ac6:	6923      	ldr	r3, [r4, #16]
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	89a3      	ldrh	r3, [r4, #12]
 8005acc:	f043 0308 	orr.w	r3, r3, #8
 8005ad0:	81a3      	strh	r3, [r4, #12]
 8005ad2:	6923      	ldr	r3, [r4, #16]
 8005ad4:	b94b      	cbnz	r3, 8005aea <__swsetup_r+0x9a>
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae0:	d003      	beq.n	8005aea <__swsetup_r+0x9a>
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	f001 f813 	bl	8006b10 <__smakebuf_r>
 8005aea:	89a2      	ldrh	r2, [r4, #12]
 8005aec:	f012 0301 	ands.w	r3, r2, #1
 8005af0:	d00c      	beq.n	8005b0c <__swsetup_r+0xbc>
 8005af2:	2300      	movs	r3, #0
 8005af4:	60a3      	str	r3, [r4, #8]
 8005af6:	6963      	ldr	r3, [r4, #20]
 8005af8:	425b      	negs	r3, r3
 8005afa:	61a3      	str	r3, [r4, #24]
 8005afc:	6923      	ldr	r3, [r4, #16]
 8005afe:	b953      	cbnz	r3, 8005b16 <__swsetup_r+0xc6>
 8005b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005b08:	d1ba      	bne.n	8005a80 <__swsetup_r+0x30>
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
 8005b0c:	0792      	lsls	r2, r2, #30
 8005b0e:	bf58      	it	pl
 8005b10:	6963      	ldrpl	r3, [r4, #20]
 8005b12:	60a3      	str	r3, [r4, #8]
 8005b14:	e7f2      	b.n	8005afc <__swsetup_r+0xac>
 8005b16:	2000      	movs	r0, #0
 8005b18:	e7f7      	b.n	8005b0a <__swsetup_r+0xba>
 8005b1a:	bf00      	nop
 8005b1c:	2000000c 	.word	0x2000000c
 8005b20:	08007b84 	.word	0x08007b84
 8005b24:	08007ba4 	.word	0x08007ba4
 8005b28:	08007b64 	.word	0x08007b64

08005b2c <quorem>:
 8005b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	6903      	ldr	r3, [r0, #16]
 8005b32:	690c      	ldr	r4, [r1, #16]
 8005b34:	4680      	mov	r8, r0
 8005b36:	42a3      	cmp	r3, r4
 8005b38:	f2c0 8084 	blt.w	8005c44 <quorem+0x118>
 8005b3c:	3c01      	subs	r4, #1
 8005b3e:	f101 0714 	add.w	r7, r1, #20
 8005b42:	f100 0614 	add.w	r6, r0, #20
 8005b46:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005b4a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005b4e:	3501      	adds	r5, #1
 8005b50:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b54:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005b58:	eb06 030c 	add.w	r3, r6, ip
 8005b5c:	eb07 090c 	add.w	r9, r7, ip
 8005b60:	9301      	str	r3, [sp, #4]
 8005b62:	b39d      	cbz	r5, 8005bcc <quorem+0xa0>
 8005b64:	f04f 0a00 	mov.w	sl, #0
 8005b68:	4638      	mov	r0, r7
 8005b6a:	46b6      	mov	lr, r6
 8005b6c:	46d3      	mov	fp, sl
 8005b6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b72:	b293      	uxth	r3, r2
 8005b74:	fb05 a303 	mla	r3, r5, r3, sl
 8005b78:	0c12      	lsrs	r2, r2, #16
 8005b7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b7e:	fb05 a202 	mla	r2, r5, r2, sl
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	ebab 0303 	sub.w	r3, fp, r3
 8005b88:	f8de b000 	ldr.w	fp, [lr]
 8005b8c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005b90:	fa1f fb8b 	uxth.w	fp, fp
 8005b94:	445b      	add	r3, fp
 8005b96:	fa1f fb82 	uxth.w	fp, r2
 8005b9a:	f8de 2000 	ldr.w	r2, [lr]
 8005b9e:	4581      	cmp	r9, r0
 8005ba0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005ba4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bae:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005bb2:	f84e 3b04 	str.w	r3, [lr], #4
 8005bb6:	d2da      	bcs.n	8005b6e <quorem+0x42>
 8005bb8:	f856 300c 	ldr.w	r3, [r6, ip]
 8005bbc:	b933      	cbnz	r3, 8005bcc <quorem+0xa0>
 8005bbe:	9b01      	ldr	r3, [sp, #4]
 8005bc0:	3b04      	subs	r3, #4
 8005bc2:	429e      	cmp	r6, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	d331      	bcc.n	8005c2c <quorem+0x100>
 8005bc8:	f8c8 4010 	str.w	r4, [r8, #16]
 8005bcc:	4640      	mov	r0, r8
 8005bce:	f001 fa1b 	bl	8007008 <__mcmp>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	db26      	blt.n	8005c24 <quorem+0xf8>
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f04f 0c00 	mov.w	ip, #0
 8005bdc:	3501      	adds	r5, #1
 8005bde:	f857 1b04 	ldr.w	r1, [r7], #4
 8005be2:	f8d0 e000 	ldr.w	lr, [r0]
 8005be6:	b28b      	uxth	r3, r1
 8005be8:	ebac 0303 	sub.w	r3, ip, r3
 8005bec:	fa1f f28e 	uxth.w	r2, lr
 8005bf0:	4413      	add	r3, r2
 8005bf2:	0c0a      	lsrs	r2, r1, #16
 8005bf4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005bf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c02:	45b9      	cmp	r9, r7
 8005c04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c08:	f840 3b04 	str.w	r3, [r0], #4
 8005c0c:	d2e7      	bcs.n	8005bde <quorem+0xb2>
 8005c0e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005c12:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005c16:	b92a      	cbnz	r2, 8005c24 <quorem+0xf8>
 8005c18:	3b04      	subs	r3, #4
 8005c1a:	429e      	cmp	r6, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	d30b      	bcc.n	8005c38 <quorem+0x10c>
 8005c20:	f8c8 4010 	str.w	r4, [r8, #16]
 8005c24:	4628      	mov	r0, r5
 8005c26:	b003      	add	sp, #12
 8005c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2c:	6812      	ldr	r2, [r2, #0]
 8005c2e:	3b04      	subs	r3, #4
 8005c30:	2a00      	cmp	r2, #0
 8005c32:	d1c9      	bne.n	8005bc8 <quorem+0x9c>
 8005c34:	3c01      	subs	r4, #1
 8005c36:	e7c4      	b.n	8005bc2 <quorem+0x96>
 8005c38:	6812      	ldr	r2, [r2, #0]
 8005c3a:	3b04      	subs	r3, #4
 8005c3c:	2a00      	cmp	r2, #0
 8005c3e:	d1ef      	bne.n	8005c20 <quorem+0xf4>
 8005c40:	3c01      	subs	r4, #1
 8005c42:	e7ea      	b.n	8005c1a <quorem+0xee>
 8005c44:	2000      	movs	r0, #0
 8005c46:	e7ee      	b.n	8005c26 <quorem+0xfa>

08005c48 <_dtoa_r>:
 8005c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4c:	4616      	mov	r6, r2
 8005c4e:	461f      	mov	r7, r3
 8005c50:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c52:	b095      	sub	sp, #84	; 0x54
 8005c54:	4604      	mov	r4, r0
 8005c56:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005c5a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005c5e:	b93d      	cbnz	r5, 8005c70 <_dtoa_r+0x28>
 8005c60:	2010      	movs	r0, #16
 8005c62:	f000 ff95 	bl	8006b90 <malloc>
 8005c66:	6260      	str	r0, [r4, #36]	; 0x24
 8005c68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c6c:	6005      	str	r5, [r0, #0]
 8005c6e:	60c5      	str	r5, [r0, #12]
 8005c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c72:	6819      	ldr	r1, [r3, #0]
 8005c74:	b151      	cbz	r1, 8005c8c <_dtoa_r+0x44>
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4093      	lsls	r3, r2
 8005c7c:	604a      	str	r2, [r1, #4]
 8005c7e:	608b      	str	r3, [r1, #8]
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 ffe1 	bl	8006c48 <_Bfree>
 8005c86:	2200      	movs	r2, #0
 8005c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	1e3b      	subs	r3, r7, #0
 8005c8e:	bfaf      	iteee	ge
 8005c90:	2300      	movge	r3, #0
 8005c92:	2201      	movlt	r2, #1
 8005c94:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c98:	9303      	strlt	r3, [sp, #12]
 8005c9a:	bfac      	ite	ge
 8005c9c:	f8c8 3000 	strge.w	r3, [r8]
 8005ca0:	f8c8 2000 	strlt.w	r2, [r8]
 8005ca4:	4bae      	ldr	r3, [pc, #696]	; (8005f60 <_dtoa_r+0x318>)
 8005ca6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005caa:	ea33 0308 	bics.w	r3, r3, r8
 8005cae:	d11b      	bne.n	8005ce8 <_dtoa_r+0xa0>
 8005cb0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005cb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	9b02      	ldr	r3, [sp, #8]
 8005cba:	b923      	cbnz	r3, 8005cc6 <_dtoa_r+0x7e>
 8005cbc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	f000 8545 	beq.w	8006750 <_dtoa_r+0xb08>
 8005cc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cc8:	b953      	cbnz	r3, 8005ce0 <_dtoa_r+0x98>
 8005cca:	4ba6      	ldr	r3, [pc, #664]	; (8005f64 <_dtoa_r+0x31c>)
 8005ccc:	e021      	b.n	8005d12 <_dtoa_r+0xca>
 8005cce:	4ba6      	ldr	r3, [pc, #664]	; (8005f68 <_dtoa_r+0x320>)
 8005cd0:	9306      	str	r3, [sp, #24]
 8005cd2:	3308      	adds	r3, #8
 8005cd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	9806      	ldr	r0, [sp, #24]
 8005cda:	b015      	add	sp, #84	; 0x54
 8005cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce0:	4ba0      	ldr	r3, [pc, #640]	; (8005f64 <_dtoa_r+0x31c>)
 8005ce2:	9306      	str	r3, [sp, #24]
 8005ce4:	3303      	adds	r3, #3
 8005ce6:	e7f5      	b.n	8005cd4 <_dtoa_r+0x8c>
 8005ce8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005cec:	2200      	movs	r2, #0
 8005cee:	2300      	movs	r3, #0
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	4639      	mov	r1, r7
 8005cf4:	f7fa fe62 	bl	80009bc <__aeabi_dcmpeq>
 8005cf8:	4682      	mov	sl, r0
 8005cfa:	b160      	cbz	r0, 8005d16 <_dtoa_r+0xce>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8520 	beq.w	800674a <_dtoa_r+0xb02>
 8005d0a:	4b98      	ldr	r3, [pc, #608]	; (8005f6c <_dtoa_r+0x324>)
 8005d0c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	9306      	str	r3, [sp, #24]
 8005d14:	e7e0      	b.n	8005cd8 <_dtoa_r+0x90>
 8005d16:	ab12      	add	r3, sp, #72	; 0x48
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	ab13      	add	r3, sp, #76	; 0x4c
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	4632      	mov	r2, r6
 8005d20:	463b      	mov	r3, r7
 8005d22:	4620      	mov	r0, r4
 8005d24:	f001 f9e8 	bl	80070f8 <__d2b>
 8005d28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005d2c:	4683      	mov	fp, r0
 8005d2e:	2d00      	cmp	r5, #0
 8005d30:	d07d      	beq.n	8005e2e <_dtoa_r+0x1e6>
 8005d32:	46b0      	mov	r8, r6
 8005d34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d38:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005d3c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005d40:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d44:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005d48:	2200      	movs	r2, #0
 8005d4a:	4b89      	ldr	r3, [pc, #548]	; (8005f70 <_dtoa_r+0x328>)
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	4649      	mov	r1, r9
 8005d50:	f7fa fa14 	bl	800017c <__aeabi_dsub>
 8005d54:	a37c      	add	r3, pc, #496	; (adr r3, 8005f48 <_dtoa_r+0x300>)
 8005d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5a:	f7fa fbc7 	bl	80004ec <__aeabi_dmul>
 8005d5e:	a37c      	add	r3, pc, #496	; (adr r3, 8005f50 <_dtoa_r+0x308>)
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f7fa fa0c 	bl	8000180 <__adddf3>
 8005d68:	4606      	mov	r6, r0
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	460f      	mov	r7, r1
 8005d6e:	f7fa fb53 	bl	8000418 <__aeabi_i2d>
 8005d72:	a379      	add	r3, pc, #484	; (adr r3, 8005f58 <_dtoa_r+0x310>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f7fa fbb8 	bl	80004ec <__aeabi_dmul>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4630      	mov	r0, r6
 8005d82:	4639      	mov	r1, r7
 8005d84:	f7fa f9fc 	bl	8000180 <__adddf3>
 8005d88:	4606      	mov	r6, r0
 8005d8a:	460f      	mov	r7, r1
 8005d8c:	f7fa fe5e 	bl	8000a4c <__aeabi_d2iz>
 8005d90:	2200      	movs	r2, #0
 8005d92:	4682      	mov	sl, r0
 8005d94:	2300      	movs	r3, #0
 8005d96:	4630      	mov	r0, r6
 8005d98:	4639      	mov	r1, r7
 8005d9a:	f7fa fe19 	bl	80009d0 <__aeabi_dcmplt>
 8005d9e:	b148      	cbz	r0, 8005db4 <_dtoa_r+0x16c>
 8005da0:	4650      	mov	r0, sl
 8005da2:	f7fa fb39 	bl	8000418 <__aeabi_i2d>
 8005da6:	4632      	mov	r2, r6
 8005da8:	463b      	mov	r3, r7
 8005daa:	f7fa fe07 	bl	80009bc <__aeabi_dcmpeq>
 8005dae:	b908      	cbnz	r0, 8005db4 <_dtoa_r+0x16c>
 8005db0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005db4:	f1ba 0f16 	cmp.w	sl, #22
 8005db8:	d85a      	bhi.n	8005e70 <_dtoa_r+0x228>
 8005dba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dbe:	496d      	ldr	r1, [pc, #436]	; (8005f74 <_dtoa_r+0x32c>)
 8005dc0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dc8:	f7fa fe20 	bl	8000a0c <__aeabi_dcmpgt>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d051      	beq.n	8005e74 <_dtoa_r+0x22c>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dd6:	930d      	str	r3, [sp, #52]	; 0x34
 8005dd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005dda:	1b5d      	subs	r5, r3, r5
 8005ddc:	1e6b      	subs	r3, r5, #1
 8005dde:	9307      	str	r3, [sp, #28]
 8005de0:	bf43      	ittte	mi
 8005de2:	2300      	movmi	r3, #0
 8005de4:	f1c5 0901 	rsbmi	r9, r5, #1
 8005de8:	9307      	strmi	r3, [sp, #28]
 8005dea:	f04f 0900 	movpl.w	r9, #0
 8005dee:	f1ba 0f00 	cmp.w	sl, #0
 8005df2:	db41      	blt.n	8005e78 <_dtoa_r+0x230>
 8005df4:	9b07      	ldr	r3, [sp, #28]
 8005df6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005dfa:	4453      	add	r3, sl
 8005dfc:	9307      	str	r3, [sp, #28]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	9308      	str	r3, [sp, #32]
 8005e02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e04:	2b09      	cmp	r3, #9
 8005e06:	f200 808f 	bhi.w	8005f28 <_dtoa_r+0x2e0>
 8005e0a:	2b05      	cmp	r3, #5
 8005e0c:	bfc4      	itt	gt
 8005e0e:	3b04      	subgt	r3, #4
 8005e10:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005e12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e14:	bfc8      	it	gt
 8005e16:	2500      	movgt	r5, #0
 8005e18:	f1a3 0302 	sub.w	r3, r3, #2
 8005e1c:	bfd8      	it	le
 8005e1e:	2501      	movle	r5, #1
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	f200 808d 	bhi.w	8005f40 <_dtoa_r+0x2f8>
 8005e26:	e8df f003 	tbb	[pc, r3]
 8005e2a:	7d7b      	.short	0x7d7b
 8005e2c:	6f2f      	.short	0x6f2f
 8005e2e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005e32:	441d      	add	r5, r3
 8005e34:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005e38:	2820      	cmp	r0, #32
 8005e3a:	dd13      	ble.n	8005e64 <_dtoa_r+0x21c>
 8005e3c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005e40:	9b02      	ldr	r3, [sp, #8]
 8005e42:	fa08 f800 	lsl.w	r8, r8, r0
 8005e46:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005e4a:	fa23 f000 	lsr.w	r0, r3, r0
 8005e4e:	ea48 0000 	orr.w	r0, r8, r0
 8005e52:	f7fa fad1 	bl	80003f8 <__aeabi_ui2d>
 8005e56:	2301      	movs	r3, #1
 8005e58:	4680      	mov	r8, r0
 8005e5a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005e5e:	3d01      	subs	r5, #1
 8005e60:	9310      	str	r3, [sp, #64]	; 0x40
 8005e62:	e771      	b.n	8005d48 <_dtoa_r+0x100>
 8005e64:	9b02      	ldr	r3, [sp, #8]
 8005e66:	f1c0 0020 	rsb	r0, r0, #32
 8005e6a:	fa03 f000 	lsl.w	r0, r3, r0
 8005e6e:	e7f0      	b.n	8005e52 <_dtoa_r+0x20a>
 8005e70:	2301      	movs	r3, #1
 8005e72:	e7b0      	b.n	8005dd6 <_dtoa_r+0x18e>
 8005e74:	900d      	str	r0, [sp, #52]	; 0x34
 8005e76:	e7af      	b.n	8005dd8 <_dtoa_r+0x190>
 8005e78:	f1ca 0300 	rsb	r3, sl, #0
 8005e7c:	9308      	str	r3, [sp, #32]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	eba9 090a 	sub.w	r9, r9, sl
 8005e84:	930c      	str	r3, [sp, #48]	; 0x30
 8005e86:	e7bc      	b.n	8005e02 <_dtoa_r+0x1ba>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	dd74      	ble.n	8005f7c <_dtoa_r+0x334>
 8005e92:	4698      	mov	r8, r3
 8005e94:	9304      	str	r3, [sp, #16]
 8005e96:	2200      	movs	r2, #0
 8005e98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e9a:	6072      	str	r2, [r6, #4]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	f102 0014 	add.w	r0, r2, #20
 8005ea2:	4298      	cmp	r0, r3
 8005ea4:	6871      	ldr	r1, [r6, #4]
 8005ea6:	d96e      	bls.n	8005f86 <_dtoa_r+0x33e>
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f000 fe99 	bl	8006be0 <_Balloc>
 8005eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eb0:	6030      	str	r0, [r6, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f1b8 0f0e 	cmp.w	r8, #14
 8005eb8:	9306      	str	r3, [sp, #24]
 8005eba:	f200 80ed 	bhi.w	8006098 <_dtoa_r+0x450>
 8005ebe:	2d00      	cmp	r5, #0
 8005ec0:	f000 80ea 	beq.w	8006098 <_dtoa_r+0x450>
 8005ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ec8:	f1ba 0f00 	cmp.w	sl, #0
 8005ecc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005ed0:	dd77      	ble.n	8005fc2 <_dtoa_r+0x37a>
 8005ed2:	4a28      	ldr	r2, [pc, #160]	; (8005f74 <_dtoa_r+0x32c>)
 8005ed4:	f00a 030f 	and.w	r3, sl, #15
 8005ed8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005edc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ee0:	06f0      	lsls	r0, r6, #27
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005eea:	d568      	bpl.n	8005fbe <_dtoa_r+0x376>
 8005eec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005ef0:	4b21      	ldr	r3, [pc, #132]	; (8005f78 <_dtoa_r+0x330>)
 8005ef2:	2503      	movs	r5, #3
 8005ef4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ef8:	f7fa fc22 	bl	8000740 <__aeabi_ddiv>
 8005efc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f00:	f006 060f 	and.w	r6, r6, #15
 8005f04:	4f1c      	ldr	r7, [pc, #112]	; (8005f78 <_dtoa_r+0x330>)
 8005f06:	e04f      	b.n	8005fa8 <_dtoa_r+0x360>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f0e:	4453      	add	r3, sl
 8005f10:	f103 0801 	add.w	r8, r3, #1
 8005f14:	9304      	str	r3, [sp, #16]
 8005f16:	4643      	mov	r3, r8
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	bfb8      	it	lt
 8005f1c:	2301      	movlt	r3, #1
 8005f1e:	e7ba      	b.n	8005e96 <_dtoa_r+0x24e>
 8005f20:	2300      	movs	r3, #0
 8005f22:	e7b2      	b.n	8005e8a <_dtoa_r+0x242>
 8005f24:	2300      	movs	r3, #0
 8005f26:	e7f0      	b.n	8005f0a <_dtoa_r+0x2c2>
 8005f28:	2501      	movs	r5, #1
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	9509      	str	r5, [sp, #36]	; 0x24
 8005f2e:	931e      	str	r3, [sp, #120]	; 0x78
 8005f30:	f04f 33ff 	mov.w	r3, #4294967295
 8005f34:	2200      	movs	r2, #0
 8005f36:	9304      	str	r3, [sp, #16]
 8005f38:	4698      	mov	r8, r3
 8005f3a:	2312      	movs	r3, #18
 8005f3c:	921f      	str	r2, [sp, #124]	; 0x7c
 8005f3e:	e7aa      	b.n	8005e96 <_dtoa_r+0x24e>
 8005f40:	2301      	movs	r3, #1
 8005f42:	9309      	str	r3, [sp, #36]	; 0x24
 8005f44:	e7f4      	b.n	8005f30 <_dtoa_r+0x2e8>
 8005f46:	bf00      	nop
 8005f48:	636f4361 	.word	0x636f4361
 8005f4c:	3fd287a7 	.word	0x3fd287a7
 8005f50:	8b60c8b3 	.word	0x8b60c8b3
 8005f54:	3fc68a28 	.word	0x3fc68a28
 8005f58:	509f79fb 	.word	0x509f79fb
 8005f5c:	3fd34413 	.word	0x3fd34413
 8005f60:	7ff00000 	.word	0x7ff00000
 8005f64:	08007b5d 	.word	0x08007b5d
 8005f68:	08007b54 	.word	0x08007b54
 8005f6c:	08007b31 	.word	0x08007b31
 8005f70:	3ff80000 	.word	0x3ff80000
 8005f74:	08007bf8 	.word	0x08007bf8
 8005f78:	08007bd0 	.word	0x08007bd0
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	9304      	str	r3, [sp, #16]
 8005f80:	4698      	mov	r8, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	e7da      	b.n	8005f3c <_dtoa_r+0x2f4>
 8005f86:	3101      	adds	r1, #1
 8005f88:	6071      	str	r1, [r6, #4]
 8005f8a:	0052      	lsls	r2, r2, #1
 8005f8c:	e787      	b.n	8005e9e <_dtoa_r+0x256>
 8005f8e:	07f1      	lsls	r1, r6, #31
 8005f90:	d508      	bpl.n	8005fa4 <_dtoa_r+0x35c>
 8005f92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f9a:	f7fa faa7 	bl	80004ec <__aeabi_dmul>
 8005f9e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005fa2:	3501      	adds	r5, #1
 8005fa4:	1076      	asrs	r6, r6, #1
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	2e00      	cmp	r6, #0
 8005faa:	d1f0      	bne.n	8005f8e <_dtoa_r+0x346>
 8005fac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fb4:	f7fa fbc4 	bl	8000740 <__aeabi_ddiv>
 8005fb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fbc:	e01b      	b.n	8005ff6 <_dtoa_r+0x3ae>
 8005fbe:	2502      	movs	r5, #2
 8005fc0:	e7a0      	b.n	8005f04 <_dtoa_r+0x2bc>
 8005fc2:	f000 80a4 	beq.w	800610e <_dtoa_r+0x4c6>
 8005fc6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005fca:	f1ca 0600 	rsb	r6, sl, #0
 8005fce:	4ba0      	ldr	r3, [pc, #640]	; (8006250 <_dtoa_r+0x608>)
 8005fd0:	f006 020f 	and.w	r2, r6, #15
 8005fd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fdc:	f7fa fa86 	bl	80004ec <__aeabi_dmul>
 8005fe0:	2502      	movs	r5, #2
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fe8:	4f9a      	ldr	r7, [pc, #616]	; (8006254 <_dtoa_r+0x60c>)
 8005fea:	1136      	asrs	r6, r6, #4
 8005fec:	2e00      	cmp	r6, #0
 8005fee:	f040 8083 	bne.w	80060f8 <_dtoa_r+0x4b0>
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1e0      	bne.n	8005fb8 <_dtoa_r+0x370>
 8005ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 808a 	beq.w	8006112 <_dtoa_r+0x4ca>
 8005ffe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006002:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006006:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800600a:	2200      	movs	r2, #0
 800600c:	4b92      	ldr	r3, [pc, #584]	; (8006258 <_dtoa_r+0x610>)
 800600e:	f7fa fcdf 	bl	80009d0 <__aeabi_dcmplt>
 8006012:	2800      	cmp	r0, #0
 8006014:	d07d      	beq.n	8006112 <_dtoa_r+0x4ca>
 8006016:	f1b8 0f00 	cmp.w	r8, #0
 800601a:	d07a      	beq.n	8006112 <_dtoa_r+0x4ca>
 800601c:	9b04      	ldr	r3, [sp, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	dd36      	ble.n	8006090 <_dtoa_r+0x448>
 8006022:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006026:	2200      	movs	r2, #0
 8006028:	4b8c      	ldr	r3, [pc, #560]	; (800625c <_dtoa_r+0x614>)
 800602a:	f7fa fa5f 	bl	80004ec <__aeabi_dmul>
 800602e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006032:	9e04      	ldr	r6, [sp, #16]
 8006034:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006038:	3501      	adds	r5, #1
 800603a:	4628      	mov	r0, r5
 800603c:	f7fa f9ec 	bl	8000418 <__aeabi_i2d>
 8006040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006044:	f7fa fa52 	bl	80004ec <__aeabi_dmul>
 8006048:	2200      	movs	r2, #0
 800604a:	4b85      	ldr	r3, [pc, #532]	; (8006260 <_dtoa_r+0x618>)
 800604c:	f7fa f898 	bl	8000180 <__adddf3>
 8006050:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006054:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006058:	950b      	str	r5, [sp, #44]	; 0x2c
 800605a:	2e00      	cmp	r6, #0
 800605c:	d15c      	bne.n	8006118 <_dtoa_r+0x4d0>
 800605e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006062:	2200      	movs	r2, #0
 8006064:	4b7f      	ldr	r3, [pc, #508]	; (8006264 <_dtoa_r+0x61c>)
 8006066:	f7fa f889 	bl	800017c <__aeabi_dsub>
 800606a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800606c:	462b      	mov	r3, r5
 800606e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006072:	f7fa fccb 	bl	8000a0c <__aeabi_dcmpgt>
 8006076:	2800      	cmp	r0, #0
 8006078:	f040 8281 	bne.w	800657e <_dtoa_r+0x936>
 800607c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006082:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006086:	f7fa fca3 	bl	80009d0 <__aeabi_dcmplt>
 800608a:	2800      	cmp	r0, #0
 800608c:	f040 8275 	bne.w	800657a <_dtoa_r+0x932>
 8006090:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006094:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800609a:	2b00      	cmp	r3, #0
 800609c:	f2c0 814b 	blt.w	8006336 <_dtoa_r+0x6ee>
 80060a0:	f1ba 0f0e 	cmp.w	sl, #14
 80060a4:	f300 8147 	bgt.w	8006336 <_dtoa_r+0x6ee>
 80060a8:	4b69      	ldr	r3, [pc, #420]	; (8006250 <_dtoa_r+0x608>)
 80060aa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f280 80d7 	bge.w	800626c <_dtoa_r+0x624>
 80060be:	f1b8 0f00 	cmp.w	r8, #0
 80060c2:	f300 80d3 	bgt.w	800626c <_dtoa_r+0x624>
 80060c6:	f040 8257 	bne.w	8006578 <_dtoa_r+0x930>
 80060ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060ce:	2200      	movs	r2, #0
 80060d0:	4b64      	ldr	r3, [pc, #400]	; (8006264 <_dtoa_r+0x61c>)
 80060d2:	f7fa fa0b 	bl	80004ec <__aeabi_dmul>
 80060d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060da:	f7fa fc8d 	bl	80009f8 <__aeabi_dcmpge>
 80060de:	4646      	mov	r6, r8
 80060e0:	4647      	mov	r7, r8
 80060e2:	2800      	cmp	r0, #0
 80060e4:	f040 822d 	bne.w	8006542 <_dtoa_r+0x8fa>
 80060e8:	9b06      	ldr	r3, [sp, #24]
 80060ea:	9a06      	ldr	r2, [sp, #24]
 80060ec:	1c5d      	adds	r5, r3, #1
 80060ee:	2331      	movs	r3, #49	; 0x31
 80060f0:	f10a 0a01 	add.w	sl, sl, #1
 80060f4:	7013      	strb	r3, [r2, #0]
 80060f6:	e228      	b.n	800654a <_dtoa_r+0x902>
 80060f8:	07f2      	lsls	r2, r6, #31
 80060fa:	d505      	bpl.n	8006108 <_dtoa_r+0x4c0>
 80060fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006100:	f7fa f9f4 	bl	80004ec <__aeabi_dmul>
 8006104:	2301      	movs	r3, #1
 8006106:	3501      	adds	r5, #1
 8006108:	1076      	asrs	r6, r6, #1
 800610a:	3708      	adds	r7, #8
 800610c:	e76e      	b.n	8005fec <_dtoa_r+0x3a4>
 800610e:	2502      	movs	r5, #2
 8006110:	e771      	b.n	8005ff6 <_dtoa_r+0x3ae>
 8006112:	4657      	mov	r7, sl
 8006114:	4646      	mov	r6, r8
 8006116:	e790      	b.n	800603a <_dtoa_r+0x3f2>
 8006118:	4b4d      	ldr	r3, [pc, #308]	; (8006250 <_dtoa_r+0x608>)
 800611a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800611e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006124:	2b00      	cmp	r3, #0
 8006126:	d048      	beq.n	80061ba <_dtoa_r+0x572>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	2000      	movs	r0, #0
 800612e:	494e      	ldr	r1, [pc, #312]	; (8006268 <_dtoa_r+0x620>)
 8006130:	f7fa fb06 	bl	8000740 <__aeabi_ddiv>
 8006134:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006138:	f7fa f820 	bl	800017c <__aeabi_dsub>
 800613c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006140:	9d06      	ldr	r5, [sp, #24]
 8006142:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006146:	f7fa fc81 	bl	8000a4c <__aeabi_d2iz>
 800614a:	9011      	str	r0, [sp, #68]	; 0x44
 800614c:	f7fa f964 	bl	8000418 <__aeabi_i2d>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006158:	f7fa f810 	bl	800017c <__aeabi_dsub>
 800615c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800615e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006162:	3330      	adds	r3, #48	; 0x30
 8006164:	f805 3b01 	strb.w	r3, [r5], #1
 8006168:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800616c:	f7fa fc30 	bl	80009d0 <__aeabi_dcmplt>
 8006170:	2800      	cmp	r0, #0
 8006172:	d163      	bne.n	800623c <_dtoa_r+0x5f4>
 8006174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006178:	2000      	movs	r0, #0
 800617a:	4937      	ldr	r1, [pc, #220]	; (8006258 <_dtoa_r+0x610>)
 800617c:	f7f9 fffe 	bl	800017c <__aeabi_dsub>
 8006180:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006184:	f7fa fc24 	bl	80009d0 <__aeabi_dcmplt>
 8006188:	2800      	cmp	r0, #0
 800618a:	f040 80b5 	bne.w	80062f8 <_dtoa_r+0x6b0>
 800618e:	9b06      	ldr	r3, [sp, #24]
 8006190:	1aeb      	subs	r3, r5, r3
 8006192:	429e      	cmp	r6, r3
 8006194:	f77f af7c 	ble.w	8006090 <_dtoa_r+0x448>
 8006198:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800619c:	2200      	movs	r2, #0
 800619e:	4b2f      	ldr	r3, [pc, #188]	; (800625c <_dtoa_r+0x614>)
 80061a0:	f7fa f9a4 	bl	80004ec <__aeabi_dmul>
 80061a4:	2200      	movs	r2, #0
 80061a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80061aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ae:	4b2b      	ldr	r3, [pc, #172]	; (800625c <_dtoa_r+0x614>)
 80061b0:	f7fa f99c 	bl	80004ec <__aeabi_dmul>
 80061b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061b8:	e7c3      	b.n	8006142 <_dtoa_r+0x4fa>
 80061ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061be:	f7fa f995 	bl	80004ec <__aeabi_dmul>
 80061c2:	9b06      	ldr	r3, [sp, #24]
 80061c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80061c8:	199d      	adds	r5, r3, r6
 80061ca:	461e      	mov	r6, r3
 80061cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061d0:	f7fa fc3c 	bl	8000a4c <__aeabi_d2iz>
 80061d4:	9011      	str	r0, [sp, #68]	; 0x44
 80061d6:	f7fa f91f 	bl	8000418 <__aeabi_i2d>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e2:	f7f9 ffcb 	bl	800017c <__aeabi_dsub>
 80061e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ec:	3330      	adds	r3, #48	; 0x30
 80061ee:	f806 3b01 	strb.w	r3, [r6], #1
 80061f2:	42ae      	cmp	r6, r5
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	d124      	bne.n	8006244 <_dtoa_r+0x5fc>
 80061fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061fe:	4b1a      	ldr	r3, [pc, #104]	; (8006268 <_dtoa_r+0x620>)
 8006200:	f7f9 ffbe 	bl	8000180 <__adddf3>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800620c:	f7fa fbfe 	bl	8000a0c <__aeabi_dcmpgt>
 8006210:	2800      	cmp	r0, #0
 8006212:	d171      	bne.n	80062f8 <_dtoa_r+0x6b0>
 8006214:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006218:	2000      	movs	r0, #0
 800621a:	4913      	ldr	r1, [pc, #76]	; (8006268 <_dtoa_r+0x620>)
 800621c:	f7f9 ffae 	bl	800017c <__aeabi_dsub>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006228:	f7fa fbd2 	bl	80009d0 <__aeabi_dcmplt>
 800622c:	2800      	cmp	r0, #0
 800622e:	f43f af2f 	beq.w	8006090 <_dtoa_r+0x448>
 8006232:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006236:	1e6a      	subs	r2, r5, #1
 8006238:	2b30      	cmp	r3, #48	; 0x30
 800623a:	d001      	beq.n	8006240 <_dtoa_r+0x5f8>
 800623c:	46ba      	mov	sl, r7
 800623e:	e04a      	b.n	80062d6 <_dtoa_r+0x68e>
 8006240:	4615      	mov	r5, r2
 8006242:	e7f6      	b.n	8006232 <_dtoa_r+0x5ea>
 8006244:	4b05      	ldr	r3, [pc, #20]	; (800625c <_dtoa_r+0x614>)
 8006246:	f7fa f951 	bl	80004ec <__aeabi_dmul>
 800624a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800624e:	e7bd      	b.n	80061cc <_dtoa_r+0x584>
 8006250:	08007bf8 	.word	0x08007bf8
 8006254:	08007bd0 	.word	0x08007bd0
 8006258:	3ff00000 	.word	0x3ff00000
 800625c:	40240000 	.word	0x40240000
 8006260:	401c0000 	.word	0x401c0000
 8006264:	40140000 	.word	0x40140000
 8006268:	3fe00000 	.word	0x3fe00000
 800626c:	9d06      	ldr	r5, [sp, #24]
 800626e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006272:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006276:	4630      	mov	r0, r6
 8006278:	4639      	mov	r1, r7
 800627a:	f7fa fa61 	bl	8000740 <__aeabi_ddiv>
 800627e:	f7fa fbe5 	bl	8000a4c <__aeabi_d2iz>
 8006282:	4681      	mov	r9, r0
 8006284:	f7fa f8c8 	bl	8000418 <__aeabi_i2d>
 8006288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800628c:	f7fa f92e 	bl	80004ec <__aeabi_dmul>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4630      	mov	r0, r6
 8006296:	4639      	mov	r1, r7
 8006298:	f7f9 ff70 	bl	800017c <__aeabi_dsub>
 800629c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80062a0:	f805 6b01 	strb.w	r6, [r5], #1
 80062a4:	9e06      	ldr	r6, [sp, #24]
 80062a6:	4602      	mov	r2, r0
 80062a8:	1bae      	subs	r6, r5, r6
 80062aa:	45b0      	cmp	r8, r6
 80062ac:	460b      	mov	r3, r1
 80062ae:	d135      	bne.n	800631c <_dtoa_r+0x6d4>
 80062b0:	f7f9 ff66 	bl	8000180 <__adddf3>
 80062b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062b8:	4606      	mov	r6, r0
 80062ba:	460f      	mov	r7, r1
 80062bc:	f7fa fba6 	bl	8000a0c <__aeabi_dcmpgt>
 80062c0:	b9c8      	cbnz	r0, 80062f6 <_dtoa_r+0x6ae>
 80062c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062c6:	4630      	mov	r0, r6
 80062c8:	4639      	mov	r1, r7
 80062ca:	f7fa fb77 	bl	80009bc <__aeabi_dcmpeq>
 80062ce:	b110      	cbz	r0, 80062d6 <_dtoa_r+0x68e>
 80062d0:	f019 0f01 	tst.w	r9, #1
 80062d4:	d10f      	bne.n	80062f6 <_dtoa_r+0x6ae>
 80062d6:	4659      	mov	r1, fp
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 fcb5 	bl	8006c48 <_Bfree>
 80062de:	2300      	movs	r3, #0
 80062e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062e2:	702b      	strb	r3, [r5, #0]
 80062e4:	f10a 0301 	add.w	r3, sl, #1
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f43f acf3 	beq.w	8005cd8 <_dtoa_r+0x90>
 80062f2:	601d      	str	r5, [r3, #0]
 80062f4:	e4f0      	b.n	8005cd8 <_dtoa_r+0x90>
 80062f6:	4657      	mov	r7, sl
 80062f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80062fc:	1e6b      	subs	r3, r5, #1
 80062fe:	2a39      	cmp	r2, #57	; 0x39
 8006300:	d106      	bne.n	8006310 <_dtoa_r+0x6c8>
 8006302:	9a06      	ldr	r2, [sp, #24]
 8006304:	429a      	cmp	r2, r3
 8006306:	d107      	bne.n	8006318 <_dtoa_r+0x6d0>
 8006308:	2330      	movs	r3, #48	; 0x30
 800630a:	7013      	strb	r3, [r2, #0]
 800630c:	4613      	mov	r3, r2
 800630e:	3701      	adds	r7, #1
 8006310:	781a      	ldrb	r2, [r3, #0]
 8006312:	3201      	adds	r2, #1
 8006314:	701a      	strb	r2, [r3, #0]
 8006316:	e791      	b.n	800623c <_dtoa_r+0x5f4>
 8006318:	461d      	mov	r5, r3
 800631a:	e7ed      	b.n	80062f8 <_dtoa_r+0x6b0>
 800631c:	2200      	movs	r2, #0
 800631e:	4b99      	ldr	r3, [pc, #612]	; (8006584 <_dtoa_r+0x93c>)
 8006320:	f7fa f8e4 	bl	80004ec <__aeabi_dmul>
 8006324:	2200      	movs	r2, #0
 8006326:	2300      	movs	r3, #0
 8006328:	4606      	mov	r6, r0
 800632a:	460f      	mov	r7, r1
 800632c:	f7fa fb46 	bl	80009bc <__aeabi_dcmpeq>
 8006330:	2800      	cmp	r0, #0
 8006332:	d09e      	beq.n	8006272 <_dtoa_r+0x62a>
 8006334:	e7cf      	b.n	80062d6 <_dtoa_r+0x68e>
 8006336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006338:	2a00      	cmp	r2, #0
 800633a:	f000 8088 	beq.w	800644e <_dtoa_r+0x806>
 800633e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006340:	2a01      	cmp	r2, #1
 8006342:	dc6d      	bgt.n	8006420 <_dtoa_r+0x7d8>
 8006344:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006346:	2a00      	cmp	r2, #0
 8006348:	d066      	beq.n	8006418 <_dtoa_r+0x7d0>
 800634a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800634e:	464d      	mov	r5, r9
 8006350:	9e08      	ldr	r6, [sp, #32]
 8006352:	9a07      	ldr	r2, [sp, #28]
 8006354:	2101      	movs	r1, #1
 8006356:	441a      	add	r2, r3
 8006358:	4620      	mov	r0, r4
 800635a:	4499      	add	r9, r3
 800635c:	9207      	str	r2, [sp, #28]
 800635e:	f000 fd13 	bl	8006d88 <__i2b>
 8006362:	4607      	mov	r7, r0
 8006364:	2d00      	cmp	r5, #0
 8006366:	dd0b      	ble.n	8006380 <_dtoa_r+0x738>
 8006368:	9b07      	ldr	r3, [sp, #28]
 800636a:	2b00      	cmp	r3, #0
 800636c:	dd08      	ble.n	8006380 <_dtoa_r+0x738>
 800636e:	42ab      	cmp	r3, r5
 8006370:	bfa8      	it	ge
 8006372:	462b      	movge	r3, r5
 8006374:	9a07      	ldr	r2, [sp, #28]
 8006376:	eba9 0903 	sub.w	r9, r9, r3
 800637a:	1aed      	subs	r5, r5, r3
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	9307      	str	r3, [sp, #28]
 8006380:	9b08      	ldr	r3, [sp, #32]
 8006382:	b1eb      	cbz	r3, 80063c0 <_dtoa_r+0x778>
 8006384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006386:	2b00      	cmp	r3, #0
 8006388:	d065      	beq.n	8006456 <_dtoa_r+0x80e>
 800638a:	b18e      	cbz	r6, 80063b0 <_dtoa_r+0x768>
 800638c:	4639      	mov	r1, r7
 800638e:	4632      	mov	r2, r6
 8006390:	4620      	mov	r0, r4
 8006392:	f000 fd97 	bl	8006ec4 <__pow5mult>
 8006396:	465a      	mov	r2, fp
 8006398:	4601      	mov	r1, r0
 800639a:	4607      	mov	r7, r0
 800639c:	4620      	mov	r0, r4
 800639e:	f000 fcfc 	bl	8006d9a <__multiply>
 80063a2:	4659      	mov	r1, fp
 80063a4:	900a      	str	r0, [sp, #40]	; 0x28
 80063a6:	4620      	mov	r0, r4
 80063a8:	f000 fc4e 	bl	8006c48 <_Bfree>
 80063ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ae:	469b      	mov	fp, r3
 80063b0:	9b08      	ldr	r3, [sp, #32]
 80063b2:	1b9a      	subs	r2, r3, r6
 80063b4:	d004      	beq.n	80063c0 <_dtoa_r+0x778>
 80063b6:	4659      	mov	r1, fp
 80063b8:	4620      	mov	r0, r4
 80063ba:	f000 fd83 	bl	8006ec4 <__pow5mult>
 80063be:	4683      	mov	fp, r0
 80063c0:	2101      	movs	r1, #1
 80063c2:	4620      	mov	r0, r4
 80063c4:	f000 fce0 	bl	8006d88 <__i2b>
 80063c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063ca:	4606      	mov	r6, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 81c6 	beq.w	800675e <_dtoa_r+0xb16>
 80063d2:	461a      	mov	r2, r3
 80063d4:	4601      	mov	r1, r0
 80063d6:	4620      	mov	r0, r4
 80063d8:	f000 fd74 	bl	8006ec4 <__pow5mult>
 80063dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063de:	4606      	mov	r6, r0
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	dc3e      	bgt.n	8006462 <_dtoa_r+0x81a>
 80063e4:	9b02      	ldr	r3, [sp, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d137      	bne.n	800645a <_dtoa_r+0x812>
 80063ea:	9b03      	ldr	r3, [sp, #12]
 80063ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d134      	bne.n	800645e <_dtoa_r+0x816>
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063fa:	0d1b      	lsrs	r3, r3, #20
 80063fc:	051b      	lsls	r3, r3, #20
 80063fe:	b12b      	cbz	r3, 800640c <_dtoa_r+0x7c4>
 8006400:	9b07      	ldr	r3, [sp, #28]
 8006402:	f109 0901 	add.w	r9, r9, #1
 8006406:	3301      	adds	r3, #1
 8006408:	9307      	str	r3, [sp, #28]
 800640a:	2301      	movs	r3, #1
 800640c:	9308      	str	r3, [sp, #32]
 800640e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006410:	2b00      	cmp	r3, #0
 8006412:	d128      	bne.n	8006466 <_dtoa_r+0x81e>
 8006414:	2001      	movs	r0, #1
 8006416:	e02e      	b.n	8006476 <_dtoa_r+0x82e>
 8006418:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800641a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800641e:	e796      	b.n	800634e <_dtoa_r+0x706>
 8006420:	9b08      	ldr	r3, [sp, #32]
 8006422:	f108 36ff 	add.w	r6, r8, #4294967295
 8006426:	42b3      	cmp	r3, r6
 8006428:	bfb7      	itett	lt
 800642a:	9b08      	ldrlt	r3, [sp, #32]
 800642c:	1b9e      	subge	r6, r3, r6
 800642e:	1af2      	sublt	r2, r6, r3
 8006430:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006432:	bfbf      	itttt	lt
 8006434:	9608      	strlt	r6, [sp, #32]
 8006436:	189b      	addlt	r3, r3, r2
 8006438:	930c      	strlt	r3, [sp, #48]	; 0x30
 800643a:	2600      	movlt	r6, #0
 800643c:	f1b8 0f00 	cmp.w	r8, #0
 8006440:	bfb9      	ittee	lt
 8006442:	eba9 0508 	sublt.w	r5, r9, r8
 8006446:	2300      	movlt	r3, #0
 8006448:	464d      	movge	r5, r9
 800644a:	4643      	movge	r3, r8
 800644c:	e781      	b.n	8006352 <_dtoa_r+0x70a>
 800644e:	9e08      	ldr	r6, [sp, #32]
 8006450:	464d      	mov	r5, r9
 8006452:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006454:	e786      	b.n	8006364 <_dtoa_r+0x71c>
 8006456:	9a08      	ldr	r2, [sp, #32]
 8006458:	e7ad      	b.n	80063b6 <_dtoa_r+0x76e>
 800645a:	2300      	movs	r3, #0
 800645c:	e7d6      	b.n	800640c <_dtoa_r+0x7c4>
 800645e:	9b02      	ldr	r3, [sp, #8]
 8006460:	e7d4      	b.n	800640c <_dtoa_r+0x7c4>
 8006462:	2300      	movs	r3, #0
 8006464:	9308      	str	r3, [sp, #32]
 8006466:	6933      	ldr	r3, [r6, #16]
 8006468:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800646c:	6918      	ldr	r0, [r3, #16]
 800646e:	f000 fc3d 	bl	8006cec <__hi0bits>
 8006472:	f1c0 0020 	rsb	r0, r0, #32
 8006476:	9b07      	ldr	r3, [sp, #28]
 8006478:	4418      	add	r0, r3
 800647a:	f010 001f 	ands.w	r0, r0, #31
 800647e:	d047      	beq.n	8006510 <_dtoa_r+0x8c8>
 8006480:	f1c0 0320 	rsb	r3, r0, #32
 8006484:	2b04      	cmp	r3, #4
 8006486:	dd3b      	ble.n	8006500 <_dtoa_r+0x8b8>
 8006488:	9b07      	ldr	r3, [sp, #28]
 800648a:	f1c0 001c 	rsb	r0, r0, #28
 800648e:	4481      	add	r9, r0
 8006490:	4405      	add	r5, r0
 8006492:	4403      	add	r3, r0
 8006494:	9307      	str	r3, [sp, #28]
 8006496:	f1b9 0f00 	cmp.w	r9, #0
 800649a:	dd05      	ble.n	80064a8 <_dtoa_r+0x860>
 800649c:	4659      	mov	r1, fp
 800649e:	464a      	mov	r2, r9
 80064a0:	4620      	mov	r0, r4
 80064a2:	f000 fd5d 	bl	8006f60 <__lshift>
 80064a6:	4683      	mov	fp, r0
 80064a8:	9b07      	ldr	r3, [sp, #28]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	dd05      	ble.n	80064ba <_dtoa_r+0x872>
 80064ae:	4631      	mov	r1, r6
 80064b0:	461a      	mov	r2, r3
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 fd54 	bl	8006f60 <__lshift>
 80064b8:	4606      	mov	r6, r0
 80064ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064bc:	b353      	cbz	r3, 8006514 <_dtoa_r+0x8cc>
 80064be:	4631      	mov	r1, r6
 80064c0:	4658      	mov	r0, fp
 80064c2:	f000 fda1 	bl	8007008 <__mcmp>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	da24      	bge.n	8006514 <_dtoa_r+0x8cc>
 80064ca:	2300      	movs	r3, #0
 80064cc:	4659      	mov	r1, fp
 80064ce:	220a      	movs	r2, #10
 80064d0:	4620      	mov	r0, r4
 80064d2:	f000 fbd0 	bl	8006c76 <__multadd>
 80064d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064dc:	4683      	mov	fp, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 8144 	beq.w	800676c <_dtoa_r+0xb24>
 80064e4:	2300      	movs	r3, #0
 80064e6:	4639      	mov	r1, r7
 80064e8:	220a      	movs	r2, #10
 80064ea:	4620      	mov	r0, r4
 80064ec:	f000 fbc3 	bl	8006c76 <__multadd>
 80064f0:	9b04      	ldr	r3, [sp, #16]
 80064f2:	4607      	mov	r7, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	dc4d      	bgt.n	8006594 <_dtoa_r+0x94c>
 80064f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	dd4a      	ble.n	8006594 <_dtoa_r+0x94c>
 80064fe:	e011      	b.n	8006524 <_dtoa_r+0x8dc>
 8006500:	d0c9      	beq.n	8006496 <_dtoa_r+0x84e>
 8006502:	9a07      	ldr	r2, [sp, #28]
 8006504:	331c      	adds	r3, #28
 8006506:	441a      	add	r2, r3
 8006508:	4499      	add	r9, r3
 800650a:	441d      	add	r5, r3
 800650c:	4613      	mov	r3, r2
 800650e:	e7c1      	b.n	8006494 <_dtoa_r+0x84c>
 8006510:	4603      	mov	r3, r0
 8006512:	e7f6      	b.n	8006502 <_dtoa_r+0x8ba>
 8006514:	f1b8 0f00 	cmp.w	r8, #0
 8006518:	dc36      	bgt.n	8006588 <_dtoa_r+0x940>
 800651a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800651c:	2b02      	cmp	r3, #2
 800651e:	dd33      	ble.n	8006588 <_dtoa_r+0x940>
 8006520:	f8cd 8010 	str.w	r8, [sp, #16]
 8006524:	9b04      	ldr	r3, [sp, #16]
 8006526:	b963      	cbnz	r3, 8006542 <_dtoa_r+0x8fa>
 8006528:	4631      	mov	r1, r6
 800652a:	2205      	movs	r2, #5
 800652c:	4620      	mov	r0, r4
 800652e:	f000 fba2 	bl	8006c76 <__multadd>
 8006532:	4601      	mov	r1, r0
 8006534:	4606      	mov	r6, r0
 8006536:	4658      	mov	r0, fp
 8006538:	f000 fd66 	bl	8007008 <__mcmp>
 800653c:	2800      	cmp	r0, #0
 800653e:	f73f add3 	bgt.w	80060e8 <_dtoa_r+0x4a0>
 8006542:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006544:	9d06      	ldr	r5, [sp, #24]
 8006546:	ea6f 0a03 	mvn.w	sl, r3
 800654a:	f04f 0900 	mov.w	r9, #0
 800654e:	4631      	mov	r1, r6
 8006550:	4620      	mov	r0, r4
 8006552:	f000 fb79 	bl	8006c48 <_Bfree>
 8006556:	2f00      	cmp	r7, #0
 8006558:	f43f aebd 	beq.w	80062d6 <_dtoa_r+0x68e>
 800655c:	f1b9 0f00 	cmp.w	r9, #0
 8006560:	d005      	beq.n	800656e <_dtoa_r+0x926>
 8006562:	45b9      	cmp	r9, r7
 8006564:	d003      	beq.n	800656e <_dtoa_r+0x926>
 8006566:	4649      	mov	r1, r9
 8006568:	4620      	mov	r0, r4
 800656a:	f000 fb6d 	bl	8006c48 <_Bfree>
 800656e:	4639      	mov	r1, r7
 8006570:	4620      	mov	r0, r4
 8006572:	f000 fb69 	bl	8006c48 <_Bfree>
 8006576:	e6ae      	b.n	80062d6 <_dtoa_r+0x68e>
 8006578:	2600      	movs	r6, #0
 800657a:	4637      	mov	r7, r6
 800657c:	e7e1      	b.n	8006542 <_dtoa_r+0x8fa>
 800657e:	46ba      	mov	sl, r7
 8006580:	4637      	mov	r7, r6
 8006582:	e5b1      	b.n	80060e8 <_dtoa_r+0x4a0>
 8006584:	40240000 	.word	0x40240000
 8006588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658a:	f8cd 8010 	str.w	r8, [sp, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 80f3 	beq.w	800677a <_dtoa_r+0xb32>
 8006594:	2d00      	cmp	r5, #0
 8006596:	dd05      	ble.n	80065a4 <_dtoa_r+0x95c>
 8006598:	4639      	mov	r1, r7
 800659a:	462a      	mov	r2, r5
 800659c:	4620      	mov	r0, r4
 800659e:	f000 fcdf 	bl	8006f60 <__lshift>
 80065a2:	4607      	mov	r7, r0
 80065a4:	9b08      	ldr	r3, [sp, #32]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d04c      	beq.n	8006644 <_dtoa_r+0x9fc>
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 fb17 	bl	8006be0 <_Balloc>
 80065b2:	4605      	mov	r5, r0
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	f107 010c 	add.w	r1, r7, #12
 80065ba:	3202      	adds	r2, #2
 80065bc:	0092      	lsls	r2, r2, #2
 80065be:	300c      	adds	r0, #12
 80065c0:	f7fe fc14 	bl	8004dec <memcpy>
 80065c4:	2201      	movs	r2, #1
 80065c6:	4629      	mov	r1, r5
 80065c8:	4620      	mov	r0, r4
 80065ca:	f000 fcc9 	bl	8006f60 <__lshift>
 80065ce:	46b9      	mov	r9, r7
 80065d0:	4607      	mov	r7, r0
 80065d2:	9b06      	ldr	r3, [sp, #24]
 80065d4:	9307      	str	r3, [sp, #28]
 80065d6:	9b02      	ldr	r3, [sp, #8]
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	9308      	str	r3, [sp, #32]
 80065de:	4631      	mov	r1, r6
 80065e0:	4658      	mov	r0, fp
 80065e2:	f7ff faa3 	bl	8005b2c <quorem>
 80065e6:	4649      	mov	r1, r9
 80065e8:	4605      	mov	r5, r0
 80065ea:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80065ee:	4658      	mov	r0, fp
 80065f0:	f000 fd0a 	bl	8007008 <__mcmp>
 80065f4:	463a      	mov	r2, r7
 80065f6:	9002      	str	r0, [sp, #8]
 80065f8:	4631      	mov	r1, r6
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 fd1e 	bl	800703c <__mdiff>
 8006600:	68c3      	ldr	r3, [r0, #12]
 8006602:	4602      	mov	r2, r0
 8006604:	bb03      	cbnz	r3, 8006648 <_dtoa_r+0xa00>
 8006606:	4601      	mov	r1, r0
 8006608:	9009      	str	r0, [sp, #36]	; 0x24
 800660a:	4658      	mov	r0, fp
 800660c:	f000 fcfc 	bl	8007008 <__mcmp>
 8006610:	4603      	mov	r3, r0
 8006612:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006614:	4611      	mov	r1, r2
 8006616:	4620      	mov	r0, r4
 8006618:	9309      	str	r3, [sp, #36]	; 0x24
 800661a:	f000 fb15 	bl	8006c48 <_Bfree>
 800661e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006620:	b9a3      	cbnz	r3, 800664c <_dtoa_r+0xa04>
 8006622:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006624:	b992      	cbnz	r2, 800664c <_dtoa_r+0xa04>
 8006626:	9a08      	ldr	r2, [sp, #32]
 8006628:	b982      	cbnz	r2, 800664c <_dtoa_r+0xa04>
 800662a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800662e:	d029      	beq.n	8006684 <_dtoa_r+0xa3c>
 8006630:	9b02      	ldr	r3, [sp, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	dd01      	ble.n	800663a <_dtoa_r+0x9f2>
 8006636:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800663a:	9b07      	ldr	r3, [sp, #28]
 800663c:	1c5d      	adds	r5, r3, #1
 800663e:	f883 8000 	strb.w	r8, [r3]
 8006642:	e784      	b.n	800654e <_dtoa_r+0x906>
 8006644:	4638      	mov	r0, r7
 8006646:	e7c2      	b.n	80065ce <_dtoa_r+0x986>
 8006648:	2301      	movs	r3, #1
 800664a:	e7e3      	b.n	8006614 <_dtoa_r+0x9cc>
 800664c:	9a02      	ldr	r2, [sp, #8]
 800664e:	2a00      	cmp	r2, #0
 8006650:	db04      	blt.n	800665c <_dtoa_r+0xa14>
 8006652:	d123      	bne.n	800669c <_dtoa_r+0xa54>
 8006654:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006656:	bb0a      	cbnz	r2, 800669c <_dtoa_r+0xa54>
 8006658:	9a08      	ldr	r2, [sp, #32]
 800665a:	b9fa      	cbnz	r2, 800669c <_dtoa_r+0xa54>
 800665c:	2b00      	cmp	r3, #0
 800665e:	ddec      	ble.n	800663a <_dtoa_r+0x9f2>
 8006660:	4659      	mov	r1, fp
 8006662:	2201      	movs	r2, #1
 8006664:	4620      	mov	r0, r4
 8006666:	f000 fc7b 	bl	8006f60 <__lshift>
 800666a:	4631      	mov	r1, r6
 800666c:	4683      	mov	fp, r0
 800666e:	f000 fccb 	bl	8007008 <__mcmp>
 8006672:	2800      	cmp	r0, #0
 8006674:	dc03      	bgt.n	800667e <_dtoa_r+0xa36>
 8006676:	d1e0      	bne.n	800663a <_dtoa_r+0x9f2>
 8006678:	f018 0f01 	tst.w	r8, #1
 800667c:	d0dd      	beq.n	800663a <_dtoa_r+0x9f2>
 800667e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006682:	d1d8      	bne.n	8006636 <_dtoa_r+0x9ee>
 8006684:	9b07      	ldr	r3, [sp, #28]
 8006686:	9a07      	ldr	r2, [sp, #28]
 8006688:	1c5d      	adds	r5, r3, #1
 800668a:	2339      	movs	r3, #57	; 0x39
 800668c:	7013      	strb	r3, [r2, #0]
 800668e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006692:	1e6a      	subs	r2, r5, #1
 8006694:	2b39      	cmp	r3, #57	; 0x39
 8006696:	d04d      	beq.n	8006734 <_dtoa_r+0xaec>
 8006698:	3301      	adds	r3, #1
 800669a:	e052      	b.n	8006742 <_dtoa_r+0xafa>
 800669c:	9a07      	ldr	r2, [sp, #28]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f102 0501 	add.w	r5, r2, #1
 80066a4:	dd06      	ble.n	80066b4 <_dtoa_r+0xa6c>
 80066a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80066aa:	d0eb      	beq.n	8006684 <_dtoa_r+0xa3c>
 80066ac:	f108 0801 	add.w	r8, r8, #1
 80066b0:	9b07      	ldr	r3, [sp, #28]
 80066b2:	e7c4      	b.n	800663e <_dtoa_r+0x9f6>
 80066b4:	9b06      	ldr	r3, [sp, #24]
 80066b6:	9a04      	ldr	r2, [sp, #16]
 80066b8:	1aeb      	subs	r3, r5, r3
 80066ba:	4293      	cmp	r3, r2
 80066bc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80066c0:	d021      	beq.n	8006706 <_dtoa_r+0xabe>
 80066c2:	4659      	mov	r1, fp
 80066c4:	2300      	movs	r3, #0
 80066c6:	220a      	movs	r2, #10
 80066c8:	4620      	mov	r0, r4
 80066ca:	f000 fad4 	bl	8006c76 <__multadd>
 80066ce:	45b9      	cmp	r9, r7
 80066d0:	4683      	mov	fp, r0
 80066d2:	f04f 0300 	mov.w	r3, #0
 80066d6:	f04f 020a 	mov.w	r2, #10
 80066da:	4649      	mov	r1, r9
 80066dc:	4620      	mov	r0, r4
 80066de:	d105      	bne.n	80066ec <_dtoa_r+0xaa4>
 80066e0:	f000 fac9 	bl	8006c76 <__multadd>
 80066e4:	4681      	mov	r9, r0
 80066e6:	4607      	mov	r7, r0
 80066e8:	9507      	str	r5, [sp, #28]
 80066ea:	e778      	b.n	80065de <_dtoa_r+0x996>
 80066ec:	f000 fac3 	bl	8006c76 <__multadd>
 80066f0:	4639      	mov	r1, r7
 80066f2:	4681      	mov	r9, r0
 80066f4:	2300      	movs	r3, #0
 80066f6:	220a      	movs	r2, #10
 80066f8:	4620      	mov	r0, r4
 80066fa:	f000 fabc 	bl	8006c76 <__multadd>
 80066fe:	4607      	mov	r7, r0
 8006700:	e7f2      	b.n	80066e8 <_dtoa_r+0xaa0>
 8006702:	f04f 0900 	mov.w	r9, #0
 8006706:	4659      	mov	r1, fp
 8006708:	2201      	movs	r2, #1
 800670a:	4620      	mov	r0, r4
 800670c:	f000 fc28 	bl	8006f60 <__lshift>
 8006710:	4631      	mov	r1, r6
 8006712:	4683      	mov	fp, r0
 8006714:	f000 fc78 	bl	8007008 <__mcmp>
 8006718:	2800      	cmp	r0, #0
 800671a:	dcb8      	bgt.n	800668e <_dtoa_r+0xa46>
 800671c:	d102      	bne.n	8006724 <_dtoa_r+0xadc>
 800671e:	f018 0f01 	tst.w	r8, #1
 8006722:	d1b4      	bne.n	800668e <_dtoa_r+0xa46>
 8006724:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006728:	1e6a      	subs	r2, r5, #1
 800672a:	2b30      	cmp	r3, #48	; 0x30
 800672c:	f47f af0f 	bne.w	800654e <_dtoa_r+0x906>
 8006730:	4615      	mov	r5, r2
 8006732:	e7f7      	b.n	8006724 <_dtoa_r+0xadc>
 8006734:	9b06      	ldr	r3, [sp, #24]
 8006736:	4293      	cmp	r3, r2
 8006738:	d105      	bne.n	8006746 <_dtoa_r+0xafe>
 800673a:	2331      	movs	r3, #49	; 0x31
 800673c:	9a06      	ldr	r2, [sp, #24]
 800673e:	f10a 0a01 	add.w	sl, sl, #1
 8006742:	7013      	strb	r3, [r2, #0]
 8006744:	e703      	b.n	800654e <_dtoa_r+0x906>
 8006746:	4615      	mov	r5, r2
 8006748:	e7a1      	b.n	800668e <_dtoa_r+0xa46>
 800674a:	4b17      	ldr	r3, [pc, #92]	; (80067a8 <_dtoa_r+0xb60>)
 800674c:	f7ff bae1 	b.w	8005d12 <_dtoa_r+0xca>
 8006750:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006752:	2b00      	cmp	r3, #0
 8006754:	f47f aabb 	bne.w	8005cce <_dtoa_r+0x86>
 8006758:	4b14      	ldr	r3, [pc, #80]	; (80067ac <_dtoa_r+0xb64>)
 800675a:	f7ff bada 	b.w	8005d12 <_dtoa_r+0xca>
 800675e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006760:	2b01      	cmp	r3, #1
 8006762:	f77f ae3f 	ble.w	80063e4 <_dtoa_r+0x79c>
 8006766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006768:	9308      	str	r3, [sp, #32]
 800676a:	e653      	b.n	8006414 <_dtoa_r+0x7cc>
 800676c:	9b04      	ldr	r3, [sp, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	dc03      	bgt.n	800677a <_dtoa_r+0xb32>
 8006772:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006774:	2b02      	cmp	r3, #2
 8006776:	f73f aed5 	bgt.w	8006524 <_dtoa_r+0x8dc>
 800677a:	9d06      	ldr	r5, [sp, #24]
 800677c:	4631      	mov	r1, r6
 800677e:	4658      	mov	r0, fp
 8006780:	f7ff f9d4 	bl	8005b2c <quorem>
 8006784:	9b06      	ldr	r3, [sp, #24]
 8006786:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800678a:	f805 8b01 	strb.w	r8, [r5], #1
 800678e:	9a04      	ldr	r2, [sp, #16]
 8006790:	1aeb      	subs	r3, r5, r3
 8006792:	429a      	cmp	r2, r3
 8006794:	ddb5      	ble.n	8006702 <_dtoa_r+0xaba>
 8006796:	4659      	mov	r1, fp
 8006798:	2300      	movs	r3, #0
 800679a:	220a      	movs	r2, #10
 800679c:	4620      	mov	r0, r4
 800679e:	f000 fa6a 	bl	8006c76 <__multadd>
 80067a2:	4683      	mov	fp, r0
 80067a4:	e7ea      	b.n	800677c <_dtoa_r+0xb34>
 80067a6:	bf00      	nop
 80067a8:	08007b30 	.word	0x08007b30
 80067ac:	08007b54 	.word	0x08007b54

080067b0 <__sflush_r>:
 80067b0:	898a      	ldrh	r2, [r1, #12]
 80067b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b6:	4605      	mov	r5, r0
 80067b8:	0710      	lsls	r0, r2, #28
 80067ba:	460c      	mov	r4, r1
 80067bc:	d458      	bmi.n	8006870 <__sflush_r+0xc0>
 80067be:	684b      	ldr	r3, [r1, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	dc05      	bgt.n	80067d0 <__sflush_r+0x20>
 80067c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	dc02      	bgt.n	80067d0 <__sflush_r+0x20>
 80067ca:	2000      	movs	r0, #0
 80067cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067d2:	2e00      	cmp	r6, #0
 80067d4:	d0f9      	beq.n	80067ca <__sflush_r+0x1a>
 80067d6:	2300      	movs	r3, #0
 80067d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067dc:	682f      	ldr	r7, [r5, #0]
 80067de:	6a21      	ldr	r1, [r4, #32]
 80067e0:	602b      	str	r3, [r5, #0]
 80067e2:	d032      	beq.n	800684a <__sflush_r+0x9a>
 80067e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	075a      	lsls	r2, r3, #29
 80067ea:	d505      	bpl.n	80067f8 <__sflush_r+0x48>
 80067ec:	6863      	ldr	r3, [r4, #4]
 80067ee:	1ac0      	subs	r0, r0, r3
 80067f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067f2:	b10b      	cbz	r3, 80067f8 <__sflush_r+0x48>
 80067f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067f6:	1ac0      	subs	r0, r0, r3
 80067f8:	2300      	movs	r3, #0
 80067fa:	4602      	mov	r2, r0
 80067fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067fe:	6a21      	ldr	r1, [r4, #32]
 8006800:	4628      	mov	r0, r5
 8006802:	47b0      	blx	r6
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	89a3      	ldrh	r3, [r4, #12]
 8006808:	d106      	bne.n	8006818 <__sflush_r+0x68>
 800680a:	6829      	ldr	r1, [r5, #0]
 800680c:	291d      	cmp	r1, #29
 800680e:	d848      	bhi.n	80068a2 <__sflush_r+0xf2>
 8006810:	4a29      	ldr	r2, [pc, #164]	; (80068b8 <__sflush_r+0x108>)
 8006812:	40ca      	lsrs	r2, r1
 8006814:	07d6      	lsls	r6, r2, #31
 8006816:	d544      	bpl.n	80068a2 <__sflush_r+0xf2>
 8006818:	2200      	movs	r2, #0
 800681a:	6062      	str	r2, [r4, #4]
 800681c:	6922      	ldr	r2, [r4, #16]
 800681e:	04d9      	lsls	r1, r3, #19
 8006820:	6022      	str	r2, [r4, #0]
 8006822:	d504      	bpl.n	800682e <__sflush_r+0x7e>
 8006824:	1c42      	adds	r2, r0, #1
 8006826:	d101      	bne.n	800682c <__sflush_r+0x7c>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b903      	cbnz	r3, 800682e <__sflush_r+0x7e>
 800682c:	6560      	str	r0, [r4, #84]	; 0x54
 800682e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006830:	602f      	str	r7, [r5, #0]
 8006832:	2900      	cmp	r1, #0
 8006834:	d0c9      	beq.n	80067ca <__sflush_r+0x1a>
 8006836:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800683a:	4299      	cmp	r1, r3
 800683c:	d002      	beq.n	8006844 <__sflush_r+0x94>
 800683e:	4628      	mov	r0, r5
 8006840:	f000 fcb8 	bl	80071b4 <_free_r>
 8006844:	2000      	movs	r0, #0
 8006846:	6360      	str	r0, [r4, #52]	; 0x34
 8006848:	e7c0      	b.n	80067cc <__sflush_r+0x1c>
 800684a:	2301      	movs	r3, #1
 800684c:	4628      	mov	r0, r5
 800684e:	47b0      	blx	r6
 8006850:	1c41      	adds	r1, r0, #1
 8006852:	d1c8      	bne.n	80067e6 <__sflush_r+0x36>
 8006854:	682b      	ldr	r3, [r5, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0c5      	beq.n	80067e6 <__sflush_r+0x36>
 800685a:	2b1d      	cmp	r3, #29
 800685c:	d001      	beq.n	8006862 <__sflush_r+0xb2>
 800685e:	2b16      	cmp	r3, #22
 8006860:	d101      	bne.n	8006866 <__sflush_r+0xb6>
 8006862:	602f      	str	r7, [r5, #0]
 8006864:	e7b1      	b.n	80067ca <__sflush_r+0x1a>
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	e7ad      	b.n	80067cc <__sflush_r+0x1c>
 8006870:	690f      	ldr	r7, [r1, #16]
 8006872:	2f00      	cmp	r7, #0
 8006874:	d0a9      	beq.n	80067ca <__sflush_r+0x1a>
 8006876:	0793      	lsls	r3, r2, #30
 8006878:	bf18      	it	ne
 800687a:	2300      	movne	r3, #0
 800687c:	680e      	ldr	r6, [r1, #0]
 800687e:	bf08      	it	eq
 8006880:	694b      	ldreq	r3, [r1, #20]
 8006882:	eba6 0807 	sub.w	r8, r6, r7
 8006886:	600f      	str	r7, [r1, #0]
 8006888:	608b      	str	r3, [r1, #8]
 800688a:	f1b8 0f00 	cmp.w	r8, #0
 800688e:	dd9c      	ble.n	80067ca <__sflush_r+0x1a>
 8006890:	4643      	mov	r3, r8
 8006892:	463a      	mov	r2, r7
 8006894:	6a21      	ldr	r1, [r4, #32]
 8006896:	4628      	mov	r0, r5
 8006898:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800689a:	47b0      	blx	r6
 800689c:	2800      	cmp	r0, #0
 800689e:	dc06      	bgt.n	80068ae <__sflush_r+0xfe>
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068a6:	81a3      	strh	r3, [r4, #12]
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	e78e      	b.n	80067cc <__sflush_r+0x1c>
 80068ae:	4407      	add	r7, r0
 80068b0:	eba8 0800 	sub.w	r8, r8, r0
 80068b4:	e7e9      	b.n	800688a <__sflush_r+0xda>
 80068b6:	bf00      	nop
 80068b8:	20400001 	.word	0x20400001

080068bc <_fflush_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	690b      	ldr	r3, [r1, #16]
 80068c0:	4605      	mov	r5, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	b1db      	cbz	r3, 80068fe <_fflush_r+0x42>
 80068c6:	b118      	cbz	r0, 80068d0 <_fflush_r+0x14>
 80068c8:	6983      	ldr	r3, [r0, #24]
 80068ca:	b90b      	cbnz	r3, 80068d0 <_fflush_r+0x14>
 80068cc:	f000 f860 	bl	8006990 <__sinit>
 80068d0:	4b0c      	ldr	r3, [pc, #48]	; (8006904 <_fflush_r+0x48>)
 80068d2:	429c      	cmp	r4, r3
 80068d4:	d109      	bne.n	80068ea <_fflush_r+0x2e>
 80068d6:	686c      	ldr	r4, [r5, #4]
 80068d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068dc:	b17b      	cbz	r3, 80068fe <_fflush_r+0x42>
 80068de:	4621      	mov	r1, r4
 80068e0:	4628      	mov	r0, r5
 80068e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068e6:	f7ff bf63 	b.w	80067b0 <__sflush_r>
 80068ea:	4b07      	ldr	r3, [pc, #28]	; (8006908 <_fflush_r+0x4c>)
 80068ec:	429c      	cmp	r4, r3
 80068ee:	d101      	bne.n	80068f4 <_fflush_r+0x38>
 80068f0:	68ac      	ldr	r4, [r5, #8]
 80068f2:	e7f1      	b.n	80068d8 <_fflush_r+0x1c>
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <_fflush_r+0x50>)
 80068f6:	429c      	cmp	r4, r3
 80068f8:	bf08      	it	eq
 80068fa:	68ec      	ldreq	r4, [r5, #12]
 80068fc:	e7ec      	b.n	80068d8 <_fflush_r+0x1c>
 80068fe:	2000      	movs	r0, #0
 8006900:	bd38      	pop	{r3, r4, r5, pc}
 8006902:	bf00      	nop
 8006904:	08007b84 	.word	0x08007b84
 8006908:	08007ba4 	.word	0x08007ba4
 800690c:	08007b64 	.word	0x08007b64

08006910 <std>:
 8006910:	2300      	movs	r3, #0
 8006912:	b510      	push	{r4, lr}
 8006914:	4604      	mov	r4, r0
 8006916:	e9c0 3300 	strd	r3, r3, [r0]
 800691a:	6083      	str	r3, [r0, #8]
 800691c:	8181      	strh	r1, [r0, #12]
 800691e:	6643      	str	r3, [r0, #100]	; 0x64
 8006920:	81c2      	strh	r2, [r0, #14]
 8006922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006926:	6183      	str	r3, [r0, #24]
 8006928:	4619      	mov	r1, r3
 800692a:	2208      	movs	r2, #8
 800692c:	305c      	adds	r0, #92	; 0x5c
 800692e:	f7fe fa68 	bl	8004e02 <memset>
 8006932:	4b05      	ldr	r3, [pc, #20]	; (8006948 <std+0x38>)
 8006934:	6224      	str	r4, [r4, #32]
 8006936:	6263      	str	r3, [r4, #36]	; 0x24
 8006938:	4b04      	ldr	r3, [pc, #16]	; (800694c <std+0x3c>)
 800693a:	62a3      	str	r3, [r4, #40]	; 0x28
 800693c:	4b04      	ldr	r3, [pc, #16]	; (8006950 <std+0x40>)
 800693e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006940:	4b04      	ldr	r3, [pc, #16]	; (8006954 <std+0x44>)
 8006942:	6323      	str	r3, [r4, #48]	; 0x30
 8006944:	bd10      	pop	{r4, pc}
 8006946:	bf00      	nop
 8006948:	08007609 	.word	0x08007609
 800694c:	0800762b 	.word	0x0800762b
 8006950:	08007663 	.word	0x08007663
 8006954:	08007687 	.word	0x08007687

08006958 <_cleanup_r>:
 8006958:	4901      	ldr	r1, [pc, #4]	; (8006960 <_cleanup_r+0x8>)
 800695a:	f000 b885 	b.w	8006a68 <_fwalk_reent>
 800695e:	bf00      	nop
 8006960:	080068bd 	.word	0x080068bd

08006964 <__sfmoreglue>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	2568      	movs	r5, #104	; 0x68
 8006968:	1e4a      	subs	r2, r1, #1
 800696a:	4355      	muls	r5, r2
 800696c:	460e      	mov	r6, r1
 800696e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006972:	f000 fc6b 	bl	800724c <_malloc_r>
 8006976:	4604      	mov	r4, r0
 8006978:	b140      	cbz	r0, 800698c <__sfmoreglue+0x28>
 800697a:	2100      	movs	r1, #0
 800697c:	e9c0 1600 	strd	r1, r6, [r0]
 8006980:	300c      	adds	r0, #12
 8006982:	60a0      	str	r0, [r4, #8]
 8006984:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006988:	f7fe fa3b 	bl	8004e02 <memset>
 800698c:	4620      	mov	r0, r4
 800698e:	bd70      	pop	{r4, r5, r6, pc}

08006990 <__sinit>:
 8006990:	6983      	ldr	r3, [r0, #24]
 8006992:	b510      	push	{r4, lr}
 8006994:	4604      	mov	r4, r0
 8006996:	bb33      	cbnz	r3, 80069e6 <__sinit+0x56>
 8006998:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800699c:	6503      	str	r3, [r0, #80]	; 0x50
 800699e:	4b12      	ldr	r3, [pc, #72]	; (80069e8 <__sinit+0x58>)
 80069a0:	4a12      	ldr	r2, [pc, #72]	; (80069ec <__sinit+0x5c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6282      	str	r2, [r0, #40]	; 0x28
 80069a6:	4298      	cmp	r0, r3
 80069a8:	bf04      	itt	eq
 80069aa:	2301      	moveq	r3, #1
 80069ac:	6183      	streq	r3, [r0, #24]
 80069ae:	f000 f81f 	bl	80069f0 <__sfp>
 80069b2:	6060      	str	r0, [r4, #4]
 80069b4:	4620      	mov	r0, r4
 80069b6:	f000 f81b 	bl	80069f0 <__sfp>
 80069ba:	60a0      	str	r0, [r4, #8]
 80069bc:	4620      	mov	r0, r4
 80069be:	f000 f817 	bl	80069f0 <__sfp>
 80069c2:	2200      	movs	r2, #0
 80069c4:	60e0      	str	r0, [r4, #12]
 80069c6:	2104      	movs	r1, #4
 80069c8:	6860      	ldr	r0, [r4, #4]
 80069ca:	f7ff ffa1 	bl	8006910 <std>
 80069ce:	2201      	movs	r2, #1
 80069d0:	2109      	movs	r1, #9
 80069d2:	68a0      	ldr	r0, [r4, #8]
 80069d4:	f7ff ff9c 	bl	8006910 <std>
 80069d8:	2202      	movs	r2, #2
 80069da:	2112      	movs	r1, #18
 80069dc:	68e0      	ldr	r0, [r4, #12]
 80069de:	f7ff ff97 	bl	8006910 <std>
 80069e2:	2301      	movs	r3, #1
 80069e4:	61a3      	str	r3, [r4, #24]
 80069e6:	bd10      	pop	{r4, pc}
 80069e8:	08007b1c 	.word	0x08007b1c
 80069ec:	08006959 	.word	0x08006959

080069f0 <__sfp>:
 80069f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f2:	4b1b      	ldr	r3, [pc, #108]	; (8006a60 <__sfp+0x70>)
 80069f4:	4607      	mov	r7, r0
 80069f6:	681e      	ldr	r6, [r3, #0]
 80069f8:	69b3      	ldr	r3, [r6, #24]
 80069fa:	b913      	cbnz	r3, 8006a02 <__sfp+0x12>
 80069fc:	4630      	mov	r0, r6
 80069fe:	f7ff ffc7 	bl	8006990 <__sinit>
 8006a02:	3648      	adds	r6, #72	; 0x48
 8006a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	d503      	bpl.n	8006a14 <__sfp+0x24>
 8006a0c:	6833      	ldr	r3, [r6, #0]
 8006a0e:	b133      	cbz	r3, 8006a1e <__sfp+0x2e>
 8006a10:	6836      	ldr	r6, [r6, #0]
 8006a12:	e7f7      	b.n	8006a04 <__sfp+0x14>
 8006a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a18:	b16d      	cbz	r5, 8006a36 <__sfp+0x46>
 8006a1a:	3468      	adds	r4, #104	; 0x68
 8006a1c:	e7f4      	b.n	8006a08 <__sfp+0x18>
 8006a1e:	2104      	movs	r1, #4
 8006a20:	4638      	mov	r0, r7
 8006a22:	f7ff ff9f 	bl	8006964 <__sfmoreglue>
 8006a26:	6030      	str	r0, [r6, #0]
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d1f1      	bne.n	8006a10 <__sfp+0x20>
 8006a2c:	230c      	movs	r3, #12
 8006a2e:	4604      	mov	r4, r0
 8006a30:	603b      	str	r3, [r7, #0]
 8006a32:	4620      	mov	r0, r4
 8006a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a36:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <__sfp+0x74>)
 8006a38:	6665      	str	r5, [r4, #100]	; 0x64
 8006a3a:	e9c4 5500 	strd	r5, r5, [r4]
 8006a3e:	60a5      	str	r5, [r4, #8]
 8006a40:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006a44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006a48:	2208      	movs	r2, #8
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a50:	f7fe f9d7 	bl	8004e02 <memset>
 8006a54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a5c:	e7e9      	b.n	8006a32 <__sfp+0x42>
 8006a5e:	bf00      	nop
 8006a60:	08007b1c 	.word	0x08007b1c
 8006a64:	ffff0001 	.word	0xffff0001

08006a68 <_fwalk_reent>:
 8006a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a6c:	4680      	mov	r8, r0
 8006a6e:	4689      	mov	r9, r1
 8006a70:	2600      	movs	r6, #0
 8006a72:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a76:	b914      	cbnz	r4, 8006a7e <_fwalk_reent+0x16>
 8006a78:	4630      	mov	r0, r6
 8006a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a7e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006a82:	3f01      	subs	r7, #1
 8006a84:	d501      	bpl.n	8006a8a <_fwalk_reent+0x22>
 8006a86:	6824      	ldr	r4, [r4, #0]
 8006a88:	e7f5      	b.n	8006a76 <_fwalk_reent+0xe>
 8006a8a:	89ab      	ldrh	r3, [r5, #12]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d907      	bls.n	8006aa0 <_fwalk_reent+0x38>
 8006a90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a94:	3301      	adds	r3, #1
 8006a96:	d003      	beq.n	8006aa0 <_fwalk_reent+0x38>
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	47c8      	blx	r9
 8006a9e:	4306      	orrs	r6, r0
 8006aa0:	3568      	adds	r5, #104	; 0x68
 8006aa2:	e7ee      	b.n	8006a82 <_fwalk_reent+0x1a>

08006aa4 <__locale_ctype_ptr_l>:
 8006aa4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006aa8:	4770      	bx	lr
	...

08006aac <_localeconv_r>:
 8006aac:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <_localeconv_r+0x14>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6a18      	ldr	r0, [r3, #32]
 8006ab2:	4b04      	ldr	r3, [pc, #16]	; (8006ac4 <_localeconv_r+0x18>)
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	bf08      	it	eq
 8006ab8:	4618      	moveq	r0, r3
 8006aba:	30f0      	adds	r0, #240	; 0xf0
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	2000000c 	.word	0x2000000c
 8006ac4:	20000070 	.word	0x20000070

08006ac8 <__swhatbuf_r>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	460e      	mov	r6, r1
 8006acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad0:	b096      	sub	sp, #88	; 0x58
 8006ad2:	2900      	cmp	r1, #0
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	461d      	mov	r5, r3
 8006ad8:	da07      	bge.n	8006aea <__swhatbuf_r+0x22>
 8006ada:	2300      	movs	r3, #0
 8006adc:	602b      	str	r3, [r5, #0]
 8006ade:	89b3      	ldrh	r3, [r6, #12]
 8006ae0:	061a      	lsls	r2, r3, #24
 8006ae2:	d410      	bmi.n	8006b06 <__swhatbuf_r+0x3e>
 8006ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ae8:	e00e      	b.n	8006b08 <__swhatbuf_r+0x40>
 8006aea:	466a      	mov	r2, sp
 8006aec:	f000 fdfe 	bl	80076ec <_fstat_r>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	dbf2      	blt.n	8006ada <__swhatbuf_r+0x12>
 8006af4:	9a01      	ldr	r2, [sp, #4]
 8006af6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006afa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006afe:	425a      	negs	r2, r3
 8006b00:	415a      	adcs	r2, r3
 8006b02:	602a      	str	r2, [r5, #0]
 8006b04:	e7ee      	b.n	8006ae4 <__swhatbuf_r+0x1c>
 8006b06:	2340      	movs	r3, #64	; 0x40
 8006b08:	2000      	movs	r0, #0
 8006b0a:	6023      	str	r3, [r4, #0]
 8006b0c:	b016      	add	sp, #88	; 0x58
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}

08006b10 <__smakebuf_r>:
 8006b10:	898b      	ldrh	r3, [r1, #12]
 8006b12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b14:	079d      	lsls	r5, r3, #30
 8006b16:	4606      	mov	r6, r0
 8006b18:	460c      	mov	r4, r1
 8006b1a:	d507      	bpl.n	8006b2c <__smakebuf_r+0x1c>
 8006b1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b20:	6023      	str	r3, [r4, #0]
 8006b22:	6123      	str	r3, [r4, #16]
 8006b24:	2301      	movs	r3, #1
 8006b26:	6163      	str	r3, [r4, #20]
 8006b28:	b002      	add	sp, #8
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	ab01      	add	r3, sp, #4
 8006b2e:	466a      	mov	r2, sp
 8006b30:	f7ff ffca 	bl	8006ac8 <__swhatbuf_r>
 8006b34:	9900      	ldr	r1, [sp, #0]
 8006b36:	4605      	mov	r5, r0
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f000 fb87 	bl	800724c <_malloc_r>
 8006b3e:	b948      	cbnz	r0, 8006b54 <__smakebuf_r+0x44>
 8006b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b44:	059a      	lsls	r2, r3, #22
 8006b46:	d4ef      	bmi.n	8006b28 <__smakebuf_r+0x18>
 8006b48:	f023 0303 	bic.w	r3, r3, #3
 8006b4c:	f043 0302 	orr.w	r3, r3, #2
 8006b50:	81a3      	strh	r3, [r4, #12]
 8006b52:	e7e3      	b.n	8006b1c <__smakebuf_r+0xc>
 8006b54:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <__smakebuf_r+0x7c>)
 8006b56:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	6020      	str	r0, [r4, #0]
 8006b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b60:	81a3      	strh	r3, [r4, #12]
 8006b62:	9b00      	ldr	r3, [sp, #0]
 8006b64:	6120      	str	r0, [r4, #16]
 8006b66:	6163      	str	r3, [r4, #20]
 8006b68:	9b01      	ldr	r3, [sp, #4]
 8006b6a:	b15b      	cbz	r3, 8006b84 <__smakebuf_r+0x74>
 8006b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b70:	4630      	mov	r0, r6
 8006b72:	f000 fdcd 	bl	8007710 <_isatty_r>
 8006b76:	b128      	cbz	r0, 8006b84 <__smakebuf_r+0x74>
 8006b78:	89a3      	ldrh	r3, [r4, #12]
 8006b7a:	f023 0303 	bic.w	r3, r3, #3
 8006b7e:	f043 0301 	orr.w	r3, r3, #1
 8006b82:	81a3      	strh	r3, [r4, #12]
 8006b84:	89a3      	ldrh	r3, [r4, #12]
 8006b86:	431d      	orrs	r5, r3
 8006b88:	81a5      	strh	r5, [r4, #12]
 8006b8a:	e7cd      	b.n	8006b28 <__smakebuf_r+0x18>
 8006b8c:	08006959 	.word	0x08006959

08006b90 <malloc>:
 8006b90:	4b02      	ldr	r3, [pc, #8]	; (8006b9c <malloc+0xc>)
 8006b92:	4601      	mov	r1, r0
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	f000 bb59 	b.w	800724c <_malloc_r>
 8006b9a:	bf00      	nop
 8006b9c:	2000000c 	.word	0x2000000c

08006ba0 <__ascii_mbtowc>:
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	b901      	cbnz	r1, 8006ba6 <__ascii_mbtowc+0x6>
 8006ba4:	a901      	add	r1, sp, #4
 8006ba6:	b142      	cbz	r2, 8006bba <__ascii_mbtowc+0x1a>
 8006ba8:	b14b      	cbz	r3, 8006bbe <__ascii_mbtowc+0x1e>
 8006baa:	7813      	ldrb	r3, [r2, #0]
 8006bac:	600b      	str	r3, [r1, #0]
 8006bae:	7812      	ldrb	r2, [r2, #0]
 8006bb0:	1c10      	adds	r0, r2, #0
 8006bb2:	bf18      	it	ne
 8006bb4:	2001      	movne	r0, #1
 8006bb6:	b002      	add	sp, #8
 8006bb8:	4770      	bx	lr
 8006bba:	4610      	mov	r0, r2
 8006bbc:	e7fb      	b.n	8006bb6 <__ascii_mbtowc+0x16>
 8006bbe:	f06f 0001 	mvn.w	r0, #1
 8006bc2:	e7f8      	b.n	8006bb6 <__ascii_mbtowc+0x16>

08006bc4 <memchr>:
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	b2c9      	uxtb	r1, r1
 8006bc8:	4402      	add	r2, r0
 8006bca:	4290      	cmp	r0, r2
 8006bcc:	4603      	mov	r3, r0
 8006bce:	d101      	bne.n	8006bd4 <memchr+0x10>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e003      	b.n	8006bdc <memchr+0x18>
 8006bd4:	781c      	ldrb	r4, [r3, #0]
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	428c      	cmp	r4, r1
 8006bda:	d1f6      	bne.n	8006bca <memchr+0x6>
 8006bdc:	4618      	mov	r0, r3
 8006bde:	bd10      	pop	{r4, pc}

08006be0 <_Balloc>:
 8006be0:	b570      	push	{r4, r5, r6, lr}
 8006be2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006be4:	4604      	mov	r4, r0
 8006be6:	460e      	mov	r6, r1
 8006be8:	b93d      	cbnz	r5, 8006bfa <_Balloc+0x1a>
 8006bea:	2010      	movs	r0, #16
 8006bec:	f7ff ffd0 	bl	8006b90 <malloc>
 8006bf0:	6260      	str	r0, [r4, #36]	; 0x24
 8006bf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bf6:	6005      	str	r5, [r0, #0]
 8006bf8:	60c5      	str	r5, [r0, #12]
 8006bfa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006bfc:	68eb      	ldr	r3, [r5, #12]
 8006bfe:	b183      	cbz	r3, 8006c22 <_Balloc+0x42>
 8006c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006c08:	b9b8      	cbnz	r0, 8006c3a <_Balloc+0x5a>
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	fa01 f506 	lsl.w	r5, r1, r6
 8006c10:	1d6a      	adds	r2, r5, #5
 8006c12:	0092      	lsls	r2, r2, #2
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 fabe 	bl	8007196 <_calloc_r>
 8006c1a:	b160      	cbz	r0, 8006c36 <_Balloc+0x56>
 8006c1c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006c20:	e00e      	b.n	8006c40 <_Balloc+0x60>
 8006c22:	2221      	movs	r2, #33	; 0x21
 8006c24:	2104      	movs	r1, #4
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 fab5 	bl	8007196 <_calloc_r>
 8006c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c2e:	60e8      	str	r0, [r5, #12]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e4      	bne.n	8006c00 <_Balloc+0x20>
 8006c36:	2000      	movs	r0, #0
 8006c38:	bd70      	pop	{r4, r5, r6, pc}
 8006c3a:	6802      	ldr	r2, [r0, #0]
 8006c3c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006c40:	2300      	movs	r3, #0
 8006c42:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c46:	e7f7      	b.n	8006c38 <_Balloc+0x58>

08006c48 <_Bfree>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006c4c:	4606      	mov	r6, r0
 8006c4e:	460d      	mov	r5, r1
 8006c50:	b93c      	cbnz	r4, 8006c62 <_Bfree+0x1a>
 8006c52:	2010      	movs	r0, #16
 8006c54:	f7ff ff9c 	bl	8006b90 <malloc>
 8006c58:	6270      	str	r0, [r6, #36]	; 0x24
 8006c5a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c5e:	6004      	str	r4, [r0, #0]
 8006c60:	60c4      	str	r4, [r0, #12]
 8006c62:	b13d      	cbz	r5, 8006c74 <_Bfree+0x2c>
 8006c64:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006c66:	686a      	ldr	r2, [r5, #4]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c6e:	6029      	str	r1, [r5, #0]
 8006c70:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006c74:	bd70      	pop	{r4, r5, r6, pc}

08006c76 <__multadd>:
 8006c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7a:	461f      	mov	r7, r3
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	2300      	movs	r3, #0
 8006c82:	690d      	ldr	r5, [r1, #16]
 8006c84:	f101 0c14 	add.w	ip, r1, #20
 8006c88:	f8dc 0000 	ldr.w	r0, [ip]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	b281      	uxth	r1, r0
 8006c90:	fb02 7101 	mla	r1, r2, r1, r7
 8006c94:	0c00      	lsrs	r0, r0, #16
 8006c96:	0c0f      	lsrs	r7, r1, #16
 8006c98:	fb02 7000 	mla	r0, r2, r0, r7
 8006c9c:	b289      	uxth	r1, r1
 8006c9e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006ca2:	429d      	cmp	r5, r3
 8006ca4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006ca8:	f84c 1b04 	str.w	r1, [ip], #4
 8006cac:	dcec      	bgt.n	8006c88 <__multadd+0x12>
 8006cae:	b1d7      	cbz	r7, 8006ce6 <__multadd+0x70>
 8006cb0:	68a3      	ldr	r3, [r4, #8]
 8006cb2:	42ab      	cmp	r3, r5
 8006cb4:	dc12      	bgt.n	8006cdc <__multadd+0x66>
 8006cb6:	6861      	ldr	r1, [r4, #4]
 8006cb8:	4630      	mov	r0, r6
 8006cba:	3101      	adds	r1, #1
 8006cbc:	f7ff ff90 	bl	8006be0 <_Balloc>
 8006cc0:	4680      	mov	r8, r0
 8006cc2:	6922      	ldr	r2, [r4, #16]
 8006cc4:	f104 010c 	add.w	r1, r4, #12
 8006cc8:	3202      	adds	r2, #2
 8006cca:	0092      	lsls	r2, r2, #2
 8006ccc:	300c      	adds	r0, #12
 8006cce:	f7fe f88d 	bl	8004dec <memcpy>
 8006cd2:	4621      	mov	r1, r4
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f7ff ffb7 	bl	8006c48 <_Bfree>
 8006cda:	4644      	mov	r4, r8
 8006cdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ce0:	3501      	adds	r5, #1
 8006ce2:	615f      	str	r7, [r3, #20]
 8006ce4:	6125      	str	r5, [r4, #16]
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006cec <__hi0bits>:
 8006cec:	0c02      	lsrs	r2, r0, #16
 8006cee:	0412      	lsls	r2, r2, #16
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	b9b2      	cbnz	r2, 8006d22 <__hi0bits+0x36>
 8006cf4:	0403      	lsls	r3, r0, #16
 8006cf6:	2010      	movs	r0, #16
 8006cf8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006cfc:	bf04      	itt	eq
 8006cfe:	021b      	lsleq	r3, r3, #8
 8006d00:	3008      	addeq	r0, #8
 8006d02:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006d06:	bf04      	itt	eq
 8006d08:	011b      	lsleq	r3, r3, #4
 8006d0a:	3004      	addeq	r0, #4
 8006d0c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006d10:	bf04      	itt	eq
 8006d12:	009b      	lsleq	r3, r3, #2
 8006d14:	3002      	addeq	r0, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	db06      	blt.n	8006d28 <__hi0bits+0x3c>
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	d503      	bpl.n	8006d26 <__hi0bits+0x3a>
 8006d1e:	3001      	adds	r0, #1
 8006d20:	4770      	bx	lr
 8006d22:	2000      	movs	r0, #0
 8006d24:	e7e8      	b.n	8006cf8 <__hi0bits+0xc>
 8006d26:	2020      	movs	r0, #32
 8006d28:	4770      	bx	lr

08006d2a <__lo0bits>:
 8006d2a:	6803      	ldr	r3, [r0, #0]
 8006d2c:	4601      	mov	r1, r0
 8006d2e:	f013 0207 	ands.w	r2, r3, #7
 8006d32:	d00b      	beq.n	8006d4c <__lo0bits+0x22>
 8006d34:	07da      	lsls	r2, r3, #31
 8006d36:	d423      	bmi.n	8006d80 <__lo0bits+0x56>
 8006d38:	0798      	lsls	r0, r3, #30
 8006d3a:	bf49      	itett	mi
 8006d3c:	085b      	lsrmi	r3, r3, #1
 8006d3e:	089b      	lsrpl	r3, r3, #2
 8006d40:	2001      	movmi	r0, #1
 8006d42:	600b      	strmi	r3, [r1, #0]
 8006d44:	bf5c      	itt	pl
 8006d46:	600b      	strpl	r3, [r1, #0]
 8006d48:	2002      	movpl	r0, #2
 8006d4a:	4770      	bx	lr
 8006d4c:	b298      	uxth	r0, r3
 8006d4e:	b9a8      	cbnz	r0, 8006d7c <__lo0bits+0x52>
 8006d50:	2010      	movs	r0, #16
 8006d52:	0c1b      	lsrs	r3, r3, #16
 8006d54:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006d58:	bf04      	itt	eq
 8006d5a:	0a1b      	lsreq	r3, r3, #8
 8006d5c:	3008      	addeq	r0, #8
 8006d5e:	071a      	lsls	r2, r3, #28
 8006d60:	bf04      	itt	eq
 8006d62:	091b      	lsreq	r3, r3, #4
 8006d64:	3004      	addeq	r0, #4
 8006d66:	079a      	lsls	r2, r3, #30
 8006d68:	bf04      	itt	eq
 8006d6a:	089b      	lsreq	r3, r3, #2
 8006d6c:	3002      	addeq	r0, #2
 8006d6e:	07da      	lsls	r2, r3, #31
 8006d70:	d402      	bmi.n	8006d78 <__lo0bits+0x4e>
 8006d72:	085b      	lsrs	r3, r3, #1
 8006d74:	d006      	beq.n	8006d84 <__lo0bits+0x5a>
 8006d76:	3001      	adds	r0, #1
 8006d78:	600b      	str	r3, [r1, #0]
 8006d7a:	4770      	bx	lr
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	e7e9      	b.n	8006d54 <__lo0bits+0x2a>
 8006d80:	2000      	movs	r0, #0
 8006d82:	4770      	bx	lr
 8006d84:	2020      	movs	r0, #32
 8006d86:	4770      	bx	lr

08006d88 <__i2b>:
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	f7ff ff27 	bl	8006be0 <_Balloc>
 8006d92:	2201      	movs	r2, #1
 8006d94:	6144      	str	r4, [r0, #20]
 8006d96:	6102      	str	r2, [r0, #16]
 8006d98:	bd10      	pop	{r4, pc}

08006d9a <__multiply>:
 8006d9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9e:	4614      	mov	r4, r2
 8006da0:	690a      	ldr	r2, [r1, #16]
 8006da2:	6923      	ldr	r3, [r4, #16]
 8006da4:	4688      	mov	r8, r1
 8006da6:	429a      	cmp	r2, r3
 8006da8:	bfbe      	ittt	lt
 8006daa:	460b      	movlt	r3, r1
 8006dac:	46a0      	movlt	r8, r4
 8006dae:	461c      	movlt	r4, r3
 8006db0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006db4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006db8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006dc0:	eb07 0609 	add.w	r6, r7, r9
 8006dc4:	42b3      	cmp	r3, r6
 8006dc6:	bfb8      	it	lt
 8006dc8:	3101      	addlt	r1, #1
 8006dca:	f7ff ff09 	bl	8006be0 <_Balloc>
 8006dce:	f100 0514 	add.w	r5, r0, #20
 8006dd2:	462b      	mov	r3, r5
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006dda:	4573      	cmp	r3, lr
 8006ddc:	d316      	bcc.n	8006e0c <__multiply+0x72>
 8006dde:	f104 0214 	add.w	r2, r4, #20
 8006de2:	f108 0114 	add.w	r1, r8, #20
 8006de6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006dea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	9b00      	ldr	r3, [sp, #0]
 8006df2:	9201      	str	r2, [sp, #4]
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d80c      	bhi.n	8006e12 <__multiply+0x78>
 8006df8:	2e00      	cmp	r6, #0
 8006dfa:	dd03      	ble.n	8006e04 <__multiply+0x6a>
 8006dfc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d05d      	beq.n	8006ec0 <__multiply+0x126>
 8006e04:	6106      	str	r6, [r0, #16]
 8006e06:	b003      	add	sp, #12
 8006e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0c:	f843 2b04 	str.w	r2, [r3], #4
 8006e10:	e7e3      	b.n	8006dda <__multiply+0x40>
 8006e12:	f8b2 b000 	ldrh.w	fp, [r2]
 8006e16:	f1bb 0f00 	cmp.w	fp, #0
 8006e1a:	d023      	beq.n	8006e64 <__multiply+0xca>
 8006e1c:	4689      	mov	r9, r1
 8006e1e:	46ac      	mov	ip, r5
 8006e20:	f04f 0800 	mov.w	r8, #0
 8006e24:	f859 4b04 	ldr.w	r4, [r9], #4
 8006e28:	f8dc a000 	ldr.w	sl, [ip]
 8006e2c:	b2a3      	uxth	r3, r4
 8006e2e:	fa1f fa8a 	uxth.w	sl, sl
 8006e32:	fb0b a303 	mla	r3, fp, r3, sl
 8006e36:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006e3a:	f8dc 4000 	ldr.w	r4, [ip]
 8006e3e:	4443      	add	r3, r8
 8006e40:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006e44:	fb0b 840a 	mla	r4, fp, sl, r8
 8006e48:	46e2      	mov	sl, ip
 8006e4a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006e54:	454f      	cmp	r7, r9
 8006e56:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006e5a:	f84a 3b04 	str.w	r3, [sl], #4
 8006e5e:	d82b      	bhi.n	8006eb8 <__multiply+0x11e>
 8006e60:	f8cc 8004 	str.w	r8, [ip, #4]
 8006e64:	9b01      	ldr	r3, [sp, #4]
 8006e66:	3204      	adds	r2, #4
 8006e68:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006e6c:	f1ba 0f00 	cmp.w	sl, #0
 8006e70:	d020      	beq.n	8006eb4 <__multiply+0x11a>
 8006e72:	4689      	mov	r9, r1
 8006e74:	46a8      	mov	r8, r5
 8006e76:	f04f 0b00 	mov.w	fp, #0
 8006e7a:	682b      	ldr	r3, [r5, #0]
 8006e7c:	f8b9 c000 	ldrh.w	ip, [r9]
 8006e80:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	fb0a 440c 	mla	r4, sl, ip, r4
 8006e8a:	46c4      	mov	ip, r8
 8006e8c:	445c      	add	r4, fp
 8006e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006e92:	f84c 3b04 	str.w	r3, [ip], #4
 8006e96:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e9a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006e9e:	0c1b      	lsrs	r3, r3, #16
 8006ea0:	fb0a b303 	mla	r3, sl, r3, fp
 8006ea4:	454f      	cmp	r7, r9
 8006ea6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006eaa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006eae:	d805      	bhi.n	8006ebc <__multiply+0x122>
 8006eb0:	f8c8 3004 	str.w	r3, [r8, #4]
 8006eb4:	3504      	adds	r5, #4
 8006eb6:	e79b      	b.n	8006df0 <__multiply+0x56>
 8006eb8:	46d4      	mov	ip, sl
 8006eba:	e7b3      	b.n	8006e24 <__multiply+0x8a>
 8006ebc:	46e0      	mov	r8, ip
 8006ebe:	e7dd      	b.n	8006e7c <__multiply+0xe2>
 8006ec0:	3e01      	subs	r6, #1
 8006ec2:	e799      	b.n	8006df8 <__multiply+0x5e>

08006ec4 <__pow5mult>:
 8006ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec8:	4615      	mov	r5, r2
 8006eca:	f012 0203 	ands.w	r2, r2, #3
 8006ece:	4606      	mov	r6, r0
 8006ed0:	460f      	mov	r7, r1
 8006ed2:	d007      	beq.n	8006ee4 <__pow5mult+0x20>
 8006ed4:	4c21      	ldr	r4, [pc, #132]	; (8006f5c <__pow5mult+0x98>)
 8006ed6:	3a01      	subs	r2, #1
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ede:	f7ff feca 	bl	8006c76 <__multadd>
 8006ee2:	4607      	mov	r7, r0
 8006ee4:	10ad      	asrs	r5, r5, #2
 8006ee6:	d035      	beq.n	8006f54 <__pow5mult+0x90>
 8006ee8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006eea:	b93c      	cbnz	r4, 8006efc <__pow5mult+0x38>
 8006eec:	2010      	movs	r0, #16
 8006eee:	f7ff fe4f 	bl	8006b90 <malloc>
 8006ef2:	6270      	str	r0, [r6, #36]	; 0x24
 8006ef4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ef8:	6004      	str	r4, [r0, #0]
 8006efa:	60c4      	str	r4, [r0, #12]
 8006efc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f04:	b94c      	cbnz	r4, 8006f1a <__pow5mult+0x56>
 8006f06:	f240 2171 	movw	r1, #625	; 0x271
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f7ff ff3c 	bl	8006d88 <__i2b>
 8006f10:	2300      	movs	r3, #0
 8006f12:	4604      	mov	r4, r0
 8006f14:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f18:	6003      	str	r3, [r0, #0]
 8006f1a:	f04f 0800 	mov.w	r8, #0
 8006f1e:	07eb      	lsls	r3, r5, #31
 8006f20:	d50a      	bpl.n	8006f38 <__pow5mult+0x74>
 8006f22:	4639      	mov	r1, r7
 8006f24:	4622      	mov	r2, r4
 8006f26:	4630      	mov	r0, r6
 8006f28:	f7ff ff37 	bl	8006d9a <__multiply>
 8006f2c:	4681      	mov	r9, r0
 8006f2e:	4639      	mov	r1, r7
 8006f30:	4630      	mov	r0, r6
 8006f32:	f7ff fe89 	bl	8006c48 <_Bfree>
 8006f36:	464f      	mov	r7, r9
 8006f38:	106d      	asrs	r5, r5, #1
 8006f3a:	d00b      	beq.n	8006f54 <__pow5mult+0x90>
 8006f3c:	6820      	ldr	r0, [r4, #0]
 8006f3e:	b938      	cbnz	r0, 8006f50 <__pow5mult+0x8c>
 8006f40:	4622      	mov	r2, r4
 8006f42:	4621      	mov	r1, r4
 8006f44:	4630      	mov	r0, r6
 8006f46:	f7ff ff28 	bl	8006d9a <__multiply>
 8006f4a:	6020      	str	r0, [r4, #0]
 8006f4c:	f8c0 8000 	str.w	r8, [r0]
 8006f50:	4604      	mov	r4, r0
 8006f52:	e7e4      	b.n	8006f1e <__pow5mult+0x5a>
 8006f54:	4638      	mov	r0, r7
 8006f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f5a:	bf00      	nop
 8006f5c:	08007cc0 	.word	0x08007cc0

08006f60 <__lshift>:
 8006f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f64:	460c      	mov	r4, r1
 8006f66:	4607      	mov	r7, r0
 8006f68:	4616      	mov	r6, r2
 8006f6a:	6923      	ldr	r3, [r4, #16]
 8006f6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f70:	eb0a 0903 	add.w	r9, sl, r3
 8006f74:	6849      	ldr	r1, [r1, #4]
 8006f76:	68a3      	ldr	r3, [r4, #8]
 8006f78:	f109 0501 	add.w	r5, r9, #1
 8006f7c:	42ab      	cmp	r3, r5
 8006f7e:	db32      	blt.n	8006fe6 <__lshift+0x86>
 8006f80:	4638      	mov	r0, r7
 8006f82:	f7ff fe2d 	bl	8006be0 <_Balloc>
 8006f86:	2300      	movs	r3, #0
 8006f88:	4680      	mov	r8, r0
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f100 0114 	add.w	r1, r0, #20
 8006f90:	4553      	cmp	r3, sl
 8006f92:	db2b      	blt.n	8006fec <__lshift+0x8c>
 8006f94:	6920      	ldr	r0, [r4, #16]
 8006f96:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f9a:	f104 0314 	add.w	r3, r4, #20
 8006f9e:	f016 021f 	ands.w	r2, r6, #31
 8006fa2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fa6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006faa:	d025      	beq.n	8006ff8 <__lshift+0x98>
 8006fac:	2000      	movs	r0, #0
 8006fae:	f1c2 0e20 	rsb	lr, r2, #32
 8006fb2:	468a      	mov	sl, r1
 8006fb4:	681e      	ldr	r6, [r3, #0]
 8006fb6:	4096      	lsls	r6, r2
 8006fb8:	4330      	orrs	r0, r6
 8006fba:	f84a 0b04 	str.w	r0, [sl], #4
 8006fbe:	f853 0b04 	ldr.w	r0, [r3], #4
 8006fc2:	459c      	cmp	ip, r3
 8006fc4:	fa20 f00e 	lsr.w	r0, r0, lr
 8006fc8:	d814      	bhi.n	8006ff4 <__lshift+0x94>
 8006fca:	6048      	str	r0, [r1, #4]
 8006fcc:	b108      	cbz	r0, 8006fd2 <__lshift+0x72>
 8006fce:	f109 0502 	add.w	r5, r9, #2
 8006fd2:	3d01      	subs	r5, #1
 8006fd4:	4638      	mov	r0, r7
 8006fd6:	f8c8 5010 	str.w	r5, [r8, #16]
 8006fda:	4621      	mov	r1, r4
 8006fdc:	f7ff fe34 	bl	8006c48 <_Bfree>
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe6:	3101      	adds	r1, #1
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	e7c7      	b.n	8006f7c <__lshift+0x1c>
 8006fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	e7cd      	b.n	8006f90 <__lshift+0x30>
 8006ff4:	4651      	mov	r1, sl
 8006ff6:	e7dc      	b.n	8006fb2 <__lshift+0x52>
 8006ff8:	3904      	subs	r1, #4
 8006ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ffe:	459c      	cmp	ip, r3
 8007000:	f841 2f04 	str.w	r2, [r1, #4]!
 8007004:	d8f9      	bhi.n	8006ffa <__lshift+0x9a>
 8007006:	e7e4      	b.n	8006fd2 <__lshift+0x72>

08007008 <__mcmp>:
 8007008:	6903      	ldr	r3, [r0, #16]
 800700a:	690a      	ldr	r2, [r1, #16]
 800700c:	b530      	push	{r4, r5, lr}
 800700e:	1a9b      	subs	r3, r3, r2
 8007010:	d10c      	bne.n	800702c <__mcmp+0x24>
 8007012:	0092      	lsls	r2, r2, #2
 8007014:	3014      	adds	r0, #20
 8007016:	3114      	adds	r1, #20
 8007018:	1884      	adds	r4, r0, r2
 800701a:	4411      	add	r1, r2
 800701c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007020:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007024:	4295      	cmp	r5, r2
 8007026:	d003      	beq.n	8007030 <__mcmp+0x28>
 8007028:	d305      	bcc.n	8007036 <__mcmp+0x2e>
 800702a:	2301      	movs	r3, #1
 800702c:	4618      	mov	r0, r3
 800702e:	bd30      	pop	{r4, r5, pc}
 8007030:	42a0      	cmp	r0, r4
 8007032:	d3f3      	bcc.n	800701c <__mcmp+0x14>
 8007034:	e7fa      	b.n	800702c <__mcmp+0x24>
 8007036:	f04f 33ff 	mov.w	r3, #4294967295
 800703a:	e7f7      	b.n	800702c <__mcmp+0x24>

0800703c <__mdiff>:
 800703c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007040:	460d      	mov	r5, r1
 8007042:	4607      	mov	r7, r0
 8007044:	4611      	mov	r1, r2
 8007046:	4628      	mov	r0, r5
 8007048:	4614      	mov	r4, r2
 800704a:	f7ff ffdd 	bl	8007008 <__mcmp>
 800704e:	1e06      	subs	r6, r0, #0
 8007050:	d108      	bne.n	8007064 <__mdiff+0x28>
 8007052:	4631      	mov	r1, r6
 8007054:	4638      	mov	r0, r7
 8007056:	f7ff fdc3 	bl	8006be0 <_Balloc>
 800705a:	2301      	movs	r3, #1
 800705c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007064:	bfa4      	itt	ge
 8007066:	4623      	movge	r3, r4
 8007068:	462c      	movge	r4, r5
 800706a:	4638      	mov	r0, r7
 800706c:	6861      	ldr	r1, [r4, #4]
 800706e:	bfa6      	itte	ge
 8007070:	461d      	movge	r5, r3
 8007072:	2600      	movge	r6, #0
 8007074:	2601      	movlt	r6, #1
 8007076:	f7ff fdb3 	bl	8006be0 <_Balloc>
 800707a:	f04f 0e00 	mov.w	lr, #0
 800707e:	60c6      	str	r6, [r0, #12]
 8007080:	692b      	ldr	r3, [r5, #16]
 8007082:	6926      	ldr	r6, [r4, #16]
 8007084:	f104 0214 	add.w	r2, r4, #20
 8007088:	f105 0914 	add.w	r9, r5, #20
 800708c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007090:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007094:	f100 0114 	add.w	r1, r0, #20
 8007098:	f852 ab04 	ldr.w	sl, [r2], #4
 800709c:	f859 5b04 	ldr.w	r5, [r9], #4
 80070a0:	fa1f f38a 	uxth.w	r3, sl
 80070a4:	4473      	add	r3, lr
 80070a6:	b2ac      	uxth	r4, r5
 80070a8:	1b1b      	subs	r3, r3, r4
 80070aa:	0c2c      	lsrs	r4, r5, #16
 80070ac:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80070b0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80070ba:	45c8      	cmp	r8, r9
 80070bc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80070c0:	4694      	mov	ip, r2
 80070c2:	f841 4b04 	str.w	r4, [r1], #4
 80070c6:	d8e7      	bhi.n	8007098 <__mdiff+0x5c>
 80070c8:	45bc      	cmp	ip, r7
 80070ca:	d304      	bcc.n	80070d6 <__mdiff+0x9a>
 80070cc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80070d0:	b183      	cbz	r3, 80070f4 <__mdiff+0xb8>
 80070d2:	6106      	str	r6, [r0, #16]
 80070d4:	e7c4      	b.n	8007060 <__mdiff+0x24>
 80070d6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80070da:	b2a2      	uxth	r2, r4
 80070dc:	4472      	add	r2, lr
 80070de:	1413      	asrs	r3, r2, #16
 80070e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80070e4:	b292      	uxth	r2, r2
 80070e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80070ea:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80070ee:	f841 2b04 	str.w	r2, [r1], #4
 80070f2:	e7e9      	b.n	80070c8 <__mdiff+0x8c>
 80070f4:	3e01      	subs	r6, #1
 80070f6:	e7e9      	b.n	80070cc <__mdiff+0x90>

080070f8 <__d2b>:
 80070f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80070fc:	461c      	mov	r4, r3
 80070fe:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007102:	2101      	movs	r1, #1
 8007104:	4690      	mov	r8, r2
 8007106:	f7ff fd6b 	bl	8006be0 <_Balloc>
 800710a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800710e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007112:	4607      	mov	r7, r0
 8007114:	bb34      	cbnz	r4, 8007164 <__d2b+0x6c>
 8007116:	9201      	str	r2, [sp, #4]
 8007118:	f1b8 0200 	subs.w	r2, r8, #0
 800711c:	d027      	beq.n	800716e <__d2b+0x76>
 800711e:	a802      	add	r0, sp, #8
 8007120:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007124:	f7ff fe01 	bl	8006d2a <__lo0bits>
 8007128:	9900      	ldr	r1, [sp, #0]
 800712a:	b1f0      	cbz	r0, 800716a <__d2b+0x72>
 800712c:	9a01      	ldr	r2, [sp, #4]
 800712e:	f1c0 0320 	rsb	r3, r0, #32
 8007132:	fa02 f303 	lsl.w	r3, r2, r3
 8007136:	430b      	orrs	r3, r1
 8007138:	40c2      	lsrs	r2, r0
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	9201      	str	r2, [sp, #4]
 800713e:	9b01      	ldr	r3, [sp, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	bf14      	ite	ne
 8007144:	2102      	movne	r1, #2
 8007146:	2101      	moveq	r1, #1
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	6139      	str	r1, [r7, #16]
 800714c:	b1c4      	cbz	r4, 8007180 <__d2b+0x88>
 800714e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007152:	4404      	add	r4, r0
 8007154:	6034      	str	r4, [r6, #0]
 8007156:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800715a:	6028      	str	r0, [r5, #0]
 800715c:	4638      	mov	r0, r7
 800715e:	b002      	add	sp, #8
 8007160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007164:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007168:	e7d5      	b.n	8007116 <__d2b+0x1e>
 800716a:	6179      	str	r1, [r7, #20]
 800716c:	e7e7      	b.n	800713e <__d2b+0x46>
 800716e:	a801      	add	r0, sp, #4
 8007170:	f7ff fddb 	bl	8006d2a <__lo0bits>
 8007174:	2101      	movs	r1, #1
 8007176:	9b01      	ldr	r3, [sp, #4]
 8007178:	6139      	str	r1, [r7, #16]
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	3020      	adds	r0, #32
 800717e:	e7e5      	b.n	800714c <__d2b+0x54>
 8007180:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007184:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007188:	6030      	str	r0, [r6, #0]
 800718a:	6918      	ldr	r0, [r3, #16]
 800718c:	f7ff fdae 	bl	8006cec <__hi0bits>
 8007190:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007194:	e7e1      	b.n	800715a <__d2b+0x62>

08007196 <_calloc_r>:
 8007196:	b538      	push	{r3, r4, r5, lr}
 8007198:	fb02 f401 	mul.w	r4, r2, r1
 800719c:	4621      	mov	r1, r4
 800719e:	f000 f855 	bl	800724c <_malloc_r>
 80071a2:	4605      	mov	r5, r0
 80071a4:	b118      	cbz	r0, 80071ae <_calloc_r+0x18>
 80071a6:	4622      	mov	r2, r4
 80071a8:	2100      	movs	r1, #0
 80071aa:	f7fd fe2a 	bl	8004e02 <memset>
 80071ae:	4628      	mov	r0, r5
 80071b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080071b4 <_free_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4605      	mov	r5, r0
 80071b8:	2900      	cmp	r1, #0
 80071ba:	d043      	beq.n	8007244 <_free_r+0x90>
 80071bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071c0:	1f0c      	subs	r4, r1, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	bfb8      	it	lt
 80071c6:	18e4      	addlt	r4, r4, r3
 80071c8:	f000 fac4 	bl	8007754 <__malloc_lock>
 80071cc:	4a1e      	ldr	r2, [pc, #120]	; (8007248 <_free_r+0x94>)
 80071ce:	6813      	ldr	r3, [r2, #0]
 80071d0:	4610      	mov	r0, r2
 80071d2:	b933      	cbnz	r3, 80071e2 <_free_r+0x2e>
 80071d4:	6063      	str	r3, [r4, #4]
 80071d6:	6014      	str	r4, [r2, #0]
 80071d8:	4628      	mov	r0, r5
 80071da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071de:	f000 baba 	b.w	8007756 <__malloc_unlock>
 80071e2:	42a3      	cmp	r3, r4
 80071e4:	d90b      	bls.n	80071fe <_free_r+0x4a>
 80071e6:	6821      	ldr	r1, [r4, #0]
 80071e8:	1862      	adds	r2, r4, r1
 80071ea:	4293      	cmp	r3, r2
 80071ec:	bf01      	itttt	eq
 80071ee:	681a      	ldreq	r2, [r3, #0]
 80071f0:	685b      	ldreq	r3, [r3, #4]
 80071f2:	1852      	addeq	r2, r2, r1
 80071f4:	6022      	streq	r2, [r4, #0]
 80071f6:	6063      	str	r3, [r4, #4]
 80071f8:	6004      	str	r4, [r0, #0]
 80071fa:	e7ed      	b.n	80071d8 <_free_r+0x24>
 80071fc:	4613      	mov	r3, r2
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	b10a      	cbz	r2, 8007206 <_free_r+0x52>
 8007202:	42a2      	cmp	r2, r4
 8007204:	d9fa      	bls.n	80071fc <_free_r+0x48>
 8007206:	6819      	ldr	r1, [r3, #0]
 8007208:	1858      	adds	r0, r3, r1
 800720a:	42a0      	cmp	r0, r4
 800720c:	d10b      	bne.n	8007226 <_free_r+0x72>
 800720e:	6820      	ldr	r0, [r4, #0]
 8007210:	4401      	add	r1, r0
 8007212:	1858      	adds	r0, r3, r1
 8007214:	4282      	cmp	r2, r0
 8007216:	6019      	str	r1, [r3, #0]
 8007218:	d1de      	bne.n	80071d8 <_free_r+0x24>
 800721a:	6810      	ldr	r0, [r2, #0]
 800721c:	6852      	ldr	r2, [r2, #4]
 800721e:	4401      	add	r1, r0
 8007220:	6019      	str	r1, [r3, #0]
 8007222:	605a      	str	r2, [r3, #4]
 8007224:	e7d8      	b.n	80071d8 <_free_r+0x24>
 8007226:	d902      	bls.n	800722e <_free_r+0x7a>
 8007228:	230c      	movs	r3, #12
 800722a:	602b      	str	r3, [r5, #0]
 800722c:	e7d4      	b.n	80071d8 <_free_r+0x24>
 800722e:	6820      	ldr	r0, [r4, #0]
 8007230:	1821      	adds	r1, r4, r0
 8007232:	428a      	cmp	r2, r1
 8007234:	bf01      	itttt	eq
 8007236:	6811      	ldreq	r1, [r2, #0]
 8007238:	6852      	ldreq	r2, [r2, #4]
 800723a:	1809      	addeq	r1, r1, r0
 800723c:	6021      	streq	r1, [r4, #0]
 800723e:	6062      	str	r2, [r4, #4]
 8007240:	605c      	str	r4, [r3, #4]
 8007242:	e7c9      	b.n	80071d8 <_free_r+0x24>
 8007244:	bd38      	pop	{r3, r4, r5, pc}
 8007246:	bf00      	nop
 8007248:	200001fc 	.word	0x200001fc

0800724c <_malloc_r>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	1ccd      	adds	r5, r1, #3
 8007250:	f025 0503 	bic.w	r5, r5, #3
 8007254:	3508      	adds	r5, #8
 8007256:	2d0c      	cmp	r5, #12
 8007258:	bf38      	it	cc
 800725a:	250c      	movcc	r5, #12
 800725c:	2d00      	cmp	r5, #0
 800725e:	4606      	mov	r6, r0
 8007260:	db01      	blt.n	8007266 <_malloc_r+0x1a>
 8007262:	42a9      	cmp	r1, r5
 8007264:	d903      	bls.n	800726e <_malloc_r+0x22>
 8007266:	230c      	movs	r3, #12
 8007268:	6033      	str	r3, [r6, #0]
 800726a:	2000      	movs	r0, #0
 800726c:	bd70      	pop	{r4, r5, r6, pc}
 800726e:	f000 fa71 	bl	8007754 <__malloc_lock>
 8007272:	4a21      	ldr	r2, [pc, #132]	; (80072f8 <_malloc_r+0xac>)
 8007274:	6814      	ldr	r4, [r2, #0]
 8007276:	4621      	mov	r1, r4
 8007278:	b991      	cbnz	r1, 80072a0 <_malloc_r+0x54>
 800727a:	4c20      	ldr	r4, [pc, #128]	; (80072fc <_malloc_r+0xb0>)
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	b91b      	cbnz	r3, 8007288 <_malloc_r+0x3c>
 8007280:	4630      	mov	r0, r6
 8007282:	f000 f9b1 	bl	80075e8 <_sbrk_r>
 8007286:	6020      	str	r0, [r4, #0]
 8007288:	4629      	mov	r1, r5
 800728a:	4630      	mov	r0, r6
 800728c:	f000 f9ac 	bl	80075e8 <_sbrk_r>
 8007290:	1c43      	adds	r3, r0, #1
 8007292:	d124      	bne.n	80072de <_malloc_r+0x92>
 8007294:	230c      	movs	r3, #12
 8007296:	4630      	mov	r0, r6
 8007298:	6033      	str	r3, [r6, #0]
 800729a:	f000 fa5c 	bl	8007756 <__malloc_unlock>
 800729e:	e7e4      	b.n	800726a <_malloc_r+0x1e>
 80072a0:	680b      	ldr	r3, [r1, #0]
 80072a2:	1b5b      	subs	r3, r3, r5
 80072a4:	d418      	bmi.n	80072d8 <_malloc_r+0x8c>
 80072a6:	2b0b      	cmp	r3, #11
 80072a8:	d90f      	bls.n	80072ca <_malloc_r+0x7e>
 80072aa:	600b      	str	r3, [r1, #0]
 80072ac:	18cc      	adds	r4, r1, r3
 80072ae:	50cd      	str	r5, [r1, r3]
 80072b0:	4630      	mov	r0, r6
 80072b2:	f000 fa50 	bl	8007756 <__malloc_unlock>
 80072b6:	f104 000b 	add.w	r0, r4, #11
 80072ba:	1d23      	adds	r3, r4, #4
 80072bc:	f020 0007 	bic.w	r0, r0, #7
 80072c0:	1ac3      	subs	r3, r0, r3
 80072c2:	d0d3      	beq.n	800726c <_malloc_r+0x20>
 80072c4:	425a      	negs	r2, r3
 80072c6:	50e2      	str	r2, [r4, r3]
 80072c8:	e7d0      	b.n	800726c <_malloc_r+0x20>
 80072ca:	684b      	ldr	r3, [r1, #4]
 80072cc:	428c      	cmp	r4, r1
 80072ce:	bf16      	itet	ne
 80072d0:	6063      	strne	r3, [r4, #4]
 80072d2:	6013      	streq	r3, [r2, #0]
 80072d4:	460c      	movne	r4, r1
 80072d6:	e7eb      	b.n	80072b0 <_malloc_r+0x64>
 80072d8:	460c      	mov	r4, r1
 80072da:	6849      	ldr	r1, [r1, #4]
 80072dc:	e7cc      	b.n	8007278 <_malloc_r+0x2c>
 80072de:	1cc4      	adds	r4, r0, #3
 80072e0:	f024 0403 	bic.w	r4, r4, #3
 80072e4:	42a0      	cmp	r0, r4
 80072e6:	d005      	beq.n	80072f4 <_malloc_r+0xa8>
 80072e8:	1a21      	subs	r1, r4, r0
 80072ea:	4630      	mov	r0, r6
 80072ec:	f000 f97c 	bl	80075e8 <_sbrk_r>
 80072f0:	3001      	adds	r0, #1
 80072f2:	d0cf      	beq.n	8007294 <_malloc_r+0x48>
 80072f4:	6025      	str	r5, [r4, #0]
 80072f6:	e7db      	b.n	80072b0 <_malloc_r+0x64>
 80072f8:	200001fc 	.word	0x200001fc
 80072fc:	20000200 	.word	0x20000200

08007300 <__sfputc_r>:
 8007300:	6893      	ldr	r3, [r2, #8]
 8007302:	b410      	push	{r4}
 8007304:	3b01      	subs	r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	6093      	str	r3, [r2, #8]
 800730a:	da07      	bge.n	800731c <__sfputc_r+0x1c>
 800730c:	6994      	ldr	r4, [r2, #24]
 800730e:	42a3      	cmp	r3, r4
 8007310:	db01      	blt.n	8007316 <__sfputc_r+0x16>
 8007312:	290a      	cmp	r1, #10
 8007314:	d102      	bne.n	800731c <__sfputc_r+0x1c>
 8007316:	bc10      	pop	{r4}
 8007318:	f7fe bb48 	b.w	80059ac <__swbuf_r>
 800731c:	6813      	ldr	r3, [r2, #0]
 800731e:	1c58      	adds	r0, r3, #1
 8007320:	6010      	str	r0, [r2, #0]
 8007322:	7019      	strb	r1, [r3, #0]
 8007324:	4608      	mov	r0, r1
 8007326:	bc10      	pop	{r4}
 8007328:	4770      	bx	lr

0800732a <__sfputs_r>:
 800732a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732c:	4606      	mov	r6, r0
 800732e:	460f      	mov	r7, r1
 8007330:	4614      	mov	r4, r2
 8007332:	18d5      	adds	r5, r2, r3
 8007334:	42ac      	cmp	r4, r5
 8007336:	d101      	bne.n	800733c <__sfputs_r+0x12>
 8007338:	2000      	movs	r0, #0
 800733a:	e007      	b.n	800734c <__sfputs_r+0x22>
 800733c:	463a      	mov	r2, r7
 800733e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007342:	4630      	mov	r0, r6
 8007344:	f7ff ffdc 	bl	8007300 <__sfputc_r>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d1f3      	bne.n	8007334 <__sfputs_r+0xa>
 800734c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007350 <_vfiprintf_r>:
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	460c      	mov	r4, r1
 8007356:	b09d      	sub	sp, #116	; 0x74
 8007358:	4617      	mov	r7, r2
 800735a:	461d      	mov	r5, r3
 800735c:	4606      	mov	r6, r0
 800735e:	b118      	cbz	r0, 8007368 <_vfiprintf_r+0x18>
 8007360:	6983      	ldr	r3, [r0, #24]
 8007362:	b90b      	cbnz	r3, 8007368 <_vfiprintf_r+0x18>
 8007364:	f7ff fb14 	bl	8006990 <__sinit>
 8007368:	4b7c      	ldr	r3, [pc, #496]	; (800755c <_vfiprintf_r+0x20c>)
 800736a:	429c      	cmp	r4, r3
 800736c:	d158      	bne.n	8007420 <_vfiprintf_r+0xd0>
 800736e:	6874      	ldr	r4, [r6, #4]
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	0718      	lsls	r0, r3, #28
 8007374:	d55e      	bpl.n	8007434 <_vfiprintf_r+0xe4>
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d05b      	beq.n	8007434 <_vfiprintf_r+0xe4>
 800737c:	2300      	movs	r3, #0
 800737e:	9309      	str	r3, [sp, #36]	; 0x24
 8007380:	2320      	movs	r3, #32
 8007382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007386:	2330      	movs	r3, #48	; 0x30
 8007388:	f04f 0b01 	mov.w	fp, #1
 800738c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007390:	9503      	str	r5, [sp, #12]
 8007392:	46b8      	mov	r8, r7
 8007394:	4645      	mov	r5, r8
 8007396:	f815 3b01 	ldrb.w	r3, [r5], #1
 800739a:	b10b      	cbz	r3, 80073a0 <_vfiprintf_r+0x50>
 800739c:	2b25      	cmp	r3, #37	; 0x25
 800739e:	d154      	bne.n	800744a <_vfiprintf_r+0xfa>
 80073a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80073a4:	d00b      	beq.n	80073be <_vfiprintf_r+0x6e>
 80073a6:	4653      	mov	r3, sl
 80073a8:	463a      	mov	r2, r7
 80073aa:	4621      	mov	r1, r4
 80073ac:	4630      	mov	r0, r6
 80073ae:	f7ff ffbc 	bl	800732a <__sfputs_r>
 80073b2:	3001      	adds	r0, #1
 80073b4:	f000 80c2 	beq.w	800753c <_vfiprintf_r+0x1ec>
 80073b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ba:	4453      	add	r3, sl
 80073bc:	9309      	str	r3, [sp, #36]	; 0x24
 80073be:	f898 3000 	ldrb.w	r3, [r8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 80ba 	beq.w	800753c <_vfiprintf_r+0x1ec>
 80073c8:	2300      	movs	r3, #0
 80073ca:	f04f 32ff 	mov.w	r2, #4294967295
 80073ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073d2:	9304      	str	r3, [sp, #16]
 80073d4:	9307      	str	r3, [sp, #28]
 80073d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073da:	931a      	str	r3, [sp, #104]	; 0x68
 80073dc:	46a8      	mov	r8, r5
 80073de:	2205      	movs	r2, #5
 80073e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80073e4:	485e      	ldr	r0, [pc, #376]	; (8007560 <_vfiprintf_r+0x210>)
 80073e6:	f7ff fbed 	bl	8006bc4 <memchr>
 80073ea:	9b04      	ldr	r3, [sp, #16]
 80073ec:	bb78      	cbnz	r0, 800744e <_vfiprintf_r+0xfe>
 80073ee:	06d9      	lsls	r1, r3, #27
 80073f0:	bf44      	itt	mi
 80073f2:	2220      	movmi	r2, #32
 80073f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073f8:	071a      	lsls	r2, r3, #28
 80073fa:	bf44      	itt	mi
 80073fc:	222b      	movmi	r2, #43	; 0x2b
 80073fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007402:	782a      	ldrb	r2, [r5, #0]
 8007404:	2a2a      	cmp	r2, #42	; 0x2a
 8007406:	d02a      	beq.n	800745e <_vfiprintf_r+0x10e>
 8007408:	46a8      	mov	r8, r5
 800740a:	2000      	movs	r0, #0
 800740c:	250a      	movs	r5, #10
 800740e:	9a07      	ldr	r2, [sp, #28]
 8007410:	4641      	mov	r1, r8
 8007412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007416:	3b30      	subs	r3, #48	; 0x30
 8007418:	2b09      	cmp	r3, #9
 800741a:	d969      	bls.n	80074f0 <_vfiprintf_r+0x1a0>
 800741c:	b360      	cbz	r0, 8007478 <_vfiprintf_r+0x128>
 800741e:	e024      	b.n	800746a <_vfiprintf_r+0x11a>
 8007420:	4b50      	ldr	r3, [pc, #320]	; (8007564 <_vfiprintf_r+0x214>)
 8007422:	429c      	cmp	r4, r3
 8007424:	d101      	bne.n	800742a <_vfiprintf_r+0xda>
 8007426:	68b4      	ldr	r4, [r6, #8]
 8007428:	e7a2      	b.n	8007370 <_vfiprintf_r+0x20>
 800742a:	4b4f      	ldr	r3, [pc, #316]	; (8007568 <_vfiprintf_r+0x218>)
 800742c:	429c      	cmp	r4, r3
 800742e:	bf08      	it	eq
 8007430:	68f4      	ldreq	r4, [r6, #12]
 8007432:	e79d      	b.n	8007370 <_vfiprintf_r+0x20>
 8007434:	4621      	mov	r1, r4
 8007436:	4630      	mov	r0, r6
 8007438:	f7fe fb0a 	bl	8005a50 <__swsetup_r>
 800743c:	2800      	cmp	r0, #0
 800743e:	d09d      	beq.n	800737c <_vfiprintf_r+0x2c>
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	b01d      	add	sp, #116	; 0x74
 8007446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744a:	46a8      	mov	r8, r5
 800744c:	e7a2      	b.n	8007394 <_vfiprintf_r+0x44>
 800744e:	4a44      	ldr	r2, [pc, #272]	; (8007560 <_vfiprintf_r+0x210>)
 8007450:	4645      	mov	r5, r8
 8007452:	1a80      	subs	r0, r0, r2
 8007454:	fa0b f000 	lsl.w	r0, fp, r0
 8007458:	4318      	orrs	r0, r3
 800745a:	9004      	str	r0, [sp, #16]
 800745c:	e7be      	b.n	80073dc <_vfiprintf_r+0x8c>
 800745e:	9a03      	ldr	r2, [sp, #12]
 8007460:	1d11      	adds	r1, r2, #4
 8007462:	6812      	ldr	r2, [r2, #0]
 8007464:	9103      	str	r1, [sp, #12]
 8007466:	2a00      	cmp	r2, #0
 8007468:	db01      	blt.n	800746e <_vfiprintf_r+0x11e>
 800746a:	9207      	str	r2, [sp, #28]
 800746c:	e004      	b.n	8007478 <_vfiprintf_r+0x128>
 800746e:	4252      	negs	r2, r2
 8007470:	f043 0302 	orr.w	r3, r3, #2
 8007474:	9207      	str	r2, [sp, #28]
 8007476:	9304      	str	r3, [sp, #16]
 8007478:	f898 3000 	ldrb.w	r3, [r8]
 800747c:	2b2e      	cmp	r3, #46	; 0x2e
 800747e:	d10e      	bne.n	800749e <_vfiprintf_r+0x14e>
 8007480:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007484:	2b2a      	cmp	r3, #42	; 0x2a
 8007486:	d138      	bne.n	80074fa <_vfiprintf_r+0x1aa>
 8007488:	9b03      	ldr	r3, [sp, #12]
 800748a:	f108 0802 	add.w	r8, r8, #2
 800748e:	1d1a      	adds	r2, r3, #4
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	9203      	str	r2, [sp, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	bfb8      	it	lt
 8007498:	f04f 33ff 	movlt.w	r3, #4294967295
 800749c:	9305      	str	r3, [sp, #20]
 800749e:	4d33      	ldr	r5, [pc, #204]	; (800756c <_vfiprintf_r+0x21c>)
 80074a0:	2203      	movs	r2, #3
 80074a2:	f898 1000 	ldrb.w	r1, [r8]
 80074a6:	4628      	mov	r0, r5
 80074a8:	f7ff fb8c 	bl	8006bc4 <memchr>
 80074ac:	b140      	cbz	r0, 80074c0 <_vfiprintf_r+0x170>
 80074ae:	2340      	movs	r3, #64	; 0x40
 80074b0:	1b40      	subs	r0, r0, r5
 80074b2:	fa03 f000 	lsl.w	r0, r3, r0
 80074b6:	9b04      	ldr	r3, [sp, #16]
 80074b8:	f108 0801 	add.w	r8, r8, #1
 80074bc:	4303      	orrs	r3, r0
 80074be:	9304      	str	r3, [sp, #16]
 80074c0:	f898 1000 	ldrb.w	r1, [r8]
 80074c4:	2206      	movs	r2, #6
 80074c6:	482a      	ldr	r0, [pc, #168]	; (8007570 <_vfiprintf_r+0x220>)
 80074c8:	f108 0701 	add.w	r7, r8, #1
 80074cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074d0:	f7ff fb78 	bl	8006bc4 <memchr>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d037      	beq.n	8007548 <_vfiprintf_r+0x1f8>
 80074d8:	4b26      	ldr	r3, [pc, #152]	; (8007574 <_vfiprintf_r+0x224>)
 80074da:	bb1b      	cbnz	r3, 8007524 <_vfiprintf_r+0x1d4>
 80074dc:	9b03      	ldr	r3, [sp, #12]
 80074de:	3307      	adds	r3, #7
 80074e0:	f023 0307 	bic.w	r3, r3, #7
 80074e4:	3308      	adds	r3, #8
 80074e6:	9303      	str	r3, [sp, #12]
 80074e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ea:	444b      	add	r3, r9
 80074ec:	9309      	str	r3, [sp, #36]	; 0x24
 80074ee:	e750      	b.n	8007392 <_vfiprintf_r+0x42>
 80074f0:	fb05 3202 	mla	r2, r5, r2, r3
 80074f4:	2001      	movs	r0, #1
 80074f6:	4688      	mov	r8, r1
 80074f8:	e78a      	b.n	8007410 <_vfiprintf_r+0xc0>
 80074fa:	2300      	movs	r3, #0
 80074fc:	250a      	movs	r5, #10
 80074fe:	4619      	mov	r1, r3
 8007500:	f108 0801 	add.w	r8, r8, #1
 8007504:	9305      	str	r3, [sp, #20]
 8007506:	4640      	mov	r0, r8
 8007508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800750c:	3a30      	subs	r2, #48	; 0x30
 800750e:	2a09      	cmp	r2, #9
 8007510:	d903      	bls.n	800751a <_vfiprintf_r+0x1ca>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0c3      	beq.n	800749e <_vfiprintf_r+0x14e>
 8007516:	9105      	str	r1, [sp, #20]
 8007518:	e7c1      	b.n	800749e <_vfiprintf_r+0x14e>
 800751a:	fb05 2101 	mla	r1, r5, r1, r2
 800751e:	2301      	movs	r3, #1
 8007520:	4680      	mov	r8, r0
 8007522:	e7f0      	b.n	8007506 <_vfiprintf_r+0x1b6>
 8007524:	ab03      	add	r3, sp, #12
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	4622      	mov	r2, r4
 800752a:	4b13      	ldr	r3, [pc, #76]	; (8007578 <_vfiprintf_r+0x228>)
 800752c:	a904      	add	r1, sp, #16
 800752e:	4630      	mov	r0, r6
 8007530:	f7fd fd00 	bl	8004f34 <_printf_float>
 8007534:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007538:	4681      	mov	r9, r0
 800753a:	d1d5      	bne.n	80074e8 <_vfiprintf_r+0x198>
 800753c:	89a3      	ldrh	r3, [r4, #12]
 800753e:	065b      	lsls	r3, r3, #25
 8007540:	f53f af7e 	bmi.w	8007440 <_vfiprintf_r+0xf0>
 8007544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007546:	e77d      	b.n	8007444 <_vfiprintf_r+0xf4>
 8007548:	ab03      	add	r3, sp, #12
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	4622      	mov	r2, r4
 800754e:	4b0a      	ldr	r3, [pc, #40]	; (8007578 <_vfiprintf_r+0x228>)
 8007550:	a904      	add	r1, sp, #16
 8007552:	4630      	mov	r0, r6
 8007554:	f7fd ff9a 	bl	800548c <_printf_i>
 8007558:	e7ec      	b.n	8007534 <_vfiprintf_r+0x1e4>
 800755a:	bf00      	nop
 800755c:	08007b84 	.word	0x08007b84
 8007560:	08007ccc 	.word	0x08007ccc
 8007564:	08007ba4 	.word	0x08007ba4
 8007568:	08007b64 	.word	0x08007b64
 800756c:	08007cd2 	.word	0x08007cd2
 8007570:	08007cd6 	.word	0x08007cd6
 8007574:	08004f35 	.word	0x08004f35
 8007578:	0800732b 	.word	0x0800732b

0800757c <_putc_r>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	460d      	mov	r5, r1
 8007580:	4614      	mov	r4, r2
 8007582:	4606      	mov	r6, r0
 8007584:	b118      	cbz	r0, 800758e <_putc_r+0x12>
 8007586:	6983      	ldr	r3, [r0, #24]
 8007588:	b90b      	cbnz	r3, 800758e <_putc_r+0x12>
 800758a:	f7ff fa01 	bl	8006990 <__sinit>
 800758e:	4b13      	ldr	r3, [pc, #76]	; (80075dc <_putc_r+0x60>)
 8007590:	429c      	cmp	r4, r3
 8007592:	d112      	bne.n	80075ba <_putc_r+0x3e>
 8007594:	6874      	ldr	r4, [r6, #4]
 8007596:	68a3      	ldr	r3, [r4, #8]
 8007598:	3b01      	subs	r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	60a3      	str	r3, [r4, #8]
 800759e:	da16      	bge.n	80075ce <_putc_r+0x52>
 80075a0:	69a2      	ldr	r2, [r4, #24]
 80075a2:	4293      	cmp	r3, r2
 80075a4:	db02      	blt.n	80075ac <_putc_r+0x30>
 80075a6:	b2eb      	uxtb	r3, r5
 80075a8:	2b0a      	cmp	r3, #10
 80075aa:	d110      	bne.n	80075ce <_putc_r+0x52>
 80075ac:	4622      	mov	r2, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	4630      	mov	r0, r6
 80075b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80075b6:	f7fe b9f9 	b.w	80059ac <__swbuf_r>
 80075ba:	4b09      	ldr	r3, [pc, #36]	; (80075e0 <_putc_r+0x64>)
 80075bc:	429c      	cmp	r4, r3
 80075be:	d101      	bne.n	80075c4 <_putc_r+0x48>
 80075c0:	68b4      	ldr	r4, [r6, #8]
 80075c2:	e7e8      	b.n	8007596 <_putc_r+0x1a>
 80075c4:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <_putc_r+0x68>)
 80075c6:	429c      	cmp	r4, r3
 80075c8:	bf08      	it	eq
 80075ca:	68f4      	ldreq	r4, [r6, #12]
 80075cc:	e7e3      	b.n	8007596 <_putc_r+0x1a>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	b2e8      	uxtb	r0, r5
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	6022      	str	r2, [r4, #0]
 80075d6:	701d      	strb	r5, [r3, #0]
 80075d8:	bd70      	pop	{r4, r5, r6, pc}
 80075da:	bf00      	nop
 80075dc:	08007b84 	.word	0x08007b84
 80075e0:	08007ba4 	.word	0x08007ba4
 80075e4:	08007b64 	.word	0x08007b64

080075e8 <_sbrk_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	2300      	movs	r3, #0
 80075ec:	4c05      	ldr	r4, [pc, #20]	; (8007604 <_sbrk_r+0x1c>)
 80075ee:	4605      	mov	r5, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	6023      	str	r3, [r4, #0]
 80075f4:	f7fa fcae 	bl	8001f54 <_sbrk>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_sbrk_r+0x1a>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_sbrk_r+0x1a>
 8007600:	602b      	str	r3, [r5, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	20001030 	.word	0x20001030

08007608 <__sread>:
 8007608:	b510      	push	{r4, lr}
 800760a:	460c      	mov	r4, r1
 800760c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007610:	f000 f8a2 	bl	8007758 <_read_r>
 8007614:	2800      	cmp	r0, #0
 8007616:	bfab      	itete	ge
 8007618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800761a:	89a3      	ldrhlt	r3, [r4, #12]
 800761c:	181b      	addge	r3, r3, r0
 800761e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007622:	bfac      	ite	ge
 8007624:	6563      	strge	r3, [r4, #84]	; 0x54
 8007626:	81a3      	strhlt	r3, [r4, #12]
 8007628:	bd10      	pop	{r4, pc}

0800762a <__swrite>:
 800762a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800762e:	461f      	mov	r7, r3
 8007630:	898b      	ldrh	r3, [r1, #12]
 8007632:	4605      	mov	r5, r0
 8007634:	05db      	lsls	r3, r3, #23
 8007636:	460c      	mov	r4, r1
 8007638:	4616      	mov	r6, r2
 800763a:	d505      	bpl.n	8007648 <__swrite+0x1e>
 800763c:	2302      	movs	r3, #2
 800763e:	2200      	movs	r2, #0
 8007640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007644:	f000 f874 	bl	8007730 <_lseek_r>
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	4632      	mov	r2, r6
 800764c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007650:	81a3      	strh	r3, [r4, #12]
 8007652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007656:	463b      	mov	r3, r7
 8007658:	4628      	mov	r0, r5
 800765a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800765e:	f000 b823 	b.w	80076a8 <_write_r>

08007662 <__sseek>:
 8007662:	b510      	push	{r4, lr}
 8007664:	460c      	mov	r4, r1
 8007666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800766a:	f000 f861 	bl	8007730 <_lseek_r>
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	bf15      	itete	ne
 8007674:	6560      	strne	r0, [r4, #84]	; 0x54
 8007676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800767a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800767e:	81a3      	strheq	r3, [r4, #12]
 8007680:	bf18      	it	ne
 8007682:	81a3      	strhne	r3, [r4, #12]
 8007684:	bd10      	pop	{r4, pc}

08007686 <__sclose>:
 8007686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800768a:	f000 b81f 	b.w	80076cc <_close_r>

0800768e <__ascii_wctomb>:
 800768e:	b149      	cbz	r1, 80076a4 <__ascii_wctomb+0x16>
 8007690:	2aff      	cmp	r2, #255	; 0xff
 8007692:	bf8b      	itete	hi
 8007694:	238a      	movhi	r3, #138	; 0x8a
 8007696:	700a      	strbls	r2, [r1, #0]
 8007698:	6003      	strhi	r3, [r0, #0]
 800769a:	2001      	movls	r0, #1
 800769c:	bf88      	it	hi
 800769e:	f04f 30ff 	movhi.w	r0, #4294967295
 80076a2:	4770      	bx	lr
 80076a4:	4608      	mov	r0, r1
 80076a6:	4770      	bx	lr

080076a8 <_write_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4605      	mov	r5, r0
 80076ac:	4608      	mov	r0, r1
 80076ae:	4611      	mov	r1, r2
 80076b0:	2200      	movs	r2, #0
 80076b2:	4c05      	ldr	r4, [pc, #20]	; (80076c8 <_write_r+0x20>)
 80076b4:	6022      	str	r2, [r4, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	f7fa fbff 	bl	8001eba <_write>
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	d102      	bne.n	80076c6 <_write_r+0x1e>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	b103      	cbz	r3, 80076c6 <_write_r+0x1e>
 80076c4:	602b      	str	r3, [r5, #0]
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	20001030 	.word	0x20001030

080076cc <_close_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	2300      	movs	r3, #0
 80076d0:	4c05      	ldr	r4, [pc, #20]	; (80076e8 <_close_r+0x1c>)
 80076d2:	4605      	mov	r5, r0
 80076d4:	4608      	mov	r0, r1
 80076d6:	6023      	str	r3, [r4, #0]
 80076d8:	f7fa fc0b 	bl	8001ef2 <_close>
 80076dc:	1c43      	adds	r3, r0, #1
 80076de:	d102      	bne.n	80076e6 <_close_r+0x1a>
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	b103      	cbz	r3, 80076e6 <_close_r+0x1a>
 80076e4:	602b      	str	r3, [r5, #0]
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	20001030 	.word	0x20001030

080076ec <_fstat_r>:
 80076ec:	b538      	push	{r3, r4, r5, lr}
 80076ee:	2300      	movs	r3, #0
 80076f0:	4c06      	ldr	r4, [pc, #24]	; (800770c <_fstat_r+0x20>)
 80076f2:	4605      	mov	r5, r0
 80076f4:	4608      	mov	r0, r1
 80076f6:	4611      	mov	r1, r2
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	f7fa fc05 	bl	8001f08 <_fstat>
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	d102      	bne.n	8007708 <_fstat_r+0x1c>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	b103      	cbz	r3, 8007708 <_fstat_r+0x1c>
 8007706:	602b      	str	r3, [r5, #0]
 8007708:	bd38      	pop	{r3, r4, r5, pc}
 800770a:	bf00      	nop
 800770c:	20001030 	.word	0x20001030

08007710 <_isatty_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	2300      	movs	r3, #0
 8007714:	4c05      	ldr	r4, [pc, #20]	; (800772c <_isatty_r+0x1c>)
 8007716:	4605      	mov	r5, r0
 8007718:	4608      	mov	r0, r1
 800771a:	6023      	str	r3, [r4, #0]
 800771c:	f7fa fc03 	bl	8001f26 <_isatty>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d102      	bne.n	800772a <_isatty_r+0x1a>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	b103      	cbz	r3, 800772a <_isatty_r+0x1a>
 8007728:	602b      	str	r3, [r5, #0]
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	20001030 	.word	0x20001030

08007730 <_lseek_r>:
 8007730:	b538      	push	{r3, r4, r5, lr}
 8007732:	4605      	mov	r5, r0
 8007734:	4608      	mov	r0, r1
 8007736:	4611      	mov	r1, r2
 8007738:	2200      	movs	r2, #0
 800773a:	4c05      	ldr	r4, [pc, #20]	; (8007750 <_lseek_r+0x20>)
 800773c:	6022      	str	r2, [r4, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	f7fa fbfb 	bl	8001f3a <_lseek>
 8007744:	1c43      	adds	r3, r0, #1
 8007746:	d102      	bne.n	800774e <_lseek_r+0x1e>
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	b103      	cbz	r3, 800774e <_lseek_r+0x1e>
 800774c:	602b      	str	r3, [r5, #0]
 800774e:	bd38      	pop	{r3, r4, r5, pc}
 8007750:	20001030 	.word	0x20001030

08007754 <__malloc_lock>:
 8007754:	4770      	bx	lr

08007756 <__malloc_unlock>:
 8007756:	4770      	bx	lr

08007758 <_read_r>:
 8007758:	b538      	push	{r3, r4, r5, lr}
 800775a:	4605      	mov	r5, r0
 800775c:	4608      	mov	r0, r1
 800775e:	4611      	mov	r1, r2
 8007760:	2200      	movs	r2, #0
 8007762:	4c05      	ldr	r4, [pc, #20]	; (8007778 <_read_r+0x20>)
 8007764:	6022      	str	r2, [r4, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	f7fa fb8a 	bl	8001e80 <_read>
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	d102      	bne.n	8007776 <_read_r+0x1e>
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	b103      	cbz	r3, 8007776 <_read_r+0x1e>
 8007774:	602b      	str	r3, [r5, #0]
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	20001030 	.word	0x20001030

0800777c <_init>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	bf00      	nop
 8007780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007782:	bc08      	pop	{r3}
 8007784:	469e      	mov	lr, r3
 8007786:	4770      	bx	lr

08007788 <_fini>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	bf00      	nop
 800778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778e:	bc08      	pop	{r3}
 8007790:	469e      	mov	lr, r3
 8007792:	4770      	bx	lr
