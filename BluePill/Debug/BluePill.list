
BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003078  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b8  080034b8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080034b8  080034b8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034b8  080034b8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b8  080034b8  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034bc  080034bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080034c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000940  200001dc  0800369c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b1c  0800369c  00020b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1f3  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cff  00000000  00000000  0002a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000760  00000000  00000000  0002c0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000678  00000000  00000000  0002c858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000185e9  00000000  00000000  0002ced0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007bc1  00000000  00000000  000454b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083089  00000000  00000000  0004d07a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0103  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000258c  00000000  00000000  000d0180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001dc 	.word	0x200001dc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800316c 	.word	0x0800316c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e0 	.word	0x200001e0
 8000148:	0800316c 	.word	0x0800316c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <FL_uart_decode>:
 */

#include "FL.h"

int FL_uart_decode()
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
	char delim[2] = ","; 	// This string will be used to parse the main input string
 8000166:	232c      	movs	r3, #44	; 0x2c
 8000168:	80bb      	strh	r3, [r7, #4]
	char *token;			// This pointer will hold current parsed string
	memset(arg_buffer, '\0', sizeof(arg_buffer));
 800016a:	2228      	movs	r2, #40	; 0x28
 800016c:	2100      	movs	r1, #0
 800016e:	483a      	ldr	r0, [pc, #232]	; (8000258 <FL_uart_decode+0xf8>)
 8000170:	f001 ff8a 	bl	8002088 <memset>
	memset(single_arg, '\0',  sizeof(single_arg));
 8000174:	2280      	movs	r2, #128	; 0x80
 8000176:	2100      	movs	r1, #0
 8000178:	4838      	ldr	r0, [pc, #224]	; (800025c <FL_uart_decode+0xfc>)
 800017a:	f001 ff85 	bl	8002088 <memset>
	arg_cnt = 0;
 800017e:	4b38      	ldr	r3, [pc, #224]	; (8000260 <FL_uart_decode+0x100>)
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
	 * source 2, storing the token:
	 * https://www.tutorialspoint.com/c_standard_library/c_function_strtok.htm
	 */

	/* get the first token */
	token = strtok(input.line_rx_buffer, delim);
 8000184:	1d3b      	adds	r3, r7, #4
 8000186:	4619      	mov	r1, r3
 8000188:	4836      	ldr	r0, [pc, #216]	; (8000264 <FL_uart_decode+0x104>)
 800018a:	f002 f809 	bl	80021a0 <strtok>
 800018e:	60f8      	str	r0, [r7, #12]

	/* walk through other tokens */
	while( token != NULL ) {
 8000190:	e012      	b.n	80001b8 <FL_uart_decode+0x58>
		printf( " %s\n", token );
 8000192:	68f9      	ldr	r1, [r7, #12]
 8000194:	4834      	ldr	r0, [pc, #208]	; (8000268 <FL_uart_decode+0x108>)
 8000196:	f001 ff7f 	bl	8002098 <iprintf>
		arg_buffer[arg_cnt++] = token; // Store the token for later use
 800019a:	4b31      	ldr	r3, [pc, #196]	; (8000260 <FL_uart_decode+0x100>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	1c5a      	adds	r2, r3, #1
 80001a0:	492f      	ldr	r1, [pc, #188]	; (8000260 <FL_uart_decode+0x100>)
 80001a2:	600a      	str	r2, [r1, #0]
 80001a4:	492c      	ldr	r1, [pc, #176]	; (8000258 <FL_uart_decode+0xf8>)
 80001a6:	68fa      	ldr	r2, [r7, #12]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		token = strtok(NULL, delim);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	2000      	movs	r0, #0
 80001b2:	f001 fff5 	bl	80021a0 <strtok>
 80001b6:	60f8      	str	r0, [r7, #12]
	while( token != NULL ) {
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d1e9      	bne.n	8000192 <FL_uart_decode+0x32>
	}

	// Some debugging
	int i;
	for(i = 0; i < arg_cnt; i++)
 80001be:	2300      	movs	r3, #0
 80001c0:	60bb      	str	r3, [r7, #8]
 80001c2:	e00b      	b.n	80001dc <FL_uart_decode+0x7c>
	{
		printf("Arg buffer [%d] = %s \n", i, arg_buffer[i]);
 80001c4:	4a24      	ldr	r2, [pc, #144]	; (8000258 <FL_uart_decode+0xf8>)
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001cc:	461a      	mov	r2, r3
 80001ce:	68b9      	ldr	r1, [r7, #8]
 80001d0:	4826      	ldr	r0, [pc, #152]	; (800026c <FL_uart_decode+0x10c>)
 80001d2:	f001 ff61 	bl	8002098 <iprintf>
	for(i = 0; i < arg_cnt; i++)
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	3301      	adds	r3, #1
 80001da:	60bb      	str	r3, [r7, #8]
 80001dc:	4b20      	ldr	r3, [pc, #128]	; (8000260 <FL_uart_decode+0x100>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	68ba      	ldr	r2, [r7, #8]
 80001e2:	429a      	cmp	r2, r3
 80001e4:	dbee      	blt.n	80001c4 <FL_uart_decode+0x64>
	}

	// The first argument is the name of the command
	// Determine which command is sent
	command.cmd_no = FL_get_cmd(arg_buffer[0]);
 80001e6:	4b1c      	ldr	r3, [pc, #112]	; (8000258 <FL_uart_decode+0xf8>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f84a 	bl	8000284 <FL_get_cmd>
 80001f0:	4602      	mov	r2, r0
 80001f2:	4b1f      	ldr	r3, [pc, #124]	; (8000270 <FL_uart_decode+0x110>)
 80001f4:	601a      	str	r2, [r3, #0]

	if(command.cmd_no == COMMAND_ERROR)
 80001f6:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <FL_uart_decode+0x110>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d105      	bne.n	800020a <FL_uart_decode+0xaa>
	{
		printf("Command error\n");
 80001fe:	481d      	ldr	r0, [pc, #116]	; (8000274 <FL_uart_decode+0x114>)
 8000200:	f001 ffbe 	bl	8002180 <puts>
		return -1;
 8000204:	f04f 33ff 	mov.w	r3, #4294967295
 8000208:	e022      	b.n	8000250 <FL_uart_decode+0xf0>

	/*
	 * Preparation for argument conversion
	 * Each command has its own arguments and should be parsed accordingly
	 */
	arg_cnt--; 	// The first argument is the command name, compensate for it
 800020a:	4b15      	ldr	r3, [pc, #84]	; (8000260 <FL_uart_decode+0x100>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	3b01      	subs	r3, #1
 8000210:	4a13      	ldr	r2, [pc, #76]	; (8000260 <FL_uart_decode+0x100>)
 8000212:	6013      	str	r3, [r2, #0]

	switch(command.cmd_no)
 8000214:	4b16      	ldr	r3, [pc, #88]	; (8000270 <FL_uart_decode+0x110>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b01      	cmp	r3, #1
 800021a:	d115      	bne.n	8000248 <FL_uart_decode+0xe8>
	{
		case COMMAND_SET_RES:
		{
			if(arg_cnt != SET_RES_ARGS)
 800021c:	4b10      	ldr	r3, [pc, #64]	; (8000260 <FL_uart_decode+0x100>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	2b02      	cmp	r3, #2
 8000222:	d00a      	beq.n	800023a <FL_uart_decode+0xda>
			{
				printf("ERROR: Wrong number of arguments arguments\n");
 8000224:	4814      	ldr	r0, [pc, #80]	; (8000278 <FL_uart_decode+0x118>)
 8000226:	f001 ffab 	bl	8002180 <puts>
				printf("Expected %d arguments, got %d arguments\n", SET_RES_ARGS, arg_cnt);
 800022a:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <FL_uart_decode+0x100>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	2102      	movs	r1, #2
 8000232:	4812      	ldr	r0, [pc, #72]	; (800027c <FL_uart_decode+0x11c>)
 8000234:	f001 ff30 	bl	8002098 <iprintf>
			}
			else
			{
				FL_convert_args(command.cmd_no, arg_buffer);
			}
		}break;
 8000238:	e009      	b.n	800024e <FL_uart_decode+0xee>
				FL_convert_args(command.cmd_no, arg_buffer);
 800023a:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <FL_uart_decode+0x110>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4906      	ldr	r1, [pc, #24]	; (8000258 <FL_uart_decode+0xf8>)
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f849 	bl	80002d8 <FL_convert_args>
		}break;
 8000246:	e002      	b.n	800024e <FL_uart_decode+0xee>
		default:
		{
			printf("Don't know\n");
 8000248:	480d      	ldr	r0, [pc, #52]	; (8000280 <FL_uart_decode+0x120>)
 800024a:	f001 ff99 	bl	8002180 <puts>
		}
	}
	return 0;
 800024e:	2300      	movs	r3, #0
}
 8000250:	4618      	mov	r0, r3
 8000252:	3710      	adds	r7, #16
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000628 	.word	0x20000628
 800025c:	20000654 	.word	0x20000654
 8000260:	20000204 	.word	0x20000204
 8000264:	20000209 	.word	0x20000209
 8000268:	08003184 	.word	0x08003184
 800026c:	0800318c 	.word	0x0800318c
 8000270:	20000618 	.word	0x20000618
 8000274:	080031a4 	.word	0x080031a4
 8000278:	080031b4 	.word	0x080031b4
 800027c:	080031e0 	.word	0x080031e0
 8000280:	0800320c 	.word	0x0800320c

08000284 <FL_get_cmd>:
/*
 *  This function takes the first argument passed to the FL and tries to
 *  determine which command is sent
 */
int FL_get_cmd(char *str)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b086      	sub	sp, #24
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	char set_res[] = "set_res";
 800028c:	4a0f      	ldr	r2, [pc, #60]	; (80002cc <FL_get_cmd+0x48>)
 800028e:	f107 030c 	add.w	r3, r7, #12
 8000292:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000296:	e883 0003 	stmia.w	r3, {r0, r1}
	int ret;

	if(strcmp(str, set_res) == 0)
 800029a:	f107 030c 	add.w	r3, r7, #12
 800029e:	4619      	mov	r1, r3
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f7ff ff53 	bl	800014c <strcmp>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d105      	bne.n	80002b8 <FL_get_cmd+0x34>
	{
		printf("command = set_res\n");
 80002ac:	4808      	ldr	r0, [pc, #32]	; (80002d0 <FL_get_cmd+0x4c>)
 80002ae:	f001 ff67 	bl	8002180 <puts>
		ret = COMMAND_SET_RES;
 80002b2:	2301      	movs	r3, #1
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	e004      	b.n	80002c2 <FL_get_cmd+0x3e>
	}
	else
	{
		printf("command = unrecognized\n");
 80002b8:	4806      	ldr	r0, [pc, #24]	; (80002d4 <FL_get_cmd+0x50>)
 80002ba:	f001 ff61 	bl	8002180 <puts>
		ret = COMMAND_ERROR;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
	}

	return ret;
 80002c2:	697b      	ldr	r3, [r7, #20]
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3718      	adds	r7, #24
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	08003244 	.word	0x08003244
 80002d0:	08003218 	.word	0x08003218
 80002d4:	0800322c 	.word	0x0800322c

080002d8 <FL_convert_args>:

int FL_convert_args(int cmd_no, char **args)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]

	switch(cmd_no)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d122      	bne.n	800032e <FL_convert_args+0x56>
	{
		case COMMAND_SET_RES:
		{
			// Copy a string from args into single_arg.
			// See FL.h for more details
			strcpy(single_arg, args[1]);
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	3304      	adds	r3, #4
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4619      	mov	r1, r3
 80002f0:	4813      	ldr	r0, [pc, #76]	; (8000340 <FL_convert_args+0x68>)
 80002f2:	f001 ff4d 	bl	8002190 <strcpy>
			printf("Single arg = %s\n", single_arg);
 80002f6:	4912      	ldr	r1, [pc, #72]	; (8000340 <FL_convert_args+0x68>)
 80002f8:	4812      	ldr	r0, [pc, #72]	; (8000344 <FL_convert_args+0x6c>)
 80002fa:	f001 fecd 	bl	8002098 <iprintf>
			command.set_res_cmd.digipot_no = atoi(single_arg);
 80002fe:	4810      	ldr	r0, [pc, #64]	; (8000340 <FL_convert_args+0x68>)
 8000300:	f001 fe94 	bl	800202c <atoi>
 8000304:	4602      	mov	r2, r0
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <FL_convert_args+0x70>)
 8000308:	605a      	str	r2, [r3, #4]

			strcpy(single_arg, args[2]);
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	3308      	adds	r3, #8
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4619      	mov	r1, r3
 8000312:	480b      	ldr	r0, [pc, #44]	; (8000340 <FL_convert_args+0x68>)
 8000314:	f001 ff3c 	bl	8002190 <strcpy>
			printf("Single arg = %s\n", single_arg);
 8000318:	4909      	ldr	r1, [pc, #36]	; (8000340 <FL_convert_args+0x68>)
 800031a:	480a      	ldr	r0, [pc, #40]	; (8000344 <FL_convert_args+0x6c>)
 800031c:	f001 febc 	bl	8002098 <iprintf>
			command.set_res_cmd.res = atoi(single_arg);
 8000320:	4807      	ldr	r0, [pc, #28]	; (8000340 <FL_convert_args+0x68>)
 8000322:	f001 fe83 	bl	800202c <atoi>
 8000326:	4602      	mov	r2, r0
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <FL_convert_args+0x70>)
 800032a:	609a      	str	r2, [r3, #8]

		}break;
 800032c:	e002      	b.n	8000334 <FL_convert_args+0x5c>
		default:
		{
			printf("Don't know 2\n");
 800032e:	4807      	ldr	r0, [pc, #28]	; (800034c <FL_convert_args+0x74>)
 8000330:	f001 ff26 	bl	8002180 <puts>
		}
	}


	return 0;
 8000334:	2300      	movs	r3, #0
}
 8000336:	4618      	mov	r0, r3
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000654 	.word	0x20000654
 8000344:	0800324c 	.word	0x0800324c
 8000348:	20000618 	.word	0x20000618
 800034c:	08003260 	.word	0x08003260

08000350 <LL_exec>:
 */

#include "LL.h"

int LL_exec()
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	switch(command.cmd_no)
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <LL_exec+0x20>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d103      	bne.n	8000364 <LL_exec+0x14>
	{
	case COMMAND_SET_RES:
	{
		printf("Executed COMMAND_SET_RES\n");
 800035c:	4805      	ldr	r0, [pc, #20]	; (8000374 <LL_exec+0x24>)
 800035e:	f001 ff0f 	bl	8002180 <puts>
	}break;
 8000362:	e002      	b.n	800036a <LL_exec+0x1a>
	default:
	{
		printf("Dunno 3\n");
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <LL_exec+0x28>)
 8000366:	f001 ff0b 	bl	8002180 <puts>
	}
	}
	return 0;
 800036a:	2300      	movs	r3, #0
}
 800036c:	4618      	mov	r0, r3
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000618 	.word	0x20000618
 8000374:	08003270 	.word	0x08003270
 8000378:	0800328c 	.word	0x0800328c

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000382:	f000 fab7 	bl	80008f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000386:	f000 f853 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038a:	f000 f8c1 	bl	8000510 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800038e:	f000 f895 	bl	80004bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	int i;
	for(i = 0; i < LINE_BUFLEN; i++)
 8000392:	2300      	movs	r3, #0
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	e008      	b.n	80003aa <main+0x2e>
		input.line_rx_buffer[i] = 0;
 8000398:	4a1e      	ldr	r2, [pc, #120]	; (8000414 <main+0x98>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4413      	add	r3, r2
 800039e:	3301      	adds	r3, #1
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LINE_BUFLEN; i++)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	3301      	adds	r3, #1
 80003a8:	607b      	str	r3, [r7, #4]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003b0:	dbf2      	blt.n	8000398 <main+0x1c>

	// Reset some stuff
	input.byte_buffer_rx[0] = 0;
 80003b2:	4b18      	ldr	r3, [pc, #96]	; (8000414 <main+0x98>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
	input.char_counter = 0;
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <main+0x98>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	input.command_execute_flag = FALSE;
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <main+0x98>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 80003c8:	2201      	movs	r2, #1
 80003ca:	4912      	ldr	r1, [pc, #72]	; (8000414 <main+0x98>)
 80003cc:	4812      	ldr	r0, [pc, #72]	; (8000418 <main+0x9c>)
 80003ce:	f001 facc 	bl	800196a <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == TRUE)
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <main+0x98>)
 80003d4:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80003d8:	2bff      	cmp	r3, #255	; 0xff
 80003da:	d1fa      	bne.n	80003d2 <main+0x56>
	  {
		  input.command_execute_flag = FALSE;
 80003dc:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <main+0x98>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		  FL_uart_decode();
 80003e4:	f7ff febc 	bl	8000160 <FL_uart_decode>

		  printf("back in main.c\n");
 80003e8:	480c      	ldr	r0, [pc, #48]	; (800041c <main+0xa0>)
 80003ea:	f001 fec9 	bl	8002180 <puts>
		  printf("Command set_res contents:\n");
 80003ee:	480c      	ldr	r0, [pc, #48]	; (8000420 <main+0xa4>)
 80003f0:	f001 fec6 	bl	8002180 <puts>
		  printf("\tdigipot   : %d\n", command.set_res_cmd.digipot_no);
 80003f4:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <main+0xa8>)
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	4619      	mov	r1, r3
 80003fa:	480b      	ldr	r0, [pc, #44]	; (8000428 <main+0xac>)
 80003fc:	f001 fe4c 	bl	8002098 <iprintf>
		  printf("\tresistance: %d\n", command.set_res_cmd.res);
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <main+0xa8>)
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	4619      	mov	r1, r3
 8000406:	4809      	ldr	r0, [pc, #36]	; (800042c <main+0xb0>)
 8000408:	f001 fe46 	bl	8002098 <iprintf>

		  LL_exec();
 800040c:	f7ff ffa0 	bl	8000350 <LL_exec>
	  if(input.command_execute_flag == TRUE)
 8000410:	e7df      	b.n	80003d2 <main+0x56>
 8000412:	bf00      	nop
 8000414:	20000208 	.word	0x20000208
 8000418:	20000ad4 	.word	0x20000ad4
 800041c:	08003294 	.word	0x08003294
 8000420:	080032a4 	.word	0x080032a4
 8000424:	20000618 	.word	0x20000618
 8000428:	080032c0 	.word	0x080032c0
 800042c:	080032d4 	.word	0x080032d4

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b090      	sub	sp, #64	; 0x40
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	f107 0318 	add.w	r3, r7, #24
 800043a:	2228      	movs	r2, #40	; 0x28
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f001 fe22 	bl	8002088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000452:	2301      	movs	r3, #1
 8000454:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800045a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000460:	2301      	movs	r3, #1
 8000462:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000464:	2302      	movs	r3, #2
 8000466:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800046c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800046e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000472:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000474:	f107 0318 	add.w	r3, r7, #24
 8000478:	4618      	mov	r0, r3
 800047a:	f000 fd7b 	bl	8000f74 <HAL_RCC_OscConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000484:	f000 f878 	bl	8000578 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000488:	230f      	movs	r3, #15
 800048a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048c:	2302      	movs	r3, #2
 800048e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000498:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2102      	movs	r1, #2
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 ffe6 	bl	8001474 <HAL_RCC_ClockConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004ae:	f000 f863 	bl	8000578 <Error_Handler>
  }
}
 80004b2:	bf00      	nop
 80004b4:	3740      	adds	r7, #64	; 0x40
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004c2:	4a12      	ldr	r2, [pc, #72]	; (800050c <MX_USART2_UART_Init+0x50>)
 80004c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004e2:	220c      	movs	r2, #12
 80004e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004f4:	f001 f95a 	bl	80017ac <HAL_UART_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004fe:	f000 f83b 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000ad4 	.word	0x20000ad4
 800050c:	40004400 	.word	0x40004400

08000510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_GPIO_Init+0x40>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <MX_GPIO_Init+0x40>)
 800051c:	f043 0320 	orr.w	r3, r3, #32
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <MX_GPIO_Init+0x40>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0320 	and.w	r3, r3, #32
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <MX_GPIO_Init+0x40>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <MX_GPIO_Init+0x40>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	6193      	str	r3, [r2, #24]
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <MX_GPIO_Init+0x40>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]

}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000

08000554 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 800055c:	1d39      	adds	r1, r7, #4
 800055e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000562:	2201      	movs	r2, #1
 8000564:	4803      	ldr	r0, [pc, #12]	; (8000574 <__io_putchar+0x20>)
 8000566:	f001 f96e 	bl	8001846 <HAL_UART_Transmit>
	return ch;												//Return the character
 800056a:	687b      	ldr	r3, [r7, #4]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000ad4 	.word	0x20000ad4

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_MspInit+0x5c>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <HAL_MspInit+0x5c>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_MspInit+0x5c>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_MspInit+0x5c>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_MspInit+0x5c>)
 80005a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_MspInit+0x5c>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <HAL_MspInit+0x60>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <HAL_MspInit+0x60>)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010000 	.word	0x40010000

080005e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <HAL_UART_MspInit+0x98>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d137      	bne.n	8000678 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <HAL_UART_MspInit+0x9c>)
 800060a:	69db      	ldr	r3, [r3, #28]
 800060c:	4a1d      	ldr	r2, [pc, #116]	; (8000684 <HAL_UART_MspInit+0x9c>)
 800060e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000612:	61d3      	str	r3, [r2, #28]
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <HAL_UART_MspInit+0x9c>)
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <HAL_UART_MspInit+0x9c>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a17      	ldr	r2, [pc, #92]	; (8000684 <HAL_UART_MspInit+0x9c>)
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <HAL_UART_MspInit+0x9c>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0304 	and.w	r3, r3, #4
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000638:	2304      	movs	r3, #4
 800063a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000640:	2303      	movs	r3, #3
 8000642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	4619      	mov	r1, r3
 800064a:	480f      	ldr	r0, [pc, #60]	; (8000688 <HAL_UART_MspInit+0xa0>)
 800064c:	f000 fb38 	bl	8000cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000650:	2308      	movs	r3, #8
 8000652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	4809      	ldr	r0, [pc, #36]	; (8000688 <HAL_UART_MspInit+0xa0>)
 8000664:	f000 fb2c 	bl	8000cc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	2026      	movs	r0, #38	; 0x26
 800066e:	f000 fa7a 	bl	8000b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000672:	2026      	movs	r0, #38	; 0x26
 8000674:	f000 fa93 	bl	8000b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40004400 	.word	0x40004400
 8000684:	40021000 	.word	0x40021000
 8000688:	40010800 	.word	0x40010800

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <HardFault_Handler+0x4>

0800069e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <MemManage_Handler+0x4>

080006a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <BusFault_Handler+0x4>

080006aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <UsageFault_Handler+0x4>

080006b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d8:	f000 f952 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	char uart_char = USART2->DR;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <USART2_IRQHandler+0x70>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	71fb      	strb	r3, [r7, #7]
	//This way we ignore the '\n' character
	if(uart_char != LINE_FEED)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2b0a      	cmp	r3, #10
 80006f0:	d026      	beq.n	8000740 <USART2_IRQHandler+0x60>
	{
		//Check for CR and LF characters
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0d      	cmp	r3, #13
 80006f6:	d002      	beq.n	80006fe <USART2_IRQHandler+0x1e>
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	2b2e      	cmp	r3, #46	; 0x2e
 80006fc:	d10e      	bne.n	800071c <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <USART2_IRQHandler+0x74>)
 8000700:	22ff      	movs	r2, #255	; 0xff
 8000702:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <USART2_IRQHandler+0x74>)
 8000708:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800070c:	4a11      	ldr	r2, [pc, #68]	; (8000754 <USART2_IRQHandler+0x74>)
 800070e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <USART2_IRQHandler+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800071a:	e011      	b.n	8000740 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 800071c:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <USART2_IRQHandler+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <USART2_IRQHandler+0x74>)
 8000726:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <USART2_IRQHandler+0x74>)
 800072c:	4413      	add	r3, r2
 800072e:	79fa      	ldrb	r2, [r7, #7]
 8000730:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <USART2_IRQHandler+0x74>)
 8000734:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000738:	3301      	adds	r3, #1
 800073a:	4a06      	ldr	r2, [pc, #24]	; (8000754 <USART2_IRQHandler+0x74>)
 800073c:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <USART2_IRQHandler+0x78>)
 8000742:	f001 f967 	bl	8001a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40004400 	.word	0x40004400
 8000754:	20000208 	.word	0x20000208
 8000758:	20000ad4 	.word	0x20000ad4

0800075c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	e00a      	b.n	8000784 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800076e:	f3af 8000 	nop.w
 8000772:	4601      	mov	r1, r0
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	60ba      	str	r2, [r7, #8]
 800077a:	b2ca      	uxtb	r2, r1
 800077c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	3301      	adds	r3, #1
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	dbf0      	blt.n	800076e <_read+0x12>
	}

return len;
 800078c:	687b      	ldr	r3, [r7, #4]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b086      	sub	sp, #24
 800079a:	af00      	add	r7, sp, #0
 800079c:	60f8      	str	r0, [r7, #12]
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	e009      	b.n	80007bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	60ba      	str	r2, [r7, #8]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fecf 	bl	8000554 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3301      	adds	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	dbf1      	blt.n	80007a8 <_write+0x12>
	}
	return len;
 80007c4:	687b      	ldr	r3, [r7, #4]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_close>:

int _close(int file)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
	return -1;
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007da:	4618      	mov	r0, r3
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007f4:	605a      	str	r2, [r3, #4]
	return 0;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr

08000802 <_isatty>:

int _isatty(int file)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
	return 1;
 800080a:	2301      	movs	r3, #1
}
 800080c:	4618      	mov	r0, r3
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000816:	b480      	push	{r7}
 8000818:	b085      	sub	sp, #20
 800081a:	af00      	add	r7, sp, #0
 800081c:	60f8      	str	r0, [r7, #12]
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
	return 0;
 8000822:	2300      	movs	r3, #0
}
 8000824:	4618      	mov	r0, r3
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
	...

08000830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000838:	4a14      	ldr	r2, [pc, #80]	; (800088c <_sbrk+0x5c>)
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <_sbrk+0x60>)
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <_sbrk+0x64>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d102      	bne.n	8000852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <_sbrk+0x64>)
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <_sbrk+0x68>)
 8000850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <_sbrk+0x64>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	429a      	cmp	r2, r3
 800085e:	d207      	bcs.n	8000870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000860:	f001 fbe8 	bl	8002034 <__errno>
 8000864:	4602      	mov	r2, r0
 8000866:	230c      	movs	r3, #12
 8000868:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	e009      	b.n	8000884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <_sbrk+0x64>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4413      	add	r3, r2
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <_sbrk+0x64>)
 8000880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000882:	68fb      	ldr	r3, [r7, #12]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20005000 	.word	0x20005000
 8000890:	00000400 	.word	0x00000400
 8000894:	200001f8 	.word	0x200001f8
 8000898:	20000b20 	.word	0x20000b20

0800089c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008aa:	e003      	b.n	80008b4 <LoopCopyDataInit>

080008ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008b2:	3104      	adds	r1, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008b4:	480a      	ldr	r0, [pc, #40]	; (80008e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008bc:	d3f6      	bcc.n	80008ac <CopyDataInit>
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008c0:	e002      	b.n	80008c8 <LoopFillZerobss>

080008c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008c4:	f842 3b04 	str.w	r3, [r2], #4

080008c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008cc:	d3f9      	bcc.n	80008c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008ce:	f7ff ffe5 	bl	800089c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d2:	f001 fbb5 	bl	8002040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d6:	f7ff fd51 	bl	800037c <main>
  bx lr
 80008da:	4770      	bx	lr
  ldr r3, =_sidata
 80008dc:	080034c0 	.word	0x080034c0
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008e4:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80008e8:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80008ec:	20000b1c 	.word	0x20000b1c

080008f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_2_IRQHandler>
	...

080008f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_Init+0x28>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_Init+0x28>)
 80008fe:	f043 0310 	orr.w	r3, r3, #16
 8000902:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000904:	2003      	movs	r0, #3
 8000906:	f000 f923 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090a:	2000      	movs	r0, #0
 800090c:	f000 f808 	bl	8000920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000910:	f7ff fe38 	bl	8000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40022000 	.word	0x40022000

08000920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_InitTick+0x54>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_InitTick+0x58>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	fbb3 f3f1 	udiv	r3, r3, r1
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f93b 	bl	8000bba <HAL_SYSTICK_Config>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e00e      	b.n	800096c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d80a      	bhi.n	800096a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f000 f903 	bl	8000b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <HAL_InitTick+0x5c>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000000 	.word	0x20000000
 8000978:	20000008 	.word	0x20000008
 800097c:	20000004 	.word	0x20000004

08000980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_IncTick+0x1c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_IncTick+0x20>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <HAL_IncTick+0x20>)
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000b14 	.word	0x20000b14

080009a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <HAL_GetTick+0x10>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	20000b14 	.word	0x20000b14

080009b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	60d3      	str	r3, [r2, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <__NVIC_GetPriorityGrouping+0x18>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	f003 0307 	and.w	r3, r3, #7
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db0b      	blt.n	8000a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	f003 021f 	and.w	r2, r3, #31
 8000a34:	4906      	ldr	r1, [pc, #24]	; (8000a50 <__NVIC_EnableIRQ+0x34>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	e000e100 	.word	0xe000e100

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db0a      	blt.n	8000a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <__NVIC_SetPriority+0x4c>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	440b      	add	r3, r1
 8000a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7c:	e00a      	b.n	8000a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4908      	ldr	r1, [pc, #32]	; (8000aa4 <__NVIC_SetPriority+0x50>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	3b04      	subs	r3, #4
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	761a      	strb	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	bf28      	it	cs
 8000ac6:	2304      	movcs	r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3304      	adds	r3, #4
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f7ff ff90 	bl	8000a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff2d 	bl	80009b8 <__NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b78:	f7ff ff42 	bl	8000a00 <__NVIC_GetPriorityGrouping>
 8000b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f7ff ff90 	bl	8000aa8 <NVIC_EncodePriority>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff5f 	bl	8000a54 <__NVIC_SetPriority>
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff35 	bl	8000a1c <__NVIC_EnableIRQ>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffa2 	bl	8000b0c <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d005      	beq.n	8000bf6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2204      	movs	r2, #4
 8000bee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e051      	b.n	8000c9a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 020e 	bic.w	r2, r2, #14
 8000c04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f022 0201 	bic.w	r2, r2, #1
 8000c14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a22      	ldr	r2, [pc, #136]	; (8000ca4 <HAL_DMA_Abort_IT+0xd0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d029      	beq.n	8000c74 <HAL_DMA_Abort_IT+0xa0>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a20      	ldr	r2, [pc, #128]	; (8000ca8 <HAL_DMA_Abort_IT+0xd4>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d022      	beq.n	8000c70 <HAL_DMA_Abort_IT+0x9c>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a1f      	ldr	r2, [pc, #124]	; (8000cac <HAL_DMA_Abort_IT+0xd8>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d01a      	beq.n	8000c6a <HAL_DMA_Abort_IT+0x96>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a1d      	ldr	r2, [pc, #116]	; (8000cb0 <HAL_DMA_Abort_IT+0xdc>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d012      	beq.n	8000c64 <HAL_DMA_Abort_IT+0x90>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <HAL_DMA_Abort_IT+0xe0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d00a      	beq.n	8000c5e <HAL_DMA_Abort_IT+0x8a>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <HAL_DMA_Abort_IT+0xe4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d102      	bne.n	8000c58 <HAL_DMA_Abort_IT+0x84>
 8000c52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c56:	e00e      	b.n	8000c76 <HAL_DMA_Abort_IT+0xa2>
 8000c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c5c:	e00b      	b.n	8000c76 <HAL_DMA_Abort_IT+0xa2>
 8000c5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c62:	e008      	b.n	8000c76 <HAL_DMA_Abort_IT+0xa2>
 8000c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c68:	e005      	b.n	8000c76 <HAL_DMA_Abort_IT+0xa2>
 8000c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6e:	e002      	b.n	8000c76 <HAL_DMA_Abort_IT+0xa2>
 8000c70:	2310      	movs	r3, #16
 8000c72:	e000      	b.n	8000c76 <HAL_DMA_Abort_IT+0xa2>
 8000c74:	2301      	movs	r3, #1
 8000c76:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <HAL_DMA_Abort_IT+0xe8>)
 8000c78:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	4798      	blx	r3
    } 
  }
  return status;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40020008 	.word	0x40020008
 8000ca8:	4002001c 	.word	0x4002001c
 8000cac:	40020030 	.word	0x40020030
 8000cb0:	40020044 	.word	0x40020044
 8000cb4:	40020058 	.word	0x40020058
 8000cb8:	4002006c 	.word	0x4002006c
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b08b      	sub	sp, #44	; 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd2:	e127      	b.n	8000f24 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 8116 	bne.w	8000f1e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b12      	cmp	r3, #18
 8000cf8:	d034      	beq.n	8000d64 <HAL_GPIO_Init+0xa4>
 8000cfa:	2b12      	cmp	r3, #18
 8000cfc:	d80d      	bhi.n	8000d1a <HAL_GPIO_Init+0x5a>
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d02b      	beq.n	8000d5a <HAL_GPIO_Init+0x9a>
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d804      	bhi.n	8000d10 <HAL_GPIO_Init+0x50>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d031      	beq.n	8000d6e <HAL_GPIO_Init+0xae>
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d01c      	beq.n	8000d48 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d0e:	e048      	b.n	8000da2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	d043      	beq.n	8000d9c <HAL_GPIO_Init+0xdc>
 8000d14:	2b11      	cmp	r3, #17
 8000d16:	d01b      	beq.n	8000d50 <HAL_GPIO_Init+0x90>
          break;
 8000d18:	e043      	b.n	8000da2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d1a:	4a89      	ldr	r2, [pc, #548]	; (8000f40 <HAL_GPIO_Init+0x280>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d026      	beq.n	8000d6e <HAL_GPIO_Init+0xae>
 8000d20:	4a87      	ldr	r2, [pc, #540]	; (8000f40 <HAL_GPIO_Init+0x280>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d806      	bhi.n	8000d34 <HAL_GPIO_Init+0x74>
 8000d26:	4a87      	ldr	r2, [pc, #540]	; (8000f44 <HAL_GPIO_Init+0x284>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d020      	beq.n	8000d6e <HAL_GPIO_Init+0xae>
 8000d2c:	4a86      	ldr	r2, [pc, #536]	; (8000f48 <HAL_GPIO_Init+0x288>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d01d      	beq.n	8000d6e <HAL_GPIO_Init+0xae>
          break;
 8000d32:	e036      	b.n	8000da2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d34:	4a85      	ldr	r2, [pc, #532]	; (8000f4c <HAL_GPIO_Init+0x28c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d019      	beq.n	8000d6e <HAL_GPIO_Init+0xae>
 8000d3a:	4a85      	ldr	r2, [pc, #532]	; (8000f50 <HAL_GPIO_Init+0x290>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d016      	beq.n	8000d6e <HAL_GPIO_Init+0xae>
 8000d40:	4a84      	ldr	r2, [pc, #528]	; (8000f54 <HAL_GPIO_Init+0x294>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d013      	beq.n	8000d6e <HAL_GPIO_Init+0xae>
          break;
 8000d46:	e02c      	b.n	8000da2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	623b      	str	r3, [r7, #32]
          break;
 8000d4e:	e028      	b.n	8000da2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	3304      	adds	r3, #4
 8000d56:	623b      	str	r3, [r7, #32]
          break;
 8000d58:	e023      	b.n	8000da2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	3308      	adds	r3, #8
 8000d60:	623b      	str	r3, [r7, #32]
          break;
 8000d62:	e01e      	b.n	8000da2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	330c      	adds	r3, #12
 8000d6a:	623b      	str	r3, [r7, #32]
          break;
 8000d6c:	e019      	b.n	8000da2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d102      	bne.n	8000d7c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d76:	2304      	movs	r3, #4
 8000d78:	623b      	str	r3, [r7, #32]
          break;
 8000d7a:	e012      	b.n	8000da2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d105      	bne.n	8000d90 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d84:	2308      	movs	r3, #8
 8000d86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69fa      	ldr	r2, [r7, #28]
 8000d8c:	611a      	str	r2, [r3, #16]
          break;
 8000d8e:	e008      	b.n	8000da2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d90:	2308      	movs	r3, #8
 8000d92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69fa      	ldr	r2, [r7, #28]
 8000d98:	615a      	str	r2, [r3, #20]
          break;
 8000d9a:	e002      	b.n	8000da2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
          break;
 8000da0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	2bff      	cmp	r3, #255	; 0xff
 8000da6:	d801      	bhi.n	8000dac <HAL_GPIO_Init+0xec>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	e001      	b.n	8000db0 <HAL_GPIO_Init+0xf0>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3304      	adds	r3, #4
 8000db0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	2bff      	cmp	r3, #255	; 0xff
 8000db6:	d802      	bhi.n	8000dbe <HAL_GPIO_Init+0xfe>
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	e002      	b.n	8000dc4 <HAL_GPIO_Init+0x104>
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc0:	3b08      	subs	r3, #8
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	210f      	movs	r1, #15
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	6a39      	ldr	r1, [r7, #32]
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	431a      	orrs	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 8096 	beq.w	8000f1e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000df2:	4b59      	ldr	r3, [pc, #356]	; (8000f58 <HAL_GPIO_Init+0x298>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	4a58      	ldr	r2, [pc, #352]	; (8000f58 <HAL_GPIO_Init+0x298>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6193      	str	r3, [r2, #24]
 8000dfe:	4b56      	ldr	r3, [pc, #344]	; (8000f58 <HAL_GPIO_Init+0x298>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e0a:	4a54      	ldr	r2, [pc, #336]	; (8000f5c <HAL_GPIO_Init+0x29c>)
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e16:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4b      	ldr	r2, [pc, #300]	; (8000f60 <HAL_GPIO_Init+0x2a0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d013      	beq.n	8000e5e <HAL_GPIO_Init+0x19e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4a      	ldr	r2, [pc, #296]	; (8000f64 <HAL_GPIO_Init+0x2a4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d00d      	beq.n	8000e5a <HAL_GPIO_Init+0x19a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a49      	ldr	r2, [pc, #292]	; (8000f68 <HAL_GPIO_Init+0x2a8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d007      	beq.n	8000e56 <HAL_GPIO_Init+0x196>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a48      	ldr	r2, [pc, #288]	; (8000f6c <HAL_GPIO_Init+0x2ac>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d101      	bne.n	8000e52 <HAL_GPIO_Init+0x192>
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e006      	b.n	8000e60 <HAL_GPIO_Init+0x1a0>
 8000e52:	2304      	movs	r3, #4
 8000e54:	e004      	b.n	8000e60 <HAL_GPIO_Init+0x1a0>
 8000e56:	2302      	movs	r3, #2
 8000e58:	e002      	b.n	8000e60 <HAL_GPIO_Init+0x1a0>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e000      	b.n	8000e60 <HAL_GPIO_Init+0x1a0>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e62:	f002 0203 	and.w	r2, r2, #3
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	4093      	lsls	r3, r2
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e70:	493a      	ldr	r1, [pc, #232]	; (8000f5c <HAL_GPIO_Init+0x29c>)
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	089b      	lsrs	r3, r3, #2
 8000e76:	3302      	adds	r3, #2
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d006      	beq.n	8000e98 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e8a:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	4938      	ldr	r1, [pc, #224]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	600b      	str	r3, [r1, #0]
 8000e96:	e006      	b.n	8000ea6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e98:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	4933      	ldr	r1, [pc, #204]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d006      	beq.n	8000ec0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	492e      	ldr	r1, [pc, #184]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	604b      	str	r3, [r1, #4]
 8000ebe:	e006      	b.n	8000ece <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	4929      	ldr	r1, [pc, #164]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000eca:	4013      	ands	r3, r2
 8000ecc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d006      	beq.n	8000ee8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eda:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	4924      	ldr	r1, [pc, #144]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	608b      	str	r3, [r1, #8]
 8000ee6:	e006      	b.n	8000ef6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	491f      	ldr	r1, [pc, #124]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	491a      	ldr	r1, [pc, #104]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60cb      	str	r3, [r1, #12]
 8000f0e:	e006      	b.n	8000f1e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	4915      	ldr	r1, [pc, #84]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	3301      	adds	r3, #1
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f47f aed0 	bne.w	8000cd4 <HAL_GPIO_Init+0x14>
  }
}
 8000f34:	bf00      	nop
 8000f36:	372c      	adds	r7, #44	; 0x2c
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	10210000 	.word	0x10210000
 8000f44:	10110000 	.word	0x10110000
 8000f48:	10120000 	.word	0x10120000
 8000f4c:	10310000 	.word	0x10310000
 8000f50:	10320000 	.word	0x10320000
 8000f54:	10220000 	.word	0x10220000
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010000 	.word	0x40010000
 8000f60:	40010800 	.word	0x40010800
 8000f64:	40010c00 	.word	0x40010c00
 8000f68:	40011000 	.word	0x40011000
 8000f6c:	40011400 	.word	0x40011400
 8000f70:	40010400 	.word	0x40010400

08000f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e26c      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 8087 	beq.w	80010a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f94:	4b92      	ldr	r3, [pc, #584]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 030c 	and.w	r3, r3, #12
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d00c      	beq.n	8000fba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fa0:	4b8f      	ldr	r3, [pc, #572]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d112      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x5e>
 8000fac:	4b8c      	ldr	r3, [pc, #560]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb8:	d10b      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fba:	4b89      	ldr	r3, [pc, #548]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d06c      	beq.n	80010a0 <HAL_RCC_OscConfig+0x12c>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d168      	bne.n	80010a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e246      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fda:	d106      	bne.n	8000fea <HAL_RCC_OscConfig+0x76>
 8000fdc:	4b80      	ldr	r3, [pc, #512]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a7f      	ldr	r2, [pc, #508]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	e02e      	b.n	8001048 <HAL_RCC_OscConfig+0xd4>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_OscConfig+0x98>
 8000ff2:	4b7b      	ldr	r3, [pc, #492]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a7a      	ldr	r2, [pc, #488]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	4b78      	ldr	r3, [pc, #480]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a77      	ldr	r2, [pc, #476]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001004:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e01d      	b.n	8001048 <HAL_RCC_OscConfig+0xd4>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0xbc>
 8001016:	4b72      	ldr	r3, [pc, #456]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a71      	ldr	r2, [pc, #452]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b6f      	ldr	r3, [pc, #444]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a6e      	ldr	r2, [pc, #440]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e00b      	b.n	8001048 <HAL_RCC_OscConfig+0xd4>
 8001030:	4b6b      	ldr	r3, [pc, #428]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a6a      	ldr	r2, [pc, #424]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b68      	ldr	r3, [pc, #416]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a67      	ldr	r2, [pc, #412]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001046:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d013      	beq.n	8001078 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fca8 	bl	80009a4 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fca4 	bl	80009a4 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	; 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e1fa      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	4b5d      	ldr	r3, [pc, #372]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0xe4>
 8001076:	e014      	b.n	80010a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fc94 	bl	80009a4 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fc90 	bl	80009a4 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	; 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e1e6      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001092:	4b53      	ldr	r3, [pc, #332]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0x10c>
 800109e:	e000      	b.n	80010a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d063      	beq.n	8001176 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ae:	4b4c      	ldr	r3, [pc, #304]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00b      	beq.n	80010d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010ba:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d11c      	bne.n	8001100 <HAL_RCC_OscConfig+0x18c>
 80010c6:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d116      	bne.n	8001100 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d2:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <HAL_RCC_OscConfig+0x176>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d001      	beq.n	80010ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e1ba      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ea:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4939      	ldr	r1, [pc, #228]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fe:	e03a      	b.n	8001176 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d020      	beq.n	800114a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001108:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <HAL_RCC_OscConfig+0x270>)
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110e:	f7ff fc49 	bl	80009a4 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001116:	f7ff fc45 	bl	80009a4 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e19b      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4927      	ldr	r1, [pc, #156]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001144:	4313      	orrs	r3, r2
 8001146:	600b      	str	r3, [r1, #0]
 8001148:	e015      	b.n	8001176 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <HAL_RCC_OscConfig+0x270>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fc28 	bl	80009a4 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001158:	f7ff fc24 	bl	80009a4 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e17a      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d03a      	beq.n	80011f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d019      	beq.n	80011be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_RCC_OscConfig+0x274>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001190:	f7ff fc08 	bl	80009a4 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001198:	f7ff fc04 	bl	80009a4 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e15a      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 fada 	bl	8001770 <RCC_Delay>
 80011bc:	e01c      	b.n	80011f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_RCC_OscConfig+0x274>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c4:	f7ff fbee 	bl	80009a4 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ca:	e00f      	b.n	80011ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011cc:	f7ff fbea 	bl	80009a4 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d908      	bls.n	80011ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e140      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
 80011e4:	42420000 	.word	0x42420000
 80011e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ec:	4b9e      	ldr	r3, [pc, #632]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e9      	bne.n	80011cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80a6 	beq.w	8001352 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800120a:	4b97      	ldr	r3, [pc, #604]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10d      	bne.n	8001232 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b94      	ldr	r3, [pc, #592]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	4a93      	ldr	r2, [pc, #588]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	61d3      	str	r3, [r2, #28]
 8001222:	4b91      	ldr	r3, [pc, #580]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800122e:	2301      	movs	r3, #1
 8001230:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001232:	4b8e      	ldr	r3, [pc, #568]	; (800146c <HAL_RCC_OscConfig+0x4f8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	2b00      	cmp	r3, #0
 800123c:	d118      	bne.n	8001270 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800123e:	4b8b      	ldr	r3, [pc, #556]	; (800146c <HAL_RCC_OscConfig+0x4f8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a8a      	ldr	r2, [pc, #552]	; (800146c <HAL_RCC_OscConfig+0x4f8>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800124a:	f7ff fbab 	bl	80009a4 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001252:	f7ff fba7 	bl	80009a4 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b64      	cmp	r3, #100	; 0x64
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e0fd      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001264:	4b81      	ldr	r3, [pc, #516]	; (800146c <HAL_RCC_OscConfig+0x4f8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d106      	bne.n	8001286 <HAL_RCC_OscConfig+0x312>
 8001278:	4b7b      	ldr	r3, [pc, #492]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4a7a      	ldr	r2, [pc, #488]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6213      	str	r3, [r2, #32]
 8001284:	e02d      	b.n	80012e2 <HAL_RCC_OscConfig+0x36e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x334>
 800128e:	4b76      	ldr	r3, [pc, #472]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	4a75      	ldr	r2, [pc, #468]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	6213      	str	r3, [r2, #32]
 800129a:	4b73      	ldr	r3, [pc, #460]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	4a72      	ldr	r2, [pc, #456]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012a0:	f023 0304 	bic.w	r3, r3, #4
 80012a4:	6213      	str	r3, [r2, #32]
 80012a6:	e01c      	b.n	80012e2 <HAL_RCC_OscConfig+0x36e>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	d10c      	bne.n	80012ca <HAL_RCC_OscConfig+0x356>
 80012b0:	4b6d      	ldr	r3, [pc, #436]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	4a6c      	ldr	r2, [pc, #432]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6213      	str	r3, [r2, #32]
 80012bc:	4b6a      	ldr	r3, [pc, #424]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4a69      	ldr	r2, [pc, #420]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6213      	str	r3, [r2, #32]
 80012c8:	e00b      	b.n	80012e2 <HAL_RCC_OscConfig+0x36e>
 80012ca:	4b67      	ldr	r3, [pc, #412]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	4a66      	ldr	r2, [pc, #408]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	f023 0301 	bic.w	r3, r3, #1
 80012d4:	6213      	str	r3, [r2, #32]
 80012d6:	4b64      	ldr	r3, [pc, #400]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4a63      	ldr	r2, [pc, #396]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80012dc:	f023 0304 	bic.w	r3, r3, #4
 80012e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d015      	beq.n	8001316 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fb5b 	bl	80009a4 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f0:	e00a      	b.n	8001308 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7ff fb57 	bl	80009a4 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001300:	4293      	cmp	r3, r2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e0ab      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001308:	4b57      	ldr	r3, [pc, #348]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0ee      	beq.n	80012f2 <HAL_RCC_OscConfig+0x37e>
 8001314:	e014      	b.n	8001340 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fb45 	bl	80009a4 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131c:	e00a      	b.n	8001334 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131e:	f7ff fb41 	bl	80009a4 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	f241 3288 	movw	r2, #5000	; 0x1388
 800132c:	4293      	cmp	r3, r2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e095      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001334:	4b4c      	ldr	r3, [pc, #304]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1ee      	bne.n	800131e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d105      	bne.n	8001352 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001346:	4b48      	ldr	r3, [pc, #288]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	4a47      	ldr	r2, [pc, #284]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800134c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001350:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8081 	beq.w	800145e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800135c:	4b42      	ldr	r3, [pc, #264]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	2b08      	cmp	r3, #8
 8001366:	d061      	beq.n	800142c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d146      	bne.n	80013fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001370:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <HAL_RCC_OscConfig+0x4fc>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff fb15 	bl	80009a4 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff fb11 	bl	80009a4 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e067      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001390:	4b35      	ldr	r3, [pc, #212]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f0      	bne.n	800137e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a4:	d108      	bne.n	80013b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013a6:	4b30      	ldr	r3, [pc, #192]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	492d      	ldr	r1, [pc, #180]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b8:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a19      	ldr	r1, [r3, #32]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	430b      	orrs	r3, r1
 80013ca:	4927      	ldr	r1, [pc, #156]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <HAL_RCC_OscConfig+0x4fc>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fae5 	bl	80009a4 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013de:	f7ff fae1 	bl	80009a4 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e037      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x46a>
 80013fc:	e02f      	b.n	800145e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_RCC_OscConfig+0x4fc>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff face 	bl	80009a4 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff faca 	bl	80009a4 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e020      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x498>
 800142a:	e018      	b.n	800145e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e013      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_RCC_OscConfig+0x4f4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	429a      	cmp	r2, r3
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d001      	beq.n	800145e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40021000 	.word	0x40021000
 800146c:	40007000 	.word	0x40007000
 8001470:	42420060 	.word	0x42420060

08001474 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0d0      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001488:	4b6a      	ldr	r3, [pc, #424]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d910      	bls.n	80014b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	4b67      	ldr	r3, [pc, #412]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 0207 	bic.w	r2, r3, #7
 800149e:	4965      	ldr	r1, [pc, #404]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a6:	4b63      	ldr	r3, [pc, #396]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0b8      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d020      	beq.n	8001506 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d0:	4b59      	ldr	r3, [pc, #356]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a58      	ldr	r2, [pc, #352]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e8:	4b53      	ldr	r3, [pc, #332]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4a52      	ldr	r2, [pc, #328]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f4:	4b50      	ldr	r3, [pc, #320]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	494d      	ldr	r1, [pc, #308]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d040      	beq.n	8001594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4b47      	ldr	r3, [pc, #284]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d115      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e07f      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e073      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001542:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e06b      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001552:	4b39      	ldr	r3, [pc, #228]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f023 0203 	bic.w	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4936      	ldr	r1, [pc, #216]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001564:	f7ff fa1e 	bl	80009a4 <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	e00a      	b.n	8001582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	f7ff fa1a 	bl	80009a4 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e053      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 020c 	and.w	r2, r3, #12
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	429a      	cmp	r2, r3
 8001592:	d1eb      	bne.n	800156c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d210      	bcs.n	80015c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 0207 	bic.w	r2, r3, #7
 80015aa:	4922      	ldr	r1, [pc, #136]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e032      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4916      	ldr	r1, [pc, #88]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d009      	beq.n	8001602 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	490e      	ldr	r1, [pc, #56]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001602:	f000 f821 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8001606:	4601      	mov	r1, r0
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_RCC_ClockConfig+0x1c8>)
 8001614:	5cd3      	ldrb	r3, [r2, r3]
 8001616:	fa21 f303 	lsr.w	r3, r1, r3
 800161a:	4a09      	ldr	r2, [pc, #36]	; (8001640 <HAL_RCC_ClockConfig+0x1cc>)
 800161c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_RCC_ClockConfig+0x1d0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f97c 	bl	8000920 <HAL_InitTick>

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40022000 	.word	0x40022000
 8001638:	40021000 	.word	0x40021000
 800163c:	080032fc 	.word	0x080032fc
 8001640:	20000000 	.word	0x20000000
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001648:	b490      	push	{r4, r7}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001650:	1d3c      	adds	r4, r7, #4
 8001652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001654:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001672:	4b23      	ldr	r3, [pc, #140]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b04      	cmp	r3, #4
 8001680:	d002      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x40>
 8001682:	2b08      	cmp	r3, #8
 8001684:	d003      	beq.n	800168e <HAL_RCC_GetSysClockFreq+0x46>
 8001686:	e02d      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_RCC_GetSysClockFreq+0xbc>)
 800168a:	623b      	str	r3, [r7, #32]
      break;
 800168c:	e02d      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	0c9b      	lsrs	r3, r3, #18
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800169a:	4413      	add	r3, r2
 800169c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	0c5b      	lsrs	r3, r3, #17
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016ba:	4413      	add	r3, r2
 80016bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016c6:	fb02 f203 	mul.w	r2, r2, r3
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
 80016d2:	e004      	b.n	80016de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	4a0c      	ldr	r2, [pc, #48]	; (8001708 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	623b      	str	r3, [r7, #32]
      break;
 80016e2:	e002      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016e6:	623b      	str	r3, [r7, #32]
      break;
 80016e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ea:	6a3b      	ldr	r3, [r7, #32]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc90      	pop	{r4, r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	080032e8 	.word	0x080032e8
 80016fc:	080032f8 	.word	0x080032f8
 8001700:	40021000 	.word	0x40021000
 8001704:	007a1200 	.word	0x007a1200
 8001708:	003d0900 	.word	0x003d0900

0800170c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <HAL_RCC_GetHCLKFreq+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000000 	.word	0x20000000

08001720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001724:	f7ff fff2 	bl	800170c <HAL_RCC_GetHCLKFreq>
 8001728:	4601      	mov	r1, r0
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	0a1b      	lsrs	r3, r3, #8
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	4a03      	ldr	r2, [pc, #12]	; (8001744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001736:	5cd3      	ldrb	r3, [r2, r3]
 8001738:	fa21 f303 	lsr.w	r3, r1, r3
}
 800173c:	4618      	mov	r0, r3
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	0800330c 	.word	0x0800330c

08001748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800174c:	f7ff ffde 	bl	800170c <HAL_RCC_GetHCLKFreq>
 8001750:	4601      	mov	r1, r0
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	0adb      	lsrs	r3, r3, #11
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	4a03      	ldr	r2, [pc, #12]	; (800176c <HAL_RCC_GetPCLK2Freq+0x24>)
 800175e:	5cd3      	ldrb	r3, [r2, r3]
 8001760:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001764:	4618      	mov	r0, r3
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40021000 	.word	0x40021000
 800176c:	0800330c 	.word	0x0800330c

08001770 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <RCC_Delay+0x34>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <RCC_Delay+0x38>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0a5b      	lsrs	r3, r3, #9
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800178c:	bf00      	nop
  }
  while (Delay --);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1e5a      	subs	r2, r3, #1
 8001792:	60fa      	str	r2, [r7, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f9      	bne.n	800178c <RCC_Delay+0x1c>
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000000 	.word	0x20000000
 80017a8:	10624dd3 	.word	0x10624dd3

080017ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e03f      	b.n	800183e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7fe ff08 	bl	80005e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2224      	movs	r2, #36	; 0x24
 80017dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 fb8d 	bl	8001f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001804:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001814:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001824:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2220      	movs	r2, #32
 8001830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2220      	movs	r2, #32
 8001838:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b08a      	sub	sp, #40	; 0x28
 800184a:	af02      	add	r7, sp, #8
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	4613      	mov	r3, r2
 8001854:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b20      	cmp	r3, #32
 8001864:	d17c      	bne.n	8001960 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <HAL_UART_Transmit+0x2c>
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e075      	b.n	8001962 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_UART_Transmit+0x3e>
 8001880:	2302      	movs	r3, #2
 8001882:	e06e      	b.n	8001962 <HAL_UART_Transmit+0x11c>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2221      	movs	r2, #33	; 0x21
 8001896:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800189a:	f7ff f883 	bl	80009a4 <HAL_GetTick>
 800189e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	88fa      	ldrh	r2, [r7, #6]
 80018a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	88fa      	ldrh	r2, [r7, #6]
 80018aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b4:	d108      	bne.n	80018c8 <HAL_UART_Transmit+0x82>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d104      	bne.n	80018c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	e003      	b.n	80018d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80018d8:	e02a      	b.n	8001930 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2200      	movs	r2, #0
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f9b0 	bl	8001c4a <UART_WaitOnFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e036      	b.n	8001962 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10b      	bne.n	8001912 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001908:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	3302      	adds	r3, #2
 800190e:	61bb      	str	r3, [r7, #24]
 8001910:	e007      	b.n	8001922 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	781a      	ldrb	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	3301      	adds	r3, #1
 8001920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001926:	b29b      	uxth	r3, r3
 8001928:	3b01      	subs	r3, #1
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001934:	b29b      	uxth	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1cf      	bne.n	80018da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2200      	movs	r2, #0
 8001942:	2140      	movs	r1, #64	; 0x40
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 f980 	bl	8001c4a <UART_WaitOnFlagUntilTimeout>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e006      	b.n	8001962 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2220      	movs	r2, #32
 8001958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	e000      	b.n	8001962 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001960:	2302      	movs	r3, #2
  }
}
 8001962:	4618      	mov	r0, r3
 8001964:	3720      	adds	r7, #32
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	4613      	mov	r3, r2
 8001976:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b20      	cmp	r3, #32
 8001982:	d140      	bne.n	8001a06 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <HAL_UART_Receive_IT+0x26>
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e039      	b.n	8001a08 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_UART_Receive_IT+0x38>
 800199e:	2302      	movs	r3, #2
 80019a0:	e032      	b.n	8001a08 <HAL_UART_Receive_IT+0x9e>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	88fa      	ldrh	r2, [r7, #6]
 80019b4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	88fa      	ldrh	r2, [r7, #6]
 80019ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2222      	movs	r2, #34	; 0x22
 80019c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019e0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695a      	ldr	r2, [r3, #20]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0201 	orr.w	r2, r2, #1
 80019f0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0220 	orr.w	r2, r2, #32
 8001a00:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001a06:	2302      	movs	r3, #2
  }
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
	...

08001a14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10d      	bne.n	8001a66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f003 0320 	and.w	r3, r3, #32
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d008      	beq.n	8001a66 <HAL_UART_IRQHandler+0x52>
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	f003 0320 	and.w	r3, r3, #32
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f9d5 	bl	8001e0e <UART_Receive_IT>
      return;
 8001a64:	e0d1      	b.n	8001c0a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80b0 	beq.w	8001bce <HAL_UART_IRQHandler+0x1ba>
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d105      	bne.n	8001a84 <HAL_UART_IRQHandler+0x70>
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 80a5 	beq.w	8001bce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00a      	beq.n	8001aa4 <HAL_UART_IRQHandler+0x90>
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9c:	f043 0201 	orr.w	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00a      	beq.n	8001ac4 <HAL_UART_IRQHandler+0xb0>
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abc:	f043 0202 	orr.w	r2, r3, #2
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00a      	beq.n	8001ae4 <HAL_UART_IRQHandler+0xd0>
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001adc:	f043 0204 	orr.w	r2, r3, #4
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00f      	beq.n	8001b0e <HAL_UART_IRQHandler+0xfa>
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	f003 0320 	and.w	r3, r3, #32
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d104      	bne.n	8001b02 <HAL_UART_IRQHandler+0xee>
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b06:	f043 0208 	orr.w	r2, r3, #8
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d078      	beq.n	8001c08 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <HAL_UART_IRQHandler+0x11c>
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f96f 	bl	8001e0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	bf14      	ite	ne
 8001b3e:	2301      	movne	r3, #1
 8001b40:	2300      	moveq	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <HAL_UART_IRQHandler+0x144>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d031      	beq.n	8001bbc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f8c0 	bl	8001cde <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d023      	beq.n	8001bb4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b7a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d013      	beq.n	8001bac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b88:	4a21      	ldr	r2, [pc, #132]	; (8001c10 <HAL_UART_IRQHandler+0x1fc>)
 8001b8a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff f81f 	bl	8000bd4 <HAL_DMA_Abort_IT>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d016      	beq.n	8001bca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001baa:	e00e      	b.n	8001bca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f843 	bl	8001c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bb2:	e00a      	b.n	8001bca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f83f 	bl	8001c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bba:	e006      	b.n	8001bca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f83b 	bl	8001c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001bc8:	e01e      	b.n	8001c08 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bca:	bf00      	nop
    return;
 8001bcc:	e01c      	b.n	8001c08 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_UART_IRQHandler+0x1d6>
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8ac 	bl	8001d40 <UART_Transmit_IT>
    return;
 8001be8:	e00f      	b.n	8001c0a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00a      	beq.n	8001c0a <HAL_UART_IRQHandler+0x1f6>
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f8ed 	bl	8001dde <UART_EndTransmit_IT>
    return;
 8001c04:	bf00      	nop
 8001c06:	e000      	b.n	8001c0a <HAL_UART_IRQHandler+0x1f6>
    return;
 8001c08:	bf00      	nop
  }
}
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	08001d19 	.word	0x08001d19

08001c14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	4613      	mov	r3, r2
 8001c58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c5a:	e02c      	b.n	8001cb6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c62:	d028      	beq.n	8001cb6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d007      	beq.n	8001c7a <UART_WaitOnFlagUntilTimeout+0x30>
 8001c6a:	f7fe fe9b 	bl	80009a4 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d21d      	bcs.n	8001cb6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c88:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0201 	bic.w	r2, r2, #1
 8001c98:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e00f      	b.n	8001cd6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	bf0c      	ite	eq
 8001cc6:	2301      	moveq	r3, #1
 8001cc8:	2300      	movne	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d0c3      	beq.n	8001c5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001cf4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0201 	bic.w	r2, r2, #1
 8001d04:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f7ff ff80 	bl	8001c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b21      	cmp	r3, #33	; 0x21
 8001d52:	d13e      	bne.n	8001dd2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5c:	d114      	bne.n	8001d88 <UART_Transmit_IT+0x48>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d110      	bne.n	8001d88 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	1c9a      	adds	r2, r3, #2
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	621a      	str	r2, [r3, #32]
 8001d86:	e008      	b.n	8001d9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	1c59      	adds	r1, r3, #1
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6211      	str	r1, [r2, #32]
 8001d92:	781a      	ldrb	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4619      	mov	r1, r3
 8001da8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10f      	bne.n	8001dce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dcc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e000      	b.n	8001dd4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001dd2:	2302      	movs	r3, #2
  }
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001df4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ff08 	bl	8001c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b22      	cmp	r3, #34	; 0x22
 8001e20:	d170      	bne.n	8001f04 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2a:	d117      	bne.n	8001e5c <UART_Receive_IT+0x4e>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d113      	bne.n	8001e5c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	1c9a      	adds	r2, r3, #2
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28
 8001e5a:	e026      	b.n	8001eaa <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e6e:	d007      	beq.n	8001e80 <UART_Receive_IT+0x72>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10a      	bne.n	8001e8e <UART_Receive_IT+0x80>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d106      	bne.n	8001e8e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	701a      	strb	r2, [r3, #0]
 8001e8c:	e008      	b.n	8001ea0 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d120      	bne.n	8001f00 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0220 	bic.w	r2, r2, #32
 8001ecc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001edc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0201 	bic.w	r2, r2, #1
 8001eec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff fe95 	bl	8001c26 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	e002      	b.n	8001f06 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e000      	b.n	8001f06 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
  }
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f4a:	f023 030c 	bic.w	r3, r3, #12
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699a      	ldr	r2, [r3, #24]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a2c      	ldr	r2, [pc, #176]	; (8002024 <UART_SetConfig+0x114>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d103      	bne.n	8001f80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f78:	f7ff fbe6 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	e002      	b.n	8001f86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f80:	f7ff fbce 	bl	8001720 <HAL_RCC_GetPCLK1Freq>
 8001f84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009a      	lsls	r2, r3, #2
 8001f90:	441a      	add	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	4a22      	ldr	r2, [pc, #136]	; (8002028 <UART_SetConfig+0x118>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	0119      	lsls	r1, r3, #4
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	009a      	lsls	r2, r3, #2
 8001fb0:	441a      	add	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <UART_SetConfig+0x118>)
 8001fbe:	fba3 0302 	umull	r0, r3, r3, r2
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	2064      	movs	r0, #100	; 0x64
 8001fc6:	fb00 f303 	mul.w	r3, r0, r3
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	3332      	adds	r3, #50	; 0x32
 8001fd0:	4a15      	ldr	r2, [pc, #84]	; (8002028 <UART_SetConfig+0x118>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fdc:	4419      	add	r1, r3
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009a      	lsls	r2, r3, #2
 8001fe8:	441a      	add	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <UART_SetConfig+0x118>)
 8001ff6:	fba3 0302 	umull	r0, r3, r3, r2
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2064      	movs	r0, #100	; 0x64
 8001ffe:	fb00 f303 	mul.w	r3, r0, r3
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	3332      	adds	r3, #50	; 0x32
 8002008:	4a07      	ldr	r2, [pc, #28]	; (8002028 <UART_SetConfig+0x118>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	f003 020f 	and.w	r2, r3, #15
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	440a      	add	r2, r1
 800201a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40013800 	.word	0x40013800
 8002028:	51eb851f 	.word	0x51eb851f

0800202c <atoi>:
 800202c:	220a      	movs	r2, #10
 800202e:	2100      	movs	r1, #0
 8002030:	f000 b986 	b.w	8002340 <strtol>

08002034 <__errno>:
 8002034:	4b01      	ldr	r3, [pc, #4]	; (800203c <__errno+0x8>)
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	2000000c 	.word	0x2000000c

08002040 <__libc_init_array>:
 8002040:	b570      	push	{r4, r5, r6, lr}
 8002042:	2500      	movs	r5, #0
 8002044:	4e0c      	ldr	r6, [pc, #48]	; (8002078 <__libc_init_array+0x38>)
 8002046:	4c0d      	ldr	r4, [pc, #52]	; (800207c <__libc_init_array+0x3c>)
 8002048:	1ba4      	subs	r4, r4, r6
 800204a:	10a4      	asrs	r4, r4, #2
 800204c:	42a5      	cmp	r5, r4
 800204e:	d109      	bne.n	8002064 <__libc_init_array+0x24>
 8002050:	f001 f88c 	bl	800316c <_init>
 8002054:	2500      	movs	r5, #0
 8002056:	4e0a      	ldr	r6, [pc, #40]	; (8002080 <__libc_init_array+0x40>)
 8002058:	4c0a      	ldr	r4, [pc, #40]	; (8002084 <__libc_init_array+0x44>)
 800205a:	1ba4      	subs	r4, r4, r6
 800205c:	10a4      	asrs	r4, r4, #2
 800205e:	42a5      	cmp	r5, r4
 8002060:	d105      	bne.n	800206e <__libc_init_array+0x2e>
 8002062:	bd70      	pop	{r4, r5, r6, pc}
 8002064:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002068:	4798      	blx	r3
 800206a:	3501      	adds	r5, #1
 800206c:	e7ee      	b.n	800204c <__libc_init_array+0xc>
 800206e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002072:	4798      	blx	r3
 8002074:	3501      	adds	r5, #1
 8002076:	e7f2      	b.n	800205e <__libc_init_array+0x1e>
 8002078:	080034b8 	.word	0x080034b8
 800207c:	080034b8 	.word	0x080034b8
 8002080:	080034b8 	.word	0x080034b8
 8002084:	080034bc 	.word	0x080034bc

08002088 <memset>:
 8002088:	4603      	mov	r3, r0
 800208a:	4402      	add	r2, r0
 800208c:	4293      	cmp	r3, r2
 800208e:	d100      	bne.n	8002092 <memset+0xa>
 8002090:	4770      	bx	lr
 8002092:	f803 1b01 	strb.w	r1, [r3], #1
 8002096:	e7f9      	b.n	800208c <memset+0x4>

08002098 <iprintf>:
 8002098:	b40f      	push	{r0, r1, r2, r3}
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <iprintf+0x2c>)
 800209c:	b513      	push	{r0, r1, r4, lr}
 800209e:	681c      	ldr	r4, [r3, #0]
 80020a0:	b124      	cbz	r4, 80020ac <iprintf+0x14>
 80020a2:	69a3      	ldr	r3, [r4, #24]
 80020a4:	b913      	cbnz	r3, 80020ac <iprintf+0x14>
 80020a6:	4620      	mov	r0, r4
 80020a8:	f000 fb10 	bl	80026cc <__sinit>
 80020ac:	ab05      	add	r3, sp, #20
 80020ae:	9a04      	ldr	r2, [sp, #16]
 80020b0:	68a1      	ldr	r1, [r4, #8]
 80020b2:	4620      	mov	r0, r4
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	f000 fce3 	bl	8002a80 <_vfiprintf_r>
 80020ba:	b002      	add	sp, #8
 80020bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020c0:	b004      	add	sp, #16
 80020c2:	4770      	bx	lr
 80020c4:	2000000c 	.word	0x2000000c

080020c8 <_puts_r>:
 80020c8:	b570      	push	{r4, r5, r6, lr}
 80020ca:	460e      	mov	r6, r1
 80020cc:	4605      	mov	r5, r0
 80020ce:	b118      	cbz	r0, 80020d8 <_puts_r+0x10>
 80020d0:	6983      	ldr	r3, [r0, #24]
 80020d2:	b90b      	cbnz	r3, 80020d8 <_puts_r+0x10>
 80020d4:	f000 fafa 	bl	80026cc <__sinit>
 80020d8:	69ab      	ldr	r3, [r5, #24]
 80020da:	68ac      	ldr	r4, [r5, #8]
 80020dc:	b913      	cbnz	r3, 80020e4 <_puts_r+0x1c>
 80020de:	4628      	mov	r0, r5
 80020e0:	f000 faf4 	bl	80026cc <__sinit>
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <_puts_r+0xac>)
 80020e6:	429c      	cmp	r4, r3
 80020e8:	d117      	bne.n	800211a <_puts_r+0x52>
 80020ea:	686c      	ldr	r4, [r5, #4]
 80020ec:	89a3      	ldrh	r3, [r4, #12]
 80020ee:	071b      	lsls	r3, r3, #28
 80020f0:	d51d      	bpl.n	800212e <_puts_r+0x66>
 80020f2:	6923      	ldr	r3, [r4, #16]
 80020f4:	b1db      	cbz	r3, 800212e <_puts_r+0x66>
 80020f6:	3e01      	subs	r6, #1
 80020f8:	68a3      	ldr	r3, [r4, #8]
 80020fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80020fe:	3b01      	subs	r3, #1
 8002100:	60a3      	str	r3, [r4, #8]
 8002102:	b9e9      	cbnz	r1, 8002140 <_puts_r+0x78>
 8002104:	2b00      	cmp	r3, #0
 8002106:	da2e      	bge.n	8002166 <_puts_r+0x9e>
 8002108:	4622      	mov	r2, r4
 800210a:	210a      	movs	r1, #10
 800210c:	4628      	mov	r0, r5
 800210e:	f000 f92d 	bl	800236c <__swbuf_r>
 8002112:	3001      	adds	r0, #1
 8002114:	d011      	beq.n	800213a <_puts_r+0x72>
 8002116:	200a      	movs	r0, #10
 8002118:	e011      	b.n	800213e <_puts_r+0x76>
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <_puts_r+0xb0>)
 800211c:	429c      	cmp	r4, r3
 800211e:	d101      	bne.n	8002124 <_puts_r+0x5c>
 8002120:	68ac      	ldr	r4, [r5, #8]
 8002122:	e7e3      	b.n	80020ec <_puts_r+0x24>
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <_puts_r+0xb4>)
 8002126:	429c      	cmp	r4, r3
 8002128:	bf08      	it	eq
 800212a:	68ec      	ldreq	r4, [r5, #12]
 800212c:	e7de      	b.n	80020ec <_puts_r+0x24>
 800212e:	4621      	mov	r1, r4
 8002130:	4628      	mov	r0, r5
 8002132:	f000 f96d 	bl	8002410 <__swsetup_r>
 8002136:	2800      	cmp	r0, #0
 8002138:	d0dd      	beq.n	80020f6 <_puts_r+0x2e>
 800213a:	f04f 30ff 	mov.w	r0, #4294967295
 800213e:	bd70      	pop	{r4, r5, r6, pc}
 8002140:	2b00      	cmp	r3, #0
 8002142:	da04      	bge.n	800214e <_puts_r+0x86>
 8002144:	69a2      	ldr	r2, [r4, #24]
 8002146:	429a      	cmp	r2, r3
 8002148:	dc06      	bgt.n	8002158 <_puts_r+0x90>
 800214a:	290a      	cmp	r1, #10
 800214c:	d004      	beq.n	8002158 <_puts_r+0x90>
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	6022      	str	r2, [r4, #0]
 8002154:	7019      	strb	r1, [r3, #0]
 8002156:	e7cf      	b.n	80020f8 <_puts_r+0x30>
 8002158:	4622      	mov	r2, r4
 800215a:	4628      	mov	r0, r5
 800215c:	f000 f906 	bl	800236c <__swbuf_r>
 8002160:	3001      	adds	r0, #1
 8002162:	d1c9      	bne.n	80020f8 <_puts_r+0x30>
 8002164:	e7e9      	b.n	800213a <_puts_r+0x72>
 8002166:	200a      	movs	r0, #10
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	6022      	str	r2, [r4, #0]
 800216e:	7018      	strb	r0, [r3, #0]
 8002170:	e7e5      	b.n	800213e <_puts_r+0x76>
 8002172:	bf00      	nop
 8002174:	08003338 	.word	0x08003338
 8002178:	08003358 	.word	0x08003358
 800217c:	08003318 	.word	0x08003318

08002180 <puts>:
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <puts+0xc>)
 8002182:	4601      	mov	r1, r0
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	f7ff bf9f 	b.w	80020c8 <_puts_r>
 800218a:	bf00      	nop
 800218c:	2000000c 	.word	0x2000000c

08002190 <strcpy>:
 8002190:	4603      	mov	r3, r0
 8002192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002196:	f803 2b01 	strb.w	r2, [r3], #1
 800219a:	2a00      	cmp	r2, #0
 800219c:	d1f9      	bne.n	8002192 <strcpy+0x2>
 800219e:	4770      	bx	lr

080021a0 <strtok>:
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <strtok+0x50>)
 80021a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021a6:	681d      	ldr	r5, [r3, #0]
 80021a8:	4606      	mov	r6, r0
 80021aa:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80021ac:	460f      	mov	r7, r1
 80021ae:	b9b4      	cbnz	r4, 80021de <strtok+0x3e>
 80021b0:	2050      	movs	r0, #80	; 0x50
 80021b2:	f000 fb7d 	bl	80028b0 <malloc>
 80021b6:	65a8      	str	r0, [r5, #88]	; 0x58
 80021b8:	e9c0 4400 	strd	r4, r4, [r0]
 80021bc:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80021c0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80021c4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80021c8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80021cc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80021d0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80021d4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80021d8:	6184      	str	r4, [r0, #24]
 80021da:	7704      	strb	r4, [r0, #28]
 80021dc:	6244      	str	r4, [r0, #36]	; 0x24
 80021de:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80021e0:	4639      	mov	r1, r7
 80021e2:	4630      	mov	r0, r6
 80021e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021e8:	2301      	movs	r3, #1
 80021ea:	f000 b803 	b.w	80021f4 <__strtok_r>
 80021ee:	bf00      	nop
 80021f0:	2000000c 	.word	0x2000000c

080021f4 <__strtok_r>:
 80021f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f6:	b918      	cbnz	r0, 8002200 <__strtok_r+0xc>
 80021f8:	6810      	ldr	r0, [r2, #0]
 80021fa:	b908      	cbnz	r0, 8002200 <__strtok_r+0xc>
 80021fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021fe:	4620      	mov	r0, r4
 8002200:	4604      	mov	r4, r0
 8002202:	460f      	mov	r7, r1
 8002204:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002208:	f817 6b01 	ldrb.w	r6, [r7], #1
 800220c:	b91e      	cbnz	r6, 8002216 <__strtok_r+0x22>
 800220e:	b96d      	cbnz	r5, 800222c <__strtok_r+0x38>
 8002210:	6015      	str	r5, [r2, #0]
 8002212:	4628      	mov	r0, r5
 8002214:	e7f2      	b.n	80021fc <__strtok_r+0x8>
 8002216:	42b5      	cmp	r5, r6
 8002218:	d1f6      	bne.n	8002208 <__strtok_r+0x14>
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1ef      	bne.n	80021fe <__strtok_r+0xa>
 800221e:	6014      	str	r4, [r2, #0]
 8002220:	7003      	strb	r3, [r0, #0]
 8002222:	e7eb      	b.n	80021fc <__strtok_r+0x8>
 8002224:	462b      	mov	r3, r5
 8002226:	e00d      	b.n	8002244 <__strtok_r+0x50>
 8002228:	b926      	cbnz	r6, 8002234 <__strtok_r+0x40>
 800222a:	461c      	mov	r4, r3
 800222c:	4623      	mov	r3, r4
 800222e:	460f      	mov	r7, r1
 8002230:	f813 5b01 	ldrb.w	r5, [r3], #1
 8002234:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002238:	42b5      	cmp	r5, r6
 800223a:	d1f5      	bne.n	8002228 <__strtok_r+0x34>
 800223c:	2d00      	cmp	r5, #0
 800223e:	d0f1      	beq.n	8002224 <__strtok_r+0x30>
 8002240:	2100      	movs	r1, #0
 8002242:	7021      	strb	r1, [r4, #0]
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e7d9      	b.n	80021fc <__strtok_r+0x8>

08002248 <_strtol_l.isra.0>:
 8002248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800224c:	4680      	mov	r8, r0
 800224e:	4689      	mov	r9, r1
 8002250:	4692      	mov	sl, r2
 8002252:	461e      	mov	r6, r3
 8002254:	460f      	mov	r7, r1
 8002256:	463d      	mov	r5, r7
 8002258:	9808      	ldr	r0, [sp, #32]
 800225a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800225e:	f000 fabf 	bl	80027e0 <__locale_ctype_ptr_l>
 8002262:	4420      	add	r0, r4
 8002264:	7843      	ldrb	r3, [r0, #1]
 8002266:	f013 0308 	ands.w	r3, r3, #8
 800226a:	d132      	bne.n	80022d2 <_strtol_l.isra.0+0x8a>
 800226c:	2c2d      	cmp	r4, #45	; 0x2d
 800226e:	d132      	bne.n	80022d6 <_strtol_l.isra.0+0x8e>
 8002270:	2201      	movs	r2, #1
 8002272:	787c      	ldrb	r4, [r7, #1]
 8002274:	1cbd      	adds	r5, r7, #2
 8002276:	2e00      	cmp	r6, #0
 8002278:	d05d      	beq.n	8002336 <_strtol_l.isra.0+0xee>
 800227a:	2e10      	cmp	r6, #16
 800227c:	d109      	bne.n	8002292 <_strtol_l.isra.0+0x4a>
 800227e:	2c30      	cmp	r4, #48	; 0x30
 8002280:	d107      	bne.n	8002292 <_strtol_l.isra.0+0x4a>
 8002282:	782b      	ldrb	r3, [r5, #0]
 8002284:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002288:	2b58      	cmp	r3, #88	; 0x58
 800228a:	d14f      	bne.n	800232c <_strtol_l.isra.0+0xe4>
 800228c:	2610      	movs	r6, #16
 800228e:	786c      	ldrb	r4, [r5, #1]
 8002290:	3502      	adds	r5, #2
 8002292:	2a00      	cmp	r2, #0
 8002294:	bf14      	ite	ne
 8002296:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800229a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800229e:	2700      	movs	r7, #0
 80022a0:	fbb1 fcf6 	udiv	ip, r1, r6
 80022a4:	4638      	mov	r0, r7
 80022a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80022aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80022ae:	2b09      	cmp	r3, #9
 80022b0:	d817      	bhi.n	80022e2 <_strtol_l.isra.0+0x9a>
 80022b2:	461c      	mov	r4, r3
 80022b4:	42a6      	cmp	r6, r4
 80022b6:	dd23      	ble.n	8002300 <_strtol_l.isra.0+0xb8>
 80022b8:	1c7b      	adds	r3, r7, #1
 80022ba:	d007      	beq.n	80022cc <_strtol_l.isra.0+0x84>
 80022bc:	4584      	cmp	ip, r0
 80022be:	d31c      	bcc.n	80022fa <_strtol_l.isra.0+0xb2>
 80022c0:	d101      	bne.n	80022c6 <_strtol_l.isra.0+0x7e>
 80022c2:	45a6      	cmp	lr, r4
 80022c4:	db19      	blt.n	80022fa <_strtol_l.isra.0+0xb2>
 80022c6:	2701      	movs	r7, #1
 80022c8:	fb00 4006 	mla	r0, r0, r6, r4
 80022cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80022d0:	e7eb      	b.n	80022aa <_strtol_l.isra.0+0x62>
 80022d2:	462f      	mov	r7, r5
 80022d4:	e7bf      	b.n	8002256 <_strtol_l.isra.0+0xe>
 80022d6:	2c2b      	cmp	r4, #43	; 0x2b
 80022d8:	bf04      	itt	eq
 80022da:	1cbd      	addeq	r5, r7, #2
 80022dc:	787c      	ldrbeq	r4, [r7, #1]
 80022de:	461a      	mov	r2, r3
 80022e0:	e7c9      	b.n	8002276 <_strtol_l.isra.0+0x2e>
 80022e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80022e6:	2b19      	cmp	r3, #25
 80022e8:	d801      	bhi.n	80022ee <_strtol_l.isra.0+0xa6>
 80022ea:	3c37      	subs	r4, #55	; 0x37
 80022ec:	e7e2      	b.n	80022b4 <_strtol_l.isra.0+0x6c>
 80022ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80022f2:	2b19      	cmp	r3, #25
 80022f4:	d804      	bhi.n	8002300 <_strtol_l.isra.0+0xb8>
 80022f6:	3c57      	subs	r4, #87	; 0x57
 80022f8:	e7dc      	b.n	80022b4 <_strtol_l.isra.0+0x6c>
 80022fa:	f04f 37ff 	mov.w	r7, #4294967295
 80022fe:	e7e5      	b.n	80022cc <_strtol_l.isra.0+0x84>
 8002300:	1c7b      	adds	r3, r7, #1
 8002302:	d108      	bne.n	8002316 <_strtol_l.isra.0+0xce>
 8002304:	2322      	movs	r3, #34	; 0x22
 8002306:	4608      	mov	r0, r1
 8002308:	f8c8 3000 	str.w	r3, [r8]
 800230c:	f1ba 0f00 	cmp.w	sl, #0
 8002310:	d107      	bne.n	8002322 <_strtol_l.isra.0+0xda>
 8002312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002316:	b102      	cbz	r2, 800231a <_strtol_l.isra.0+0xd2>
 8002318:	4240      	negs	r0, r0
 800231a:	f1ba 0f00 	cmp.w	sl, #0
 800231e:	d0f8      	beq.n	8002312 <_strtol_l.isra.0+0xca>
 8002320:	b10f      	cbz	r7, 8002326 <_strtol_l.isra.0+0xde>
 8002322:	f105 39ff 	add.w	r9, r5, #4294967295
 8002326:	f8ca 9000 	str.w	r9, [sl]
 800232a:	e7f2      	b.n	8002312 <_strtol_l.isra.0+0xca>
 800232c:	2430      	movs	r4, #48	; 0x30
 800232e:	2e00      	cmp	r6, #0
 8002330:	d1af      	bne.n	8002292 <_strtol_l.isra.0+0x4a>
 8002332:	2608      	movs	r6, #8
 8002334:	e7ad      	b.n	8002292 <_strtol_l.isra.0+0x4a>
 8002336:	2c30      	cmp	r4, #48	; 0x30
 8002338:	d0a3      	beq.n	8002282 <_strtol_l.isra.0+0x3a>
 800233a:	260a      	movs	r6, #10
 800233c:	e7a9      	b.n	8002292 <_strtol_l.isra.0+0x4a>
	...

08002340 <strtol>:
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <strtol+0x24>)
 8002342:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002344:	681c      	ldr	r4, [r3, #0]
 8002346:	4d08      	ldr	r5, [pc, #32]	; (8002368 <strtol+0x28>)
 8002348:	6a23      	ldr	r3, [r4, #32]
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf08      	it	eq
 800234e:	462b      	moveq	r3, r5
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	4613      	mov	r3, r2
 8002354:	460a      	mov	r2, r1
 8002356:	4601      	mov	r1, r0
 8002358:	4620      	mov	r0, r4
 800235a:	f7ff ff75 	bl	8002248 <_strtol_l.isra.0>
 800235e:	b003      	add	sp, #12
 8002360:	bd30      	pop	{r4, r5, pc}
 8002362:	bf00      	nop
 8002364:	2000000c 	.word	0x2000000c
 8002368:	20000070 	.word	0x20000070

0800236c <__swbuf_r>:
 800236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236e:	460e      	mov	r6, r1
 8002370:	4614      	mov	r4, r2
 8002372:	4605      	mov	r5, r0
 8002374:	b118      	cbz	r0, 800237e <__swbuf_r+0x12>
 8002376:	6983      	ldr	r3, [r0, #24]
 8002378:	b90b      	cbnz	r3, 800237e <__swbuf_r+0x12>
 800237a:	f000 f9a7 	bl	80026cc <__sinit>
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <__swbuf_r+0x98>)
 8002380:	429c      	cmp	r4, r3
 8002382:	d12a      	bne.n	80023da <__swbuf_r+0x6e>
 8002384:	686c      	ldr	r4, [r5, #4]
 8002386:	69a3      	ldr	r3, [r4, #24]
 8002388:	60a3      	str	r3, [r4, #8]
 800238a:	89a3      	ldrh	r3, [r4, #12]
 800238c:	071a      	lsls	r2, r3, #28
 800238e:	d52e      	bpl.n	80023ee <__swbuf_r+0x82>
 8002390:	6923      	ldr	r3, [r4, #16]
 8002392:	b363      	cbz	r3, 80023ee <__swbuf_r+0x82>
 8002394:	6923      	ldr	r3, [r4, #16]
 8002396:	6820      	ldr	r0, [r4, #0]
 8002398:	b2f6      	uxtb	r6, r6
 800239a:	1ac0      	subs	r0, r0, r3
 800239c:	6963      	ldr	r3, [r4, #20]
 800239e:	4637      	mov	r7, r6
 80023a0:	4283      	cmp	r3, r0
 80023a2:	dc04      	bgt.n	80023ae <__swbuf_r+0x42>
 80023a4:	4621      	mov	r1, r4
 80023a6:	4628      	mov	r0, r5
 80023a8:	f000 f926 	bl	80025f8 <_fflush_r>
 80023ac:	bb28      	cbnz	r0, 80023fa <__swbuf_r+0x8e>
 80023ae:	68a3      	ldr	r3, [r4, #8]
 80023b0:	3001      	adds	r0, #1
 80023b2:	3b01      	subs	r3, #1
 80023b4:	60a3      	str	r3, [r4, #8]
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	6022      	str	r2, [r4, #0]
 80023bc:	701e      	strb	r6, [r3, #0]
 80023be:	6963      	ldr	r3, [r4, #20]
 80023c0:	4283      	cmp	r3, r0
 80023c2:	d004      	beq.n	80023ce <__swbuf_r+0x62>
 80023c4:	89a3      	ldrh	r3, [r4, #12]
 80023c6:	07db      	lsls	r3, r3, #31
 80023c8:	d519      	bpl.n	80023fe <__swbuf_r+0x92>
 80023ca:	2e0a      	cmp	r6, #10
 80023cc:	d117      	bne.n	80023fe <__swbuf_r+0x92>
 80023ce:	4621      	mov	r1, r4
 80023d0:	4628      	mov	r0, r5
 80023d2:	f000 f911 	bl	80025f8 <_fflush_r>
 80023d6:	b190      	cbz	r0, 80023fe <__swbuf_r+0x92>
 80023d8:	e00f      	b.n	80023fa <__swbuf_r+0x8e>
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <__swbuf_r+0x9c>)
 80023dc:	429c      	cmp	r4, r3
 80023de:	d101      	bne.n	80023e4 <__swbuf_r+0x78>
 80023e0:	68ac      	ldr	r4, [r5, #8]
 80023e2:	e7d0      	b.n	8002386 <__swbuf_r+0x1a>
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <__swbuf_r+0xa0>)
 80023e6:	429c      	cmp	r4, r3
 80023e8:	bf08      	it	eq
 80023ea:	68ec      	ldreq	r4, [r5, #12]
 80023ec:	e7cb      	b.n	8002386 <__swbuf_r+0x1a>
 80023ee:	4621      	mov	r1, r4
 80023f0:	4628      	mov	r0, r5
 80023f2:	f000 f80d 	bl	8002410 <__swsetup_r>
 80023f6:	2800      	cmp	r0, #0
 80023f8:	d0cc      	beq.n	8002394 <__swbuf_r+0x28>
 80023fa:	f04f 37ff 	mov.w	r7, #4294967295
 80023fe:	4638      	mov	r0, r7
 8002400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002402:	bf00      	nop
 8002404:	08003338 	.word	0x08003338
 8002408:	08003358 	.word	0x08003358
 800240c:	08003318 	.word	0x08003318

08002410 <__swsetup_r>:
 8002410:	4b32      	ldr	r3, [pc, #200]	; (80024dc <__swsetup_r+0xcc>)
 8002412:	b570      	push	{r4, r5, r6, lr}
 8002414:	681d      	ldr	r5, [r3, #0]
 8002416:	4606      	mov	r6, r0
 8002418:	460c      	mov	r4, r1
 800241a:	b125      	cbz	r5, 8002426 <__swsetup_r+0x16>
 800241c:	69ab      	ldr	r3, [r5, #24]
 800241e:	b913      	cbnz	r3, 8002426 <__swsetup_r+0x16>
 8002420:	4628      	mov	r0, r5
 8002422:	f000 f953 	bl	80026cc <__sinit>
 8002426:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <__swsetup_r+0xd0>)
 8002428:	429c      	cmp	r4, r3
 800242a:	d10f      	bne.n	800244c <__swsetup_r+0x3c>
 800242c:	686c      	ldr	r4, [r5, #4]
 800242e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002432:	b29a      	uxth	r2, r3
 8002434:	0715      	lsls	r5, r2, #28
 8002436:	d42c      	bmi.n	8002492 <__swsetup_r+0x82>
 8002438:	06d0      	lsls	r0, r2, #27
 800243a:	d411      	bmi.n	8002460 <__swsetup_r+0x50>
 800243c:	2209      	movs	r2, #9
 800243e:	6032      	str	r2, [r6, #0]
 8002440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002444:	81a3      	strh	r3, [r4, #12]
 8002446:	f04f 30ff 	mov.w	r0, #4294967295
 800244a:	e03e      	b.n	80024ca <__swsetup_r+0xba>
 800244c:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <__swsetup_r+0xd4>)
 800244e:	429c      	cmp	r4, r3
 8002450:	d101      	bne.n	8002456 <__swsetup_r+0x46>
 8002452:	68ac      	ldr	r4, [r5, #8]
 8002454:	e7eb      	b.n	800242e <__swsetup_r+0x1e>
 8002456:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <__swsetup_r+0xd8>)
 8002458:	429c      	cmp	r4, r3
 800245a:	bf08      	it	eq
 800245c:	68ec      	ldreq	r4, [r5, #12]
 800245e:	e7e6      	b.n	800242e <__swsetup_r+0x1e>
 8002460:	0751      	lsls	r1, r2, #29
 8002462:	d512      	bpl.n	800248a <__swsetup_r+0x7a>
 8002464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002466:	b141      	cbz	r1, 800247a <__swsetup_r+0x6a>
 8002468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800246c:	4299      	cmp	r1, r3
 800246e:	d002      	beq.n	8002476 <__swsetup_r+0x66>
 8002470:	4630      	mov	r0, r6
 8002472:	f000 fa37 	bl	80028e4 <_free_r>
 8002476:	2300      	movs	r3, #0
 8002478:	6363      	str	r3, [r4, #52]	; 0x34
 800247a:	89a3      	ldrh	r3, [r4, #12]
 800247c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002480:	81a3      	strh	r3, [r4, #12]
 8002482:	2300      	movs	r3, #0
 8002484:	6063      	str	r3, [r4, #4]
 8002486:	6923      	ldr	r3, [r4, #16]
 8002488:	6023      	str	r3, [r4, #0]
 800248a:	89a3      	ldrh	r3, [r4, #12]
 800248c:	f043 0308 	orr.w	r3, r3, #8
 8002490:	81a3      	strh	r3, [r4, #12]
 8002492:	6923      	ldr	r3, [r4, #16]
 8002494:	b94b      	cbnz	r3, 80024aa <__swsetup_r+0x9a>
 8002496:	89a3      	ldrh	r3, [r4, #12]
 8002498:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800249c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a0:	d003      	beq.n	80024aa <__swsetup_r+0x9a>
 80024a2:	4621      	mov	r1, r4
 80024a4:	4630      	mov	r0, r6
 80024a6:	f000 f9c3 	bl	8002830 <__smakebuf_r>
 80024aa:	89a2      	ldrh	r2, [r4, #12]
 80024ac:	f012 0301 	ands.w	r3, r2, #1
 80024b0:	d00c      	beq.n	80024cc <__swsetup_r+0xbc>
 80024b2:	2300      	movs	r3, #0
 80024b4:	60a3      	str	r3, [r4, #8]
 80024b6:	6963      	ldr	r3, [r4, #20]
 80024b8:	425b      	negs	r3, r3
 80024ba:	61a3      	str	r3, [r4, #24]
 80024bc:	6923      	ldr	r3, [r4, #16]
 80024be:	b953      	cbnz	r3, 80024d6 <__swsetup_r+0xc6>
 80024c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80024c8:	d1ba      	bne.n	8002440 <__swsetup_r+0x30>
 80024ca:	bd70      	pop	{r4, r5, r6, pc}
 80024cc:	0792      	lsls	r2, r2, #30
 80024ce:	bf58      	it	pl
 80024d0:	6963      	ldrpl	r3, [r4, #20]
 80024d2:	60a3      	str	r3, [r4, #8]
 80024d4:	e7f2      	b.n	80024bc <__swsetup_r+0xac>
 80024d6:	2000      	movs	r0, #0
 80024d8:	e7f7      	b.n	80024ca <__swsetup_r+0xba>
 80024da:	bf00      	nop
 80024dc:	2000000c 	.word	0x2000000c
 80024e0:	08003338 	.word	0x08003338
 80024e4:	08003358 	.word	0x08003358
 80024e8:	08003318 	.word	0x08003318

080024ec <__sflush_r>:
 80024ec:	898a      	ldrh	r2, [r1, #12]
 80024ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024f2:	4605      	mov	r5, r0
 80024f4:	0710      	lsls	r0, r2, #28
 80024f6:	460c      	mov	r4, r1
 80024f8:	d458      	bmi.n	80025ac <__sflush_r+0xc0>
 80024fa:	684b      	ldr	r3, [r1, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	dc05      	bgt.n	800250c <__sflush_r+0x20>
 8002500:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	dc02      	bgt.n	800250c <__sflush_r+0x20>
 8002506:	2000      	movs	r0, #0
 8002508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800250c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800250e:	2e00      	cmp	r6, #0
 8002510:	d0f9      	beq.n	8002506 <__sflush_r+0x1a>
 8002512:	2300      	movs	r3, #0
 8002514:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002518:	682f      	ldr	r7, [r5, #0]
 800251a:	6a21      	ldr	r1, [r4, #32]
 800251c:	602b      	str	r3, [r5, #0]
 800251e:	d032      	beq.n	8002586 <__sflush_r+0x9a>
 8002520:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002522:	89a3      	ldrh	r3, [r4, #12]
 8002524:	075a      	lsls	r2, r3, #29
 8002526:	d505      	bpl.n	8002534 <__sflush_r+0x48>
 8002528:	6863      	ldr	r3, [r4, #4]
 800252a:	1ac0      	subs	r0, r0, r3
 800252c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800252e:	b10b      	cbz	r3, 8002534 <__sflush_r+0x48>
 8002530:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002532:	1ac0      	subs	r0, r0, r3
 8002534:	2300      	movs	r3, #0
 8002536:	4602      	mov	r2, r0
 8002538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800253a:	6a21      	ldr	r1, [r4, #32]
 800253c:	4628      	mov	r0, r5
 800253e:	47b0      	blx	r6
 8002540:	1c43      	adds	r3, r0, #1
 8002542:	89a3      	ldrh	r3, [r4, #12]
 8002544:	d106      	bne.n	8002554 <__sflush_r+0x68>
 8002546:	6829      	ldr	r1, [r5, #0]
 8002548:	291d      	cmp	r1, #29
 800254a:	d848      	bhi.n	80025de <__sflush_r+0xf2>
 800254c:	4a29      	ldr	r2, [pc, #164]	; (80025f4 <__sflush_r+0x108>)
 800254e:	40ca      	lsrs	r2, r1
 8002550:	07d6      	lsls	r6, r2, #31
 8002552:	d544      	bpl.n	80025de <__sflush_r+0xf2>
 8002554:	2200      	movs	r2, #0
 8002556:	6062      	str	r2, [r4, #4]
 8002558:	6922      	ldr	r2, [r4, #16]
 800255a:	04d9      	lsls	r1, r3, #19
 800255c:	6022      	str	r2, [r4, #0]
 800255e:	d504      	bpl.n	800256a <__sflush_r+0x7e>
 8002560:	1c42      	adds	r2, r0, #1
 8002562:	d101      	bne.n	8002568 <__sflush_r+0x7c>
 8002564:	682b      	ldr	r3, [r5, #0]
 8002566:	b903      	cbnz	r3, 800256a <__sflush_r+0x7e>
 8002568:	6560      	str	r0, [r4, #84]	; 0x54
 800256a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800256c:	602f      	str	r7, [r5, #0]
 800256e:	2900      	cmp	r1, #0
 8002570:	d0c9      	beq.n	8002506 <__sflush_r+0x1a>
 8002572:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002576:	4299      	cmp	r1, r3
 8002578:	d002      	beq.n	8002580 <__sflush_r+0x94>
 800257a:	4628      	mov	r0, r5
 800257c:	f000 f9b2 	bl	80028e4 <_free_r>
 8002580:	2000      	movs	r0, #0
 8002582:	6360      	str	r0, [r4, #52]	; 0x34
 8002584:	e7c0      	b.n	8002508 <__sflush_r+0x1c>
 8002586:	2301      	movs	r3, #1
 8002588:	4628      	mov	r0, r5
 800258a:	47b0      	blx	r6
 800258c:	1c41      	adds	r1, r0, #1
 800258e:	d1c8      	bne.n	8002522 <__sflush_r+0x36>
 8002590:	682b      	ldr	r3, [r5, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0c5      	beq.n	8002522 <__sflush_r+0x36>
 8002596:	2b1d      	cmp	r3, #29
 8002598:	d001      	beq.n	800259e <__sflush_r+0xb2>
 800259a:	2b16      	cmp	r3, #22
 800259c:	d101      	bne.n	80025a2 <__sflush_r+0xb6>
 800259e:	602f      	str	r7, [r5, #0]
 80025a0:	e7b1      	b.n	8002506 <__sflush_r+0x1a>
 80025a2:	89a3      	ldrh	r3, [r4, #12]
 80025a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a8:	81a3      	strh	r3, [r4, #12]
 80025aa:	e7ad      	b.n	8002508 <__sflush_r+0x1c>
 80025ac:	690f      	ldr	r7, [r1, #16]
 80025ae:	2f00      	cmp	r7, #0
 80025b0:	d0a9      	beq.n	8002506 <__sflush_r+0x1a>
 80025b2:	0793      	lsls	r3, r2, #30
 80025b4:	bf18      	it	ne
 80025b6:	2300      	movne	r3, #0
 80025b8:	680e      	ldr	r6, [r1, #0]
 80025ba:	bf08      	it	eq
 80025bc:	694b      	ldreq	r3, [r1, #20]
 80025be:	eba6 0807 	sub.w	r8, r6, r7
 80025c2:	600f      	str	r7, [r1, #0]
 80025c4:	608b      	str	r3, [r1, #8]
 80025c6:	f1b8 0f00 	cmp.w	r8, #0
 80025ca:	dd9c      	ble.n	8002506 <__sflush_r+0x1a>
 80025cc:	4643      	mov	r3, r8
 80025ce:	463a      	mov	r2, r7
 80025d0:	6a21      	ldr	r1, [r4, #32]
 80025d2:	4628      	mov	r0, r5
 80025d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80025d6:	47b0      	blx	r6
 80025d8:	2800      	cmp	r0, #0
 80025da:	dc06      	bgt.n	80025ea <__sflush_r+0xfe>
 80025dc:	89a3      	ldrh	r3, [r4, #12]
 80025de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025e2:	81a3      	strh	r3, [r4, #12]
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	e78e      	b.n	8002508 <__sflush_r+0x1c>
 80025ea:	4407      	add	r7, r0
 80025ec:	eba8 0800 	sub.w	r8, r8, r0
 80025f0:	e7e9      	b.n	80025c6 <__sflush_r+0xda>
 80025f2:	bf00      	nop
 80025f4:	20400001 	.word	0x20400001

080025f8 <_fflush_r>:
 80025f8:	b538      	push	{r3, r4, r5, lr}
 80025fa:	690b      	ldr	r3, [r1, #16]
 80025fc:	4605      	mov	r5, r0
 80025fe:	460c      	mov	r4, r1
 8002600:	b1db      	cbz	r3, 800263a <_fflush_r+0x42>
 8002602:	b118      	cbz	r0, 800260c <_fflush_r+0x14>
 8002604:	6983      	ldr	r3, [r0, #24]
 8002606:	b90b      	cbnz	r3, 800260c <_fflush_r+0x14>
 8002608:	f000 f860 	bl	80026cc <__sinit>
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <_fflush_r+0x48>)
 800260e:	429c      	cmp	r4, r3
 8002610:	d109      	bne.n	8002626 <_fflush_r+0x2e>
 8002612:	686c      	ldr	r4, [r5, #4]
 8002614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002618:	b17b      	cbz	r3, 800263a <_fflush_r+0x42>
 800261a:	4621      	mov	r1, r4
 800261c:	4628      	mov	r0, r5
 800261e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002622:	f7ff bf63 	b.w	80024ec <__sflush_r>
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <_fflush_r+0x4c>)
 8002628:	429c      	cmp	r4, r3
 800262a:	d101      	bne.n	8002630 <_fflush_r+0x38>
 800262c:	68ac      	ldr	r4, [r5, #8]
 800262e:	e7f1      	b.n	8002614 <_fflush_r+0x1c>
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <_fflush_r+0x50>)
 8002632:	429c      	cmp	r4, r3
 8002634:	bf08      	it	eq
 8002636:	68ec      	ldreq	r4, [r5, #12]
 8002638:	e7ec      	b.n	8002614 <_fflush_r+0x1c>
 800263a:	2000      	movs	r0, #0
 800263c:	bd38      	pop	{r3, r4, r5, pc}
 800263e:	bf00      	nop
 8002640:	08003338 	.word	0x08003338
 8002644:	08003358 	.word	0x08003358
 8002648:	08003318 	.word	0x08003318

0800264c <std>:
 800264c:	2300      	movs	r3, #0
 800264e:	b510      	push	{r4, lr}
 8002650:	4604      	mov	r4, r0
 8002652:	e9c0 3300 	strd	r3, r3, [r0]
 8002656:	6083      	str	r3, [r0, #8]
 8002658:	8181      	strh	r1, [r0, #12]
 800265a:	6643      	str	r3, [r0, #100]	; 0x64
 800265c:	81c2      	strh	r2, [r0, #14]
 800265e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002662:	6183      	str	r3, [r0, #24]
 8002664:	4619      	mov	r1, r3
 8002666:	2208      	movs	r2, #8
 8002668:	305c      	adds	r0, #92	; 0x5c
 800266a:	f7ff fd0d 	bl	8002088 <memset>
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <std+0x38>)
 8002670:	6224      	str	r4, [r4, #32]
 8002672:	6263      	str	r3, [r4, #36]	; 0x24
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <std+0x3c>)
 8002676:	62a3      	str	r3, [r4, #40]	; 0x28
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <std+0x40>)
 800267a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <std+0x44>)
 800267e:	6323      	str	r3, [r4, #48]	; 0x30
 8002680:	bd10      	pop	{r4, pc}
 8002682:	bf00      	nop
 8002684:	08002fdd 	.word	0x08002fdd
 8002688:	08002fff 	.word	0x08002fff
 800268c:	08003037 	.word	0x08003037
 8002690:	0800305b 	.word	0x0800305b

08002694 <_cleanup_r>:
 8002694:	4901      	ldr	r1, [pc, #4]	; (800269c <_cleanup_r+0x8>)
 8002696:	f000 b885 	b.w	80027a4 <_fwalk_reent>
 800269a:	bf00      	nop
 800269c:	080025f9 	.word	0x080025f9

080026a0 <__sfmoreglue>:
 80026a0:	b570      	push	{r4, r5, r6, lr}
 80026a2:	2568      	movs	r5, #104	; 0x68
 80026a4:	1e4a      	subs	r2, r1, #1
 80026a6:	4355      	muls	r5, r2
 80026a8:	460e      	mov	r6, r1
 80026aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80026ae:	f000 f965 	bl	800297c <_malloc_r>
 80026b2:	4604      	mov	r4, r0
 80026b4:	b140      	cbz	r0, 80026c8 <__sfmoreglue+0x28>
 80026b6:	2100      	movs	r1, #0
 80026b8:	e9c0 1600 	strd	r1, r6, [r0]
 80026bc:	300c      	adds	r0, #12
 80026be:	60a0      	str	r0, [r4, #8]
 80026c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80026c4:	f7ff fce0 	bl	8002088 <memset>
 80026c8:	4620      	mov	r0, r4
 80026ca:	bd70      	pop	{r4, r5, r6, pc}

080026cc <__sinit>:
 80026cc:	6983      	ldr	r3, [r0, #24]
 80026ce:	b510      	push	{r4, lr}
 80026d0:	4604      	mov	r4, r0
 80026d2:	bb33      	cbnz	r3, 8002722 <__sinit+0x56>
 80026d4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80026d8:	6503      	str	r3, [r0, #80]	; 0x50
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <__sinit+0x58>)
 80026dc:	4a12      	ldr	r2, [pc, #72]	; (8002728 <__sinit+0x5c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6282      	str	r2, [r0, #40]	; 0x28
 80026e2:	4298      	cmp	r0, r3
 80026e4:	bf04      	itt	eq
 80026e6:	2301      	moveq	r3, #1
 80026e8:	6183      	streq	r3, [r0, #24]
 80026ea:	f000 f81f 	bl	800272c <__sfp>
 80026ee:	6060      	str	r0, [r4, #4]
 80026f0:	4620      	mov	r0, r4
 80026f2:	f000 f81b 	bl	800272c <__sfp>
 80026f6:	60a0      	str	r0, [r4, #8]
 80026f8:	4620      	mov	r0, r4
 80026fa:	f000 f817 	bl	800272c <__sfp>
 80026fe:	2200      	movs	r2, #0
 8002700:	60e0      	str	r0, [r4, #12]
 8002702:	2104      	movs	r1, #4
 8002704:	6860      	ldr	r0, [r4, #4]
 8002706:	f7ff ffa1 	bl	800264c <std>
 800270a:	2201      	movs	r2, #1
 800270c:	2109      	movs	r1, #9
 800270e:	68a0      	ldr	r0, [r4, #8]
 8002710:	f7ff ff9c 	bl	800264c <std>
 8002714:	2202      	movs	r2, #2
 8002716:	2112      	movs	r1, #18
 8002718:	68e0      	ldr	r0, [r4, #12]
 800271a:	f7ff ff97 	bl	800264c <std>
 800271e:	2301      	movs	r3, #1
 8002720:	61a3      	str	r3, [r4, #24]
 8002722:	bd10      	pop	{r4, pc}
 8002724:	08003314 	.word	0x08003314
 8002728:	08002695 	.word	0x08002695

0800272c <__sfp>:
 800272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272e:	4b1b      	ldr	r3, [pc, #108]	; (800279c <__sfp+0x70>)
 8002730:	4607      	mov	r7, r0
 8002732:	681e      	ldr	r6, [r3, #0]
 8002734:	69b3      	ldr	r3, [r6, #24]
 8002736:	b913      	cbnz	r3, 800273e <__sfp+0x12>
 8002738:	4630      	mov	r0, r6
 800273a:	f7ff ffc7 	bl	80026cc <__sinit>
 800273e:	3648      	adds	r6, #72	; 0x48
 8002740:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002744:	3b01      	subs	r3, #1
 8002746:	d503      	bpl.n	8002750 <__sfp+0x24>
 8002748:	6833      	ldr	r3, [r6, #0]
 800274a:	b133      	cbz	r3, 800275a <__sfp+0x2e>
 800274c:	6836      	ldr	r6, [r6, #0]
 800274e:	e7f7      	b.n	8002740 <__sfp+0x14>
 8002750:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002754:	b16d      	cbz	r5, 8002772 <__sfp+0x46>
 8002756:	3468      	adds	r4, #104	; 0x68
 8002758:	e7f4      	b.n	8002744 <__sfp+0x18>
 800275a:	2104      	movs	r1, #4
 800275c:	4638      	mov	r0, r7
 800275e:	f7ff ff9f 	bl	80026a0 <__sfmoreglue>
 8002762:	6030      	str	r0, [r6, #0]
 8002764:	2800      	cmp	r0, #0
 8002766:	d1f1      	bne.n	800274c <__sfp+0x20>
 8002768:	230c      	movs	r3, #12
 800276a:	4604      	mov	r4, r0
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	4620      	mov	r0, r4
 8002770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <__sfp+0x74>)
 8002774:	6665      	str	r5, [r4, #100]	; 0x64
 8002776:	e9c4 5500 	strd	r5, r5, [r4]
 800277a:	60a5      	str	r5, [r4, #8]
 800277c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002780:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002784:	2208      	movs	r2, #8
 8002786:	4629      	mov	r1, r5
 8002788:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800278c:	f7ff fc7c 	bl	8002088 <memset>
 8002790:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002794:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002798:	e7e9      	b.n	800276e <__sfp+0x42>
 800279a:	bf00      	nop
 800279c:	08003314 	.word	0x08003314
 80027a0:	ffff0001 	.word	0xffff0001

080027a4 <_fwalk_reent>:
 80027a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027a8:	4680      	mov	r8, r0
 80027aa:	4689      	mov	r9, r1
 80027ac:	2600      	movs	r6, #0
 80027ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80027b2:	b914      	cbnz	r4, 80027ba <_fwalk_reent+0x16>
 80027b4:	4630      	mov	r0, r6
 80027b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027ba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80027be:	3f01      	subs	r7, #1
 80027c0:	d501      	bpl.n	80027c6 <_fwalk_reent+0x22>
 80027c2:	6824      	ldr	r4, [r4, #0]
 80027c4:	e7f5      	b.n	80027b2 <_fwalk_reent+0xe>
 80027c6:	89ab      	ldrh	r3, [r5, #12]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d907      	bls.n	80027dc <_fwalk_reent+0x38>
 80027cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80027d0:	3301      	adds	r3, #1
 80027d2:	d003      	beq.n	80027dc <_fwalk_reent+0x38>
 80027d4:	4629      	mov	r1, r5
 80027d6:	4640      	mov	r0, r8
 80027d8:	47c8      	blx	r9
 80027da:	4306      	orrs	r6, r0
 80027dc:	3568      	adds	r5, #104	; 0x68
 80027de:	e7ee      	b.n	80027be <_fwalk_reent+0x1a>

080027e0 <__locale_ctype_ptr_l>:
 80027e0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80027e4:	4770      	bx	lr

080027e6 <__swhatbuf_r>:
 80027e6:	b570      	push	{r4, r5, r6, lr}
 80027e8:	460e      	mov	r6, r1
 80027ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027ee:	b096      	sub	sp, #88	; 0x58
 80027f0:	2900      	cmp	r1, #0
 80027f2:	4614      	mov	r4, r2
 80027f4:	461d      	mov	r5, r3
 80027f6:	da07      	bge.n	8002808 <__swhatbuf_r+0x22>
 80027f8:	2300      	movs	r3, #0
 80027fa:	602b      	str	r3, [r5, #0]
 80027fc:	89b3      	ldrh	r3, [r6, #12]
 80027fe:	061a      	lsls	r2, r3, #24
 8002800:	d410      	bmi.n	8002824 <__swhatbuf_r+0x3e>
 8002802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002806:	e00e      	b.n	8002826 <__swhatbuf_r+0x40>
 8002808:	466a      	mov	r2, sp
 800280a:	f000 fc59 	bl	80030c0 <_fstat_r>
 800280e:	2800      	cmp	r0, #0
 8002810:	dbf2      	blt.n	80027f8 <__swhatbuf_r+0x12>
 8002812:	9a01      	ldr	r2, [sp, #4]
 8002814:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002818:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800281c:	425a      	negs	r2, r3
 800281e:	415a      	adcs	r2, r3
 8002820:	602a      	str	r2, [r5, #0]
 8002822:	e7ee      	b.n	8002802 <__swhatbuf_r+0x1c>
 8002824:	2340      	movs	r3, #64	; 0x40
 8002826:	2000      	movs	r0, #0
 8002828:	6023      	str	r3, [r4, #0]
 800282a:	b016      	add	sp, #88	; 0x58
 800282c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002830 <__smakebuf_r>:
 8002830:	898b      	ldrh	r3, [r1, #12]
 8002832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002834:	079d      	lsls	r5, r3, #30
 8002836:	4606      	mov	r6, r0
 8002838:	460c      	mov	r4, r1
 800283a:	d507      	bpl.n	800284c <__smakebuf_r+0x1c>
 800283c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002840:	6023      	str	r3, [r4, #0]
 8002842:	6123      	str	r3, [r4, #16]
 8002844:	2301      	movs	r3, #1
 8002846:	6163      	str	r3, [r4, #20]
 8002848:	b002      	add	sp, #8
 800284a:	bd70      	pop	{r4, r5, r6, pc}
 800284c:	ab01      	add	r3, sp, #4
 800284e:	466a      	mov	r2, sp
 8002850:	f7ff ffc9 	bl	80027e6 <__swhatbuf_r>
 8002854:	9900      	ldr	r1, [sp, #0]
 8002856:	4605      	mov	r5, r0
 8002858:	4630      	mov	r0, r6
 800285a:	f000 f88f 	bl	800297c <_malloc_r>
 800285e:	b948      	cbnz	r0, 8002874 <__smakebuf_r+0x44>
 8002860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002864:	059a      	lsls	r2, r3, #22
 8002866:	d4ef      	bmi.n	8002848 <__smakebuf_r+0x18>
 8002868:	f023 0303 	bic.w	r3, r3, #3
 800286c:	f043 0302 	orr.w	r3, r3, #2
 8002870:	81a3      	strh	r3, [r4, #12]
 8002872:	e7e3      	b.n	800283c <__smakebuf_r+0xc>
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <__smakebuf_r+0x7c>)
 8002876:	62b3      	str	r3, [r6, #40]	; 0x28
 8002878:	89a3      	ldrh	r3, [r4, #12]
 800287a:	6020      	str	r0, [r4, #0]
 800287c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002880:	81a3      	strh	r3, [r4, #12]
 8002882:	9b00      	ldr	r3, [sp, #0]
 8002884:	6120      	str	r0, [r4, #16]
 8002886:	6163      	str	r3, [r4, #20]
 8002888:	9b01      	ldr	r3, [sp, #4]
 800288a:	b15b      	cbz	r3, 80028a4 <__smakebuf_r+0x74>
 800288c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002890:	4630      	mov	r0, r6
 8002892:	f000 fc27 	bl	80030e4 <_isatty_r>
 8002896:	b128      	cbz	r0, 80028a4 <__smakebuf_r+0x74>
 8002898:	89a3      	ldrh	r3, [r4, #12]
 800289a:	f023 0303 	bic.w	r3, r3, #3
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	81a3      	strh	r3, [r4, #12]
 80028a4:	89a3      	ldrh	r3, [r4, #12]
 80028a6:	431d      	orrs	r5, r3
 80028a8:	81a5      	strh	r5, [r4, #12]
 80028aa:	e7cd      	b.n	8002848 <__smakebuf_r+0x18>
 80028ac:	08002695 	.word	0x08002695

080028b0 <malloc>:
 80028b0:	4b02      	ldr	r3, [pc, #8]	; (80028bc <malloc+0xc>)
 80028b2:	4601      	mov	r1, r0
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	f000 b861 	b.w	800297c <_malloc_r>
 80028ba:	bf00      	nop
 80028bc:	2000000c 	.word	0x2000000c

080028c0 <__ascii_mbtowc>:
 80028c0:	b082      	sub	sp, #8
 80028c2:	b901      	cbnz	r1, 80028c6 <__ascii_mbtowc+0x6>
 80028c4:	a901      	add	r1, sp, #4
 80028c6:	b142      	cbz	r2, 80028da <__ascii_mbtowc+0x1a>
 80028c8:	b14b      	cbz	r3, 80028de <__ascii_mbtowc+0x1e>
 80028ca:	7813      	ldrb	r3, [r2, #0]
 80028cc:	600b      	str	r3, [r1, #0]
 80028ce:	7812      	ldrb	r2, [r2, #0]
 80028d0:	1c10      	adds	r0, r2, #0
 80028d2:	bf18      	it	ne
 80028d4:	2001      	movne	r0, #1
 80028d6:	b002      	add	sp, #8
 80028d8:	4770      	bx	lr
 80028da:	4610      	mov	r0, r2
 80028dc:	e7fb      	b.n	80028d6 <__ascii_mbtowc+0x16>
 80028de:	f06f 0001 	mvn.w	r0, #1
 80028e2:	e7f8      	b.n	80028d6 <__ascii_mbtowc+0x16>

080028e4 <_free_r>:
 80028e4:	b538      	push	{r3, r4, r5, lr}
 80028e6:	4605      	mov	r5, r0
 80028e8:	2900      	cmp	r1, #0
 80028ea:	d043      	beq.n	8002974 <_free_r+0x90>
 80028ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028f0:	1f0c      	subs	r4, r1, #4
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bfb8      	it	lt
 80028f6:	18e4      	addlt	r4, r4, r3
 80028f8:	f000 fc24 	bl	8003144 <__malloc_lock>
 80028fc:	4a1e      	ldr	r2, [pc, #120]	; (8002978 <_free_r+0x94>)
 80028fe:	6813      	ldr	r3, [r2, #0]
 8002900:	4610      	mov	r0, r2
 8002902:	b933      	cbnz	r3, 8002912 <_free_r+0x2e>
 8002904:	6063      	str	r3, [r4, #4]
 8002906:	6014      	str	r4, [r2, #0]
 8002908:	4628      	mov	r0, r5
 800290a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800290e:	f000 bc1a 	b.w	8003146 <__malloc_unlock>
 8002912:	42a3      	cmp	r3, r4
 8002914:	d90b      	bls.n	800292e <_free_r+0x4a>
 8002916:	6821      	ldr	r1, [r4, #0]
 8002918:	1862      	adds	r2, r4, r1
 800291a:	4293      	cmp	r3, r2
 800291c:	bf01      	itttt	eq
 800291e:	681a      	ldreq	r2, [r3, #0]
 8002920:	685b      	ldreq	r3, [r3, #4]
 8002922:	1852      	addeq	r2, r2, r1
 8002924:	6022      	streq	r2, [r4, #0]
 8002926:	6063      	str	r3, [r4, #4]
 8002928:	6004      	str	r4, [r0, #0]
 800292a:	e7ed      	b.n	8002908 <_free_r+0x24>
 800292c:	4613      	mov	r3, r2
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	b10a      	cbz	r2, 8002936 <_free_r+0x52>
 8002932:	42a2      	cmp	r2, r4
 8002934:	d9fa      	bls.n	800292c <_free_r+0x48>
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	1858      	adds	r0, r3, r1
 800293a:	42a0      	cmp	r0, r4
 800293c:	d10b      	bne.n	8002956 <_free_r+0x72>
 800293e:	6820      	ldr	r0, [r4, #0]
 8002940:	4401      	add	r1, r0
 8002942:	1858      	adds	r0, r3, r1
 8002944:	4282      	cmp	r2, r0
 8002946:	6019      	str	r1, [r3, #0]
 8002948:	d1de      	bne.n	8002908 <_free_r+0x24>
 800294a:	6810      	ldr	r0, [r2, #0]
 800294c:	6852      	ldr	r2, [r2, #4]
 800294e:	4401      	add	r1, r0
 8002950:	6019      	str	r1, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	e7d8      	b.n	8002908 <_free_r+0x24>
 8002956:	d902      	bls.n	800295e <_free_r+0x7a>
 8002958:	230c      	movs	r3, #12
 800295a:	602b      	str	r3, [r5, #0]
 800295c:	e7d4      	b.n	8002908 <_free_r+0x24>
 800295e:	6820      	ldr	r0, [r4, #0]
 8002960:	1821      	adds	r1, r4, r0
 8002962:	428a      	cmp	r2, r1
 8002964:	bf01      	itttt	eq
 8002966:	6811      	ldreq	r1, [r2, #0]
 8002968:	6852      	ldreq	r2, [r2, #4]
 800296a:	1809      	addeq	r1, r1, r0
 800296c:	6021      	streq	r1, [r4, #0]
 800296e:	6062      	str	r2, [r4, #4]
 8002970:	605c      	str	r4, [r3, #4]
 8002972:	e7c9      	b.n	8002908 <_free_r+0x24>
 8002974:	bd38      	pop	{r3, r4, r5, pc}
 8002976:	bf00      	nop
 8002978:	200001fc 	.word	0x200001fc

0800297c <_malloc_r>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	1ccd      	adds	r5, r1, #3
 8002980:	f025 0503 	bic.w	r5, r5, #3
 8002984:	3508      	adds	r5, #8
 8002986:	2d0c      	cmp	r5, #12
 8002988:	bf38      	it	cc
 800298a:	250c      	movcc	r5, #12
 800298c:	2d00      	cmp	r5, #0
 800298e:	4606      	mov	r6, r0
 8002990:	db01      	blt.n	8002996 <_malloc_r+0x1a>
 8002992:	42a9      	cmp	r1, r5
 8002994:	d903      	bls.n	800299e <_malloc_r+0x22>
 8002996:	230c      	movs	r3, #12
 8002998:	6033      	str	r3, [r6, #0]
 800299a:	2000      	movs	r0, #0
 800299c:	bd70      	pop	{r4, r5, r6, pc}
 800299e:	f000 fbd1 	bl	8003144 <__malloc_lock>
 80029a2:	4a21      	ldr	r2, [pc, #132]	; (8002a28 <_malloc_r+0xac>)
 80029a4:	6814      	ldr	r4, [r2, #0]
 80029a6:	4621      	mov	r1, r4
 80029a8:	b991      	cbnz	r1, 80029d0 <_malloc_r+0x54>
 80029aa:	4c20      	ldr	r4, [pc, #128]	; (8002a2c <_malloc_r+0xb0>)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	b91b      	cbnz	r3, 80029b8 <_malloc_r+0x3c>
 80029b0:	4630      	mov	r0, r6
 80029b2:	f000 fb03 	bl	8002fbc <_sbrk_r>
 80029b6:	6020      	str	r0, [r4, #0]
 80029b8:	4629      	mov	r1, r5
 80029ba:	4630      	mov	r0, r6
 80029bc:	f000 fafe 	bl	8002fbc <_sbrk_r>
 80029c0:	1c43      	adds	r3, r0, #1
 80029c2:	d124      	bne.n	8002a0e <_malloc_r+0x92>
 80029c4:	230c      	movs	r3, #12
 80029c6:	4630      	mov	r0, r6
 80029c8:	6033      	str	r3, [r6, #0]
 80029ca:	f000 fbbc 	bl	8003146 <__malloc_unlock>
 80029ce:	e7e4      	b.n	800299a <_malloc_r+0x1e>
 80029d0:	680b      	ldr	r3, [r1, #0]
 80029d2:	1b5b      	subs	r3, r3, r5
 80029d4:	d418      	bmi.n	8002a08 <_malloc_r+0x8c>
 80029d6:	2b0b      	cmp	r3, #11
 80029d8:	d90f      	bls.n	80029fa <_malloc_r+0x7e>
 80029da:	600b      	str	r3, [r1, #0]
 80029dc:	18cc      	adds	r4, r1, r3
 80029de:	50cd      	str	r5, [r1, r3]
 80029e0:	4630      	mov	r0, r6
 80029e2:	f000 fbb0 	bl	8003146 <__malloc_unlock>
 80029e6:	f104 000b 	add.w	r0, r4, #11
 80029ea:	1d23      	adds	r3, r4, #4
 80029ec:	f020 0007 	bic.w	r0, r0, #7
 80029f0:	1ac3      	subs	r3, r0, r3
 80029f2:	d0d3      	beq.n	800299c <_malloc_r+0x20>
 80029f4:	425a      	negs	r2, r3
 80029f6:	50e2      	str	r2, [r4, r3]
 80029f8:	e7d0      	b.n	800299c <_malloc_r+0x20>
 80029fa:	684b      	ldr	r3, [r1, #4]
 80029fc:	428c      	cmp	r4, r1
 80029fe:	bf16      	itet	ne
 8002a00:	6063      	strne	r3, [r4, #4]
 8002a02:	6013      	streq	r3, [r2, #0]
 8002a04:	460c      	movne	r4, r1
 8002a06:	e7eb      	b.n	80029e0 <_malloc_r+0x64>
 8002a08:	460c      	mov	r4, r1
 8002a0a:	6849      	ldr	r1, [r1, #4]
 8002a0c:	e7cc      	b.n	80029a8 <_malloc_r+0x2c>
 8002a0e:	1cc4      	adds	r4, r0, #3
 8002a10:	f024 0403 	bic.w	r4, r4, #3
 8002a14:	42a0      	cmp	r0, r4
 8002a16:	d005      	beq.n	8002a24 <_malloc_r+0xa8>
 8002a18:	1a21      	subs	r1, r4, r0
 8002a1a:	4630      	mov	r0, r6
 8002a1c:	f000 face 	bl	8002fbc <_sbrk_r>
 8002a20:	3001      	adds	r0, #1
 8002a22:	d0cf      	beq.n	80029c4 <_malloc_r+0x48>
 8002a24:	6025      	str	r5, [r4, #0]
 8002a26:	e7db      	b.n	80029e0 <_malloc_r+0x64>
 8002a28:	200001fc 	.word	0x200001fc
 8002a2c:	20000200 	.word	0x20000200

08002a30 <__sfputc_r>:
 8002a30:	6893      	ldr	r3, [r2, #8]
 8002a32:	b410      	push	{r4}
 8002a34:	3b01      	subs	r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	6093      	str	r3, [r2, #8]
 8002a3a:	da07      	bge.n	8002a4c <__sfputc_r+0x1c>
 8002a3c:	6994      	ldr	r4, [r2, #24]
 8002a3e:	42a3      	cmp	r3, r4
 8002a40:	db01      	blt.n	8002a46 <__sfputc_r+0x16>
 8002a42:	290a      	cmp	r1, #10
 8002a44:	d102      	bne.n	8002a4c <__sfputc_r+0x1c>
 8002a46:	bc10      	pop	{r4}
 8002a48:	f7ff bc90 	b.w	800236c <__swbuf_r>
 8002a4c:	6813      	ldr	r3, [r2, #0]
 8002a4e:	1c58      	adds	r0, r3, #1
 8002a50:	6010      	str	r0, [r2, #0]
 8002a52:	7019      	strb	r1, [r3, #0]
 8002a54:	4608      	mov	r0, r1
 8002a56:	bc10      	pop	{r4}
 8002a58:	4770      	bx	lr

08002a5a <__sfputs_r>:
 8002a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5c:	4606      	mov	r6, r0
 8002a5e:	460f      	mov	r7, r1
 8002a60:	4614      	mov	r4, r2
 8002a62:	18d5      	adds	r5, r2, r3
 8002a64:	42ac      	cmp	r4, r5
 8002a66:	d101      	bne.n	8002a6c <__sfputs_r+0x12>
 8002a68:	2000      	movs	r0, #0
 8002a6a:	e007      	b.n	8002a7c <__sfputs_r+0x22>
 8002a6c:	463a      	mov	r2, r7
 8002a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a72:	4630      	mov	r0, r6
 8002a74:	f7ff ffdc 	bl	8002a30 <__sfputc_r>
 8002a78:	1c43      	adds	r3, r0, #1
 8002a7a:	d1f3      	bne.n	8002a64 <__sfputs_r+0xa>
 8002a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a80 <_vfiprintf_r>:
 8002a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a84:	460c      	mov	r4, r1
 8002a86:	b09d      	sub	sp, #116	; 0x74
 8002a88:	4617      	mov	r7, r2
 8002a8a:	461d      	mov	r5, r3
 8002a8c:	4606      	mov	r6, r0
 8002a8e:	b118      	cbz	r0, 8002a98 <_vfiprintf_r+0x18>
 8002a90:	6983      	ldr	r3, [r0, #24]
 8002a92:	b90b      	cbnz	r3, 8002a98 <_vfiprintf_r+0x18>
 8002a94:	f7ff fe1a 	bl	80026cc <__sinit>
 8002a98:	4b7c      	ldr	r3, [pc, #496]	; (8002c8c <_vfiprintf_r+0x20c>)
 8002a9a:	429c      	cmp	r4, r3
 8002a9c:	d158      	bne.n	8002b50 <_vfiprintf_r+0xd0>
 8002a9e:	6874      	ldr	r4, [r6, #4]
 8002aa0:	89a3      	ldrh	r3, [r4, #12]
 8002aa2:	0718      	lsls	r0, r3, #28
 8002aa4:	d55e      	bpl.n	8002b64 <_vfiprintf_r+0xe4>
 8002aa6:	6923      	ldr	r3, [r4, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d05b      	beq.n	8002b64 <_vfiprintf_r+0xe4>
 8002aac:	2300      	movs	r3, #0
 8002aae:	9309      	str	r3, [sp, #36]	; 0x24
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ab6:	2330      	movs	r3, #48	; 0x30
 8002ab8:	f04f 0b01 	mov.w	fp, #1
 8002abc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ac0:	9503      	str	r5, [sp, #12]
 8002ac2:	46b8      	mov	r8, r7
 8002ac4:	4645      	mov	r5, r8
 8002ac6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002aca:	b10b      	cbz	r3, 8002ad0 <_vfiprintf_r+0x50>
 8002acc:	2b25      	cmp	r3, #37	; 0x25
 8002ace:	d154      	bne.n	8002b7a <_vfiprintf_r+0xfa>
 8002ad0:	ebb8 0a07 	subs.w	sl, r8, r7
 8002ad4:	d00b      	beq.n	8002aee <_vfiprintf_r+0x6e>
 8002ad6:	4653      	mov	r3, sl
 8002ad8:	463a      	mov	r2, r7
 8002ada:	4621      	mov	r1, r4
 8002adc:	4630      	mov	r0, r6
 8002ade:	f7ff ffbc 	bl	8002a5a <__sfputs_r>
 8002ae2:	3001      	adds	r0, #1
 8002ae4:	f000 80c2 	beq.w	8002c6c <_vfiprintf_r+0x1ec>
 8002ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aea:	4453      	add	r3, sl
 8002aec:	9309      	str	r3, [sp, #36]	; 0x24
 8002aee:	f898 3000 	ldrb.w	r3, [r8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80ba 	beq.w	8002c6c <_vfiprintf_r+0x1ec>
 8002af8:	2300      	movs	r3, #0
 8002afa:	f04f 32ff 	mov.w	r2, #4294967295
 8002afe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b02:	9304      	str	r3, [sp, #16]
 8002b04:	9307      	str	r3, [sp, #28]
 8002b06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b0a:	931a      	str	r3, [sp, #104]	; 0x68
 8002b0c:	46a8      	mov	r8, r5
 8002b0e:	2205      	movs	r2, #5
 8002b10:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002b14:	485e      	ldr	r0, [pc, #376]	; (8002c90 <_vfiprintf_r+0x210>)
 8002b16:	f000 fb07 	bl	8003128 <memchr>
 8002b1a:	9b04      	ldr	r3, [sp, #16]
 8002b1c:	bb78      	cbnz	r0, 8002b7e <_vfiprintf_r+0xfe>
 8002b1e:	06d9      	lsls	r1, r3, #27
 8002b20:	bf44      	itt	mi
 8002b22:	2220      	movmi	r2, #32
 8002b24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b28:	071a      	lsls	r2, r3, #28
 8002b2a:	bf44      	itt	mi
 8002b2c:	222b      	movmi	r2, #43	; 0x2b
 8002b2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b32:	782a      	ldrb	r2, [r5, #0]
 8002b34:	2a2a      	cmp	r2, #42	; 0x2a
 8002b36:	d02a      	beq.n	8002b8e <_vfiprintf_r+0x10e>
 8002b38:	46a8      	mov	r8, r5
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	250a      	movs	r5, #10
 8002b3e:	9a07      	ldr	r2, [sp, #28]
 8002b40:	4641      	mov	r1, r8
 8002b42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b46:	3b30      	subs	r3, #48	; 0x30
 8002b48:	2b09      	cmp	r3, #9
 8002b4a:	d969      	bls.n	8002c20 <_vfiprintf_r+0x1a0>
 8002b4c:	b360      	cbz	r0, 8002ba8 <_vfiprintf_r+0x128>
 8002b4e:	e024      	b.n	8002b9a <_vfiprintf_r+0x11a>
 8002b50:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <_vfiprintf_r+0x214>)
 8002b52:	429c      	cmp	r4, r3
 8002b54:	d101      	bne.n	8002b5a <_vfiprintf_r+0xda>
 8002b56:	68b4      	ldr	r4, [r6, #8]
 8002b58:	e7a2      	b.n	8002aa0 <_vfiprintf_r+0x20>
 8002b5a:	4b4f      	ldr	r3, [pc, #316]	; (8002c98 <_vfiprintf_r+0x218>)
 8002b5c:	429c      	cmp	r4, r3
 8002b5e:	bf08      	it	eq
 8002b60:	68f4      	ldreq	r4, [r6, #12]
 8002b62:	e79d      	b.n	8002aa0 <_vfiprintf_r+0x20>
 8002b64:	4621      	mov	r1, r4
 8002b66:	4630      	mov	r0, r6
 8002b68:	f7ff fc52 	bl	8002410 <__swsetup_r>
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	d09d      	beq.n	8002aac <_vfiprintf_r+0x2c>
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	b01d      	add	sp, #116	; 0x74
 8002b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b7a:	46a8      	mov	r8, r5
 8002b7c:	e7a2      	b.n	8002ac4 <_vfiprintf_r+0x44>
 8002b7e:	4a44      	ldr	r2, [pc, #272]	; (8002c90 <_vfiprintf_r+0x210>)
 8002b80:	4645      	mov	r5, r8
 8002b82:	1a80      	subs	r0, r0, r2
 8002b84:	fa0b f000 	lsl.w	r0, fp, r0
 8002b88:	4318      	orrs	r0, r3
 8002b8a:	9004      	str	r0, [sp, #16]
 8002b8c:	e7be      	b.n	8002b0c <_vfiprintf_r+0x8c>
 8002b8e:	9a03      	ldr	r2, [sp, #12]
 8002b90:	1d11      	adds	r1, r2, #4
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	9103      	str	r1, [sp, #12]
 8002b96:	2a00      	cmp	r2, #0
 8002b98:	db01      	blt.n	8002b9e <_vfiprintf_r+0x11e>
 8002b9a:	9207      	str	r2, [sp, #28]
 8002b9c:	e004      	b.n	8002ba8 <_vfiprintf_r+0x128>
 8002b9e:	4252      	negs	r2, r2
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	9207      	str	r2, [sp, #28]
 8002ba6:	9304      	str	r3, [sp, #16]
 8002ba8:	f898 3000 	ldrb.w	r3, [r8]
 8002bac:	2b2e      	cmp	r3, #46	; 0x2e
 8002bae:	d10e      	bne.n	8002bce <_vfiprintf_r+0x14e>
 8002bb0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8002bb6:	d138      	bne.n	8002c2a <_vfiprintf_r+0x1aa>
 8002bb8:	9b03      	ldr	r3, [sp, #12]
 8002bba:	f108 0802 	add.w	r8, r8, #2
 8002bbe:	1d1a      	adds	r2, r3, #4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	9203      	str	r2, [sp, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bfb8      	it	lt
 8002bc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bcc:	9305      	str	r3, [sp, #20]
 8002bce:	4d33      	ldr	r5, [pc, #204]	; (8002c9c <_vfiprintf_r+0x21c>)
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	f898 1000 	ldrb.w	r1, [r8]
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	f000 faa6 	bl	8003128 <memchr>
 8002bdc:	b140      	cbz	r0, 8002bf0 <_vfiprintf_r+0x170>
 8002bde:	2340      	movs	r3, #64	; 0x40
 8002be0:	1b40      	subs	r0, r0, r5
 8002be2:	fa03 f000 	lsl.w	r0, r3, r0
 8002be6:	9b04      	ldr	r3, [sp, #16]
 8002be8:	f108 0801 	add.w	r8, r8, #1
 8002bec:	4303      	orrs	r3, r0
 8002bee:	9304      	str	r3, [sp, #16]
 8002bf0:	f898 1000 	ldrb.w	r1, [r8]
 8002bf4:	2206      	movs	r2, #6
 8002bf6:	482a      	ldr	r0, [pc, #168]	; (8002ca0 <_vfiprintf_r+0x220>)
 8002bf8:	f108 0701 	add.w	r7, r8, #1
 8002bfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c00:	f000 fa92 	bl	8003128 <memchr>
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d037      	beq.n	8002c78 <_vfiprintf_r+0x1f8>
 8002c08:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <_vfiprintf_r+0x224>)
 8002c0a:	bb1b      	cbnz	r3, 8002c54 <_vfiprintf_r+0x1d4>
 8002c0c:	9b03      	ldr	r3, [sp, #12]
 8002c0e:	3307      	adds	r3, #7
 8002c10:	f023 0307 	bic.w	r3, r3, #7
 8002c14:	3308      	adds	r3, #8
 8002c16:	9303      	str	r3, [sp, #12]
 8002c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c1a:	444b      	add	r3, r9
 8002c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c1e:	e750      	b.n	8002ac2 <_vfiprintf_r+0x42>
 8002c20:	fb05 3202 	mla	r2, r5, r2, r3
 8002c24:	2001      	movs	r0, #1
 8002c26:	4688      	mov	r8, r1
 8002c28:	e78a      	b.n	8002b40 <_vfiprintf_r+0xc0>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	250a      	movs	r5, #10
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f108 0801 	add.w	r8, r8, #1
 8002c34:	9305      	str	r3, [sp, #20]
 8002c36:	4640      	mov	r0, r8
 8002c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c3c:	3a30      	subs	r2, #48	; 0x30
 8002c3e:	2a09      	cmp	r2, #9
 8002c40:	d903      	bls.n	8002c4a <_vfiprintf_r+0x1ca>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0c3      	beq.n	8002bce <_vfiprintf_r+0x14e>
 8002c46:	9105      	str	r1, [sp, #20]
 8002c48:	e7c1      	b.n	8002bce <_vfiprintf_r+0x14e>
 8002c4a:	fb05 2101 	mla	r1, r5, r1, r2
 8002c4e:	2301      	movs	r3, #1
 8002c50:	4680      	mov	r8, r0
 8002c52:	e7f0      	b.n	8002c36 <_vfiprintf_r+0x1b6>
 8002c54:	ab03      	add	r3, sp, #12
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	4622      	mov	r2, r4
 8002c5a:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <_vfiprintf_r+0x228>)
 8002c5c:	a904      	add	r1, sp, #16
 8002c5e:	4630      	mov	r0, r6
 8002c60:	f3af 8000 	nop.w
 8002c64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c68:	4681      	mov	r9, r0
 8002c6a:	d1d5      	bne.n	8002c18 <_vfiprintf_r+0x198>
 8002c6c:	89a3      	ldrh	r3, [r4, #12]
 8002c6e:	065b      	lsls	r3, r3, #25
 8002c70:	f53f af7e 	bmi.w	8002b70 <_vfiprintf_r+0xf0>
 8002c74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c76:	e77d      	b.n	8002b74 <_vfiprintf_r+0xf4>
 8002c78:	ab03      	add	r3, sp, #12
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	4622      	mov	r2, r4
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <_vfiprintf_r+0x228>)
 8002c80:	a904      	add	r1, sp, #16
 8002c82:	4630      	mov	r0, r6
 8002c84:	f000 f888 	bl	8002d98 <_printf_i>
 8002c88:	e7ec      	b.n	8002c64 <_vfiprintf_r+0x1e4>
 8002c8a:	bf00      	nop
 8002c8c:	08003338 	.word	0x08003338
 8002c90:	08003382 	.word	0x08003382
 8002c94:	08003358 	.word	0x08003358
 8002c98:	08003318 	.word	0x08003318
 8002c9c:	08003388 	.word	0x08003388
 8002ca0:	0800338c 	.word	0x0800338c
 8002ca4:	00000000 	.word	0x00000000
 8002ca8:	08002a5b 	.word	0x08002a5b

08002cac <_printf_common>:
 8002cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb0:	4691      	mov	r9, r2
 8002cb2:	461f      	mov	r7, r3
 8002cb4:	688a      	ldr	r2, [r1, #8]
 8002cb6:	690b      	ldr	r3, [r1, #16]
 8002cb8:	4606      	mov	r6, r0
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	bfb8      	it	lt
 8002cbe:	4613      	movlt	r3, r2
 8002cc0:	f8c9 3000 	str.w	r3, [r9]
 8002cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cc8:	460c      	mov	r4, r1
 8002cca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cce:	b112      	cbz	r2, 8002cd6 <_printf_common+0x2a>
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f8c9 3000 	str.w	r3, [r9]
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	0699      	lsls	r1, r3, #26
 8002cda:	bf42      	ittt	mi
 8002cdc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ce0:	3302      	addmi	r3, #2
 8002ce2:	f8c9 3000 	strmi.w	r3, [r9]
 8002ce6:	6825      	ldr	r5, [r4, #0]
 8002ce8:	f015 0506 	ands.w	r5, r5, #6
 8002cec:	d107      	bne.n	8002cfe <_printf_common+0x52>
 8002cee:	f104 0a19 	add.w	sl, r4, #25
 8002cf2:	68e3      	ldr	r3, [r4, #12]
 8002cf4:	f8d9 2000 	ldr.w	r2, [r9]
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	42ab      	cmp	r3, r5
 8002cfc:	dc29      	bgt.n	8002d52 <_printf_common+0xa6>
 8002cfe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002d02:	6822      	ldr	r2, [r4, #0]
 8002d04:	3300      	adds	r3, #0
 8002d06:	bf18      	it	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	0692      	lsls	r2, r2, #26
 8002d0c:	d42e      	bmi.n	8002d6c <_printf_common+0xc0>
 8002d0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d12:	4639      	mov	r1, r7
 8002d14:	4630      	mov	r0, r6
 8002d16:	47c0      	blx	r8
 8002d18:	3001      	adds	r0, #1
 8002d1a:	d021      	beq.n	8002d60 <_printf_common+0xb4>
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	68e5      	ldr	r5, [r4, #12]
 8002d20:	f003 0306 	and.w	r3, r3, #6
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	bf18      	it	ne
 8002d28:	2500      	movne	r5, #0
 8002d2a:	f8d9 2000 	ldr.w	r2, [r9]
 8002d2e:	f04f 0900 	mov.w	r9, #0
 8002d32:	bf08      	it	eq
 8002d34:	1aad      	subeq	r5, r5, r2
 8002d36:	68a3      	ldr	r3, [r4, #8]
 8002d38:	6922      	ldr	r2, [r4, #16]
 8002d3a:	bf08      	it	eq
 8002d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d40:	4293      	cmp	r3, r2
 8002d42:	bfc4      	itt	gt
 8002d44:	1a9b      	subgt	r3, r3, r2
 8002d46:	18ed      	addgt	r5, r5, r3
 8002d48:	341a      	adds	r4, #26
 8002d4a:	454d      	cmp	r5, r9
 8002d4c:	d11a      	bne.n	8002d84 <_printf_common+0xd8>
 8002d4e:	2000      	movs	r0, #0
 8002d50:	e008      	b.n	8002d64 <_printf_common+0xb8>
 8002d52:	2301      	movs	r3, #1
 8002d54:	4652      	mov	r2, sl
 8002d56:	4639      	mov	r1, r7
 8002d58:	4630      	mov	r0, r6
 8002d5a:	47c0      	blx	r8
 8002d5c:	3001      	adds	r0, #1
 8002d5e:	d103      	bne.n	8002d68 <_printf_common+0xbc>
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d68:	3501      	adds	r5, #1
 8002d6a:	e7c2      	b.n	8002cf2 <_printf_common+0x46>
 8002d6c:	2030      	movs	r0, #48	; 0x30
 8002d6e:	18e1      	adds	r1, r4, r3
 8002d70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d7a:	4422      	add	r2, r4
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d82:	e7c4      	b.n	8002d0e <_printf_common+0x62>
 8002d84:	2301      	movs	r3, #1
 8002d86:	4622      	mov	r2, r4
 8002d88:	4639      	mov	r1, r7
 8002d8a:	4630      	mov	r0, r6
 8002d8c:	47c0      	blx	r8
 8002d8e:	3001      	adds	r0, #1
 8002d90:	d0e6      	beq.n	8002d60 <_printf_common+0xb4>
 8002d92:	f109 0901 	add.w	r9, r9, #1
 8002d96:	e7d8      	b.n	8002d4a <_printf_common+0x9e>

08002d98 <_printf_i>:
 8002d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002da0:	460c      	mov	r4, r1
 8002da2:	7e09      	ldrb	r1, [r1, #24]
 8002da4:	b085      	sub	sp, #20
 8002da6:	296e      	cmp	r1, #110	; 0x6e
 8002da8:	4617      	mov	r7, r2
 8002daa:	4606      	mov	r6, r0
 8002dac:	4698      	mov	r8, r3
 8002dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002db0:	f000 80b3 	beq.w	8002f1a <_printf_i+0x182>
 8002db4:	d822      	bhi.n	8002dfc <_printf_i+0x64>
 8002db6:	2963      	cmp	r1, #99	; 0x63
 8002db8:	d036      	beq.n	8002e28 <_printf_i+0x90>
 8002dba:	d80a      	bhi.n	8002dd2 <_printf_i+0x3a>
 8002dbc:	2900      	cmp	r1, #0
 8002dbe:	f000 80b9 	beq.w	8002f34 <_printf_i+0x19c>
 8002dc2:	2958      	cmp	r1, #88	; 0x58
 8002dc4:	f000 8083 	beq.w	8002ece <_printf_i+0x136>
 8002dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dcc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002dd0:	e032      	b.n	8002e38 <_printf_i+0xa0>
 8002dd2:	2964      	cmp	r1, #100	; 0x64
 8002dd4:	d001      	beq.n	8002dda <_printf_i+0x42>
 8002dd6:	2969      	cmp	r1, #105	; 0x69
 8002dd8:	d1f6      	bne.n	8002dc8 <_printf_i+0x30>
 8002dda:	6820      	ldr	r0, [r4, #0]
 8002ddc:	6813      	ldr	r3, [r2, #0]
 8002dde:	0605      	lsls	r5, r0, #24
 8002de0:	f103 0104 	add.w	r1, r3, #4
 8002de4:	d52a      	bpl.n	8002e3c <_printf_i+0xa4>
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6011      	str	r1, [r2, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	da03      	bge.n	8002df6 <_printf_i+0x5e>
 8002dee:	222d      	movs	r2, #45	; 0x2d
 8002df0:	425b      	negs	r3, r3
 8002df2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002df6:	486f      	ldr	r0, [pc, #444]	; (8002fb4 <_printf_i+0x21c>)
 8002df8:	220a      	movs	r2, #10
 8002dfa:	e039      	b.n	8002e70 <_printf_i+0xd8>
 8002dfc:	2973      	cmp	r1, #115	; 0x73
 8002dfe:	f000 809d 	beq.w	8002f3c <_printf_i+0x1a4>
 8002e02:	d808      	bhi.n	8002e16 <_printf_i+0x7e>
 8002e04:	296f      	cmp	r1, #111	; 0x6f
 8002e06:	d020      	beq.n	8002e4a <_printf_i+0xb2>
 8002e08:	2970      	cmp	r1, #112	; 0x70
 8002e0a:	d1dd      	bne.n	8002dc8 <_printf_i+0x30>
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	f043 0320 	orr.w	r3, r3, #32
 8002e12:	6023      	str	r3, [r4, #0]
 8002e14:	e003      	b.n	8002e1e <_printf_i+0x86>
 8002e16:	2975      	cmp	r1, #117	; 0x75
 8002e18:	d017      	beq.n	8002e4a <_printf_i+0xb2>
 8002e1a:	2978      	cmp	r1, #120	; 0x78
 8002e1c:	d1d4      	bne.n	8002dc8 <_printf_i+0x30>
 8002e1e:	2378      	movs	r3, #120	; 0x78
 8002e20:	4865      	ldr	r0, [pc, #404]	; (8002fb8 <_printf_i+0x220>)
 8002e22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e26:	e055      	b.n	8002ed4 <_printf_i+0x13c>
 8002e28:	6813      	ldr	r3, [r2, #0]
 8002e2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e2e:	1d19      	adds	r1, r3, #4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6011      	str	r1, [r2, #0]
 8002e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e08c      	b.n	8002f56 <_printf_i+0x1be>
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e42:	6011      	str	r1, [r2, #0]
 8002e44:	bf18      	it	ne
 8002e46:	b21b      	sxthne	r3, r3
 8002e48:	e7cf      	b.n	8002dea <_printf_i+0x52>
 8002e4a:	6813      	ldr	r3, [r2, #0]
 8002e4c:	6825      	ldr	r5, [r4, #0]
 8002e4e:	1d18      	adds	r0, r3, #4
 8002e50:	6010      	str	r0, [r2, #0]
 8002e52:	0628      	lsls	r0, r5, #24
 8002e54:	d501      	bpl.n	8002e5a <_printf_i+0xc2>
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	e002      	b.n	8002e60 <_printf_i+0xc8>
 8002e5a:	0668      	lsls	r0, r5, #25
 8002e5c:	d5fb      	bpl.n	8002e56 <_printf_i+0xbe>
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	296f      	cmp	r1, #111	; 0x6f
 8002e62:	bf14      	ite	ne
 8002e64:	220a      	movne	r2, #10
 8002e66:	2208      	moveq	r2, #8
 8002e68:	4852      	ldr	r0, [pc, #328]	; (8002fb4 <_printf_i+0x21c>)
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e70:	6865      	ldr	r5, [r4, #4]
 8002e72:	2d00      	cmp	r5, #0
 8002e74:	60a5      	str	r5, [r4, #8]
 8002e76:	f2c0 8095 	blt.w	8002fa4 <_printf_i+0x20c>
 8002e7a:	6821      	ldr	r1, [r4, #0]
 8002e7c:	f021 0104 	bic.w	r1, r1, #4
 8002e80:	6021      	str	r1, [r4, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d13d      	bne.n	8002f02 <_printf_i+0x16a>
 8002e86:	2d00      	cmp	r5, #0
 8002e88:	f040 808e 	bne.w	8002fa8 <_printf_i+0x210>
 8002e8c:	4665      	mov	r5, ip
 8002e8e:	2a08      	cmp	r2, #8
 8002e90:	d10b      	bne.n	8002eaa <_printf_i+0x112>
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	07db      	lsls	r3, r3, #31
 8002e96:	d508      	bpl.n	8002eaa <_printf_i+0x112>
 8002e98:	6923      	ldr	r3, [r4, #16]
 8002e9a:	6862      	ldr	r2, [r4, #4]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	bfde      	ittt	le
 8002ea0:	2330      	movle	r3, #48	; 0x30
 8002ea2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ea6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002eaa:	ebac 0305 	sub.w	r3, ip, r5
 8002eae:	6123      	str	r3, [r4, #16]
 8002eb0:	f8cd 8000 	str.w	r8, [sp]
 8002eb4:	463b      	mov	r3, r7
 8002eb6:	aa03      	add	r2, sp, #12
 8002eb8:	4621      	mov	r1, r4
 8002eba:	4630      	mov	r0, r6
 8002ebc:	f7ff fef6 	bl	8002cac <_printf_common>
 8002ec0:	3001      	adds	r0, #1
 8002ec2:	d14d      	bne.n	8002f60 <_printf_i+0x1c8>
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec8:	b005      	add	sp, #20
 8002eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ece:	4839      	ldr	r0, [pc, #228]	; (8002fb4 <_printf_i+0x21c>)
 8002ed0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002ed4:	6813      	ldr	r3, [r2, #0]
 8002ed6:	6821      	ldr	r1, [r4, #0]
 8002ed8:	1d1d      	adds	r5, r3, #4
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6015      	str	r5, [r2, #0]
 8002ede:	060a      	lsls	r2, r1, #24
 8002ee0:	d50b      	bpl.n	8002efa <_printf_i+0x162>
 8002ee2:	07ca      	lsls	r2, r1, #31
 8002ee4:	bf44      	itt	mi
 8002ee6:	f041 0120 	orrmi.w	r1, r1, #32
 8002eea:	6021      	strmi	r1, [r4, #0]
 8002eec:	b91b      	cbnz	r3, 8002ef6 <_printf_i+0x15e>
 8002eee:	6822      	ldr	r2, [r4, #0]
 8002ef0:	f022 0220 	bic.w	r2, r2, #32
 8002ef4:	6022      	str	r2, [r4, #0]
 8002ef6:	2210      	movs	r2, #16
 8002ef8:	e7b7      	b.n	8002e6a <_printf_i+0xd2>
 8002efa:	064d      	lsls	r5, r1, #25
 8002efc:	bf48      	it	mi
 8002efe:	b29b      	uxthmi	r3, r3
 8002f00:	e7ef      	b.n	8002ee2 <_printf_i+0x14a>
 8002f02:	4665      	mov	r5, ip
 8002f04:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f08:	fb02 3311 	mls	r3, r2, r1, r3
 8002f0c:	5cc3      	ldrb	r3, [r0, r3]
 8002f0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002f12:	460b      	mov	r3, r1
 8002f14:	2900      	cmp	r1, #0
 8002f16:	d1f5      	bne.n	8002f04 <_printf_i+0x16c>
 8002f18:	e7b9      	b.n	8002e8e <_printf_i+0xf6>
 8002f1a:	6813      	ldr	r3, [r2, #0]
 8002f1c:	6825      	ldr	r5, [r4, #0]
 8002f1e:	1d18      	adds	r0, r3, #4
 8002f20:	6961      	ldr	r1, [r4, #20]
 8002f22:	6010      	str	r0, [r2, #0]
 8002f24:	0628      	lsls	r0, r5, #24
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	d501      	bpl.n	8002f2e <_printf_i+0x196>
 8002f2a:	6019      	str	r1, [r3, #0]
 8002f2c:	e002      	b.n	8002f34 <_printf_i+0x19c>
 8002f2e:	066a      	lsls	r2, r5, #25
 8002f30:	d5fb      	bpl.n	8002f2a <_printf_i+0x192>
 8002f32:	8019      	strh	r1, [r3, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	4665      	mov	r5, ip
 8002f38:	6123      	str	r3, [r4, #16]
 8002f3a:	e7b9      	b.n	8002eb0 <_printf_i+0x118>
 8002f3c:	6813      	ldr	r3, [r2, #0]
 8002f3e:	1d19      	adds	r1, r3, #4
 8002f40:	6011      	str	r1, [r2, #0]
 8002f42:	681d      	ldr	r5, [r3, #0]
 8002f44:	6862      	ldr	r2, [r4, #4]
 8002f46:	2100      	movs	r1, #0
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f000 f8ed 	bl	8003128 <memchr>
 8002f4e:	b108      	cbz	r0, 8002f54 <_printf_i+0x1bc>
 8002f50:	1b40      	subs	r0, r0, r5
 8002f52:	6060      	str	r0, [r4, #4]
 8002f54:	6863      	ldr	r3, [r4, #4]
 8002f56:	6123      	str	r3, [r4, #16]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f5e:	e7a7      	b.n	8002eb0 <_printf_i+0x118>
 8002f60:	6923      	ldr	r3, [r4, #16]
 8002f62:	462a      	mov	r2, r5
 8002f64:	4639      	mov	r1, r7
 8002f66:	4630      	mov	r0, r6
 8002f68:	47c0      	blx	r8
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	d0aa      	beq.n	8002ec4 <_printf_i+0x12c>
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	079b      	lsls	r3, r3, #30
 8002f72:	d413      	bmi.n	8002f9c <_printf_i+0x204>
 8002f74:	68e0      	ldr	r0, [r4, #12]
 8002f76:	9b03      	ldr	r3, [sp, #12]
 8002f78:	4298      	cmp	r0, r3
 8002f7a:	bfb8      	it	lt
 8002f7c:	4618      	movlt	r0, r3
 8002f7e:	e7a3      	b.n	8002ec8 <_printf_i+0x130>
 8002f80:	2301      	movs	r3, #1
 8002f82:	464a      	mov	r2, r9
 8002f84:	4639      	mov	r1, r7
 8002f86:	4630      	mov	r0, r6
 8002f88:	47c0      	blx	r8
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	d09a      	beq.n	8002ec4 <_printf_i+0x12c>
 8002f8e:	3501      	adds	r5, #1
 8002f90:	68e3      	ldr	r3, [r4, #12]
 8002f92:	9a03      	ldr	r2, [sp, #12]
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	42ab      	cmp	r3, r5
 8002f98:	dcf2      	bgt.n	8002f80 <_printf_i+0x1e8>
 8002f9a:	e7eb      	b.n	8002f74 <_printf_i+0x1dc>
 8002f9c:	2500      	movs	r5, #0
 8002f9e:	f104 0919 	add.w	r9, r4, #25
 8002fa2:	e7f5      	b.n	8002f90 <_printf_i+0x1f8>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1ac      	bne.n	8002f02 <_printf_i+0x16a>
 8002fa8:	7803      	ldrb	r3, [r0, #0]
 8002faa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fb2:	e76c      	b.n	8002e8e <_printf_i+0xf6>
 8002fb4:	08003393 	.word	0x08003393
 8002fb8:	080033a4 	.word	0x080033a4

08002fbc <_sbrk_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	4c05      	ldr	r4, [pc, #20]	; (8002fd8 <_sbrk_r+0x1c>)
 8002fc2:	4605      	mov	r5, r0
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	6023      	str	r3, [r4, #0]
 8002fc8:	f7fd fc32 	bl	8000830 <_sbrk>
 8002fcc:	1c43      	adds	r3, r0, #1
 8002fce:	d102      	bne.n	8002fd6 <_sbrk_r+0x1a>
 8002fd0:	6823      	ldr	r3, [r4, #0]
 8002fd2:	b103      	cbz	r3, 8002fd6 <_sbrk_r+0x1a>
 8002fd4:	602b      	str	r3, [r5, #0]
 8002fd6:	bd38      	pop	{r3, r4, r5, pc}
 8002fd8:	20000b18 	.word	0x20000b18

08002fdc <__sread>:
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	460c      	mov	r4, r1
 8002fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fe4:	f000 f8b0 	bl	8003148 <_read_r>
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	bfab      	itete	ge
 8002fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002fee:	89a3      	ldrhlt	r3, [r4, #12]
 8002ff0:	181b      	addge	r3, r3, r0
 8002ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ff6:	bfac      	ite	ge
 8002ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002ffa:	81a3      	strhlt	r3, [r4, #12]
 8002ffc:	bd10      	pop	{r4, pc}

08002ffe <__swrite>:
 8002ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003002:	461f      	mov	r7, r3
 8003004:	898b      	ldrh	r3, [r1, #12]
 8003006:	4605      	mov	r5, r0
 8003008:	05db      	lsls	r3, r3, #23
 800300a:	460c      	mov	r4, r1
 800300c:	4616      	mov	r6, r2
 800300e:	d505      	bpl.n	800301c <__swrite+0x1e>
 8003010:	2302      	movs	r3, #2
 8003012:	2200      	movs	r2, #0
 8003014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003018:	f000 f874 	bl	8003104 <_lseek_r>
 800301c:	89a3      	ldrh	r3, [r4, #12]
 800301e:	4632      	mov	r2, r6
 8003020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003024:	81a3      	strh	r3, [r4, #12]
 8003026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800302a:	463b      	mov	r3, r7
 800302c:	4628      	mov	r0, r5
 800302e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003032:	f000 b823 	b.w	800307c <_write_r>

08003036 <__sseek>:
 8003036:	b510      	push	{r4, lr}
 8003038:	460c      	mov	r4, r1
 800303a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800303e:	f000 f861 	bl	8003104 <_lseek_r>
 8003042:	1c43      	adds	r3, r0, #1
 8003044:	89a3      	ldrh	r3, [r4, #12]
 8003046:	bf15      	itete	ne
 8003048:	6560      	strne	r0, [r4, #84]	; 0x54
 800304a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800304e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003052:	81a3      	strheq	r3, [r4, #12]
 8003054:	bf18      	it	ne
 8003056:	81a3      	strhne	r3, [r4, #12]
 8003058:	bd10      	pop	{r4, pc}

0800305a <__sclose>:
 800305a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800305e:	f000 b81f 	b.w	80030a0 <_close_r>

08003062 <__ascii_wctomb>:
 8003062:	b149      	cbz	r1, 8003078 <__ascii_wctomb+0x16>
 8003064:	2aff      	cmp	r2, #255	; 0xff
 8003066:	bf8b      	itete	hi
 8003068:	238a      	movhi	r3, #138	; 0x8a
 800306a:	700a      	strbls	r2, [r1, #0]
 800306c:	6003      	strhi	r3, [r0, #0]
 800306e:	2001      	movls	r0, #1
 8003070:	bf88      	it	hi
 8003072:	f04f 30ff 	movhi.w	r0, #4294967295
 8003076:	4770      	bx	lr
 8003078:	4608      	mov	r0, r1
 800307a:	4770      	bx	lr

0800307c <_write_r>:
 800307c:	b538      	push	{r3, r4, r5, lr}
 800307e:	4605      	mov	r5, r0
 8003080:	4608      	mov	r0, r1
 8003082:	4611      	mov	r1, r2
 8003084:	2200      	movs	r2, #0
 8003086:	4c05      	ldr	r4, [pc, #20]	; (800309c <_write_r+0x20>)
 8003088:	6022      	str	r2, [r4, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	f7fd fb83 	bl	8000796 <_write>
 8003090:	1c43      	adds	r3, r0, #1
 8003092:	d102      	bne.n	800309a <_write_r+0x1e>
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	b103      	cbz	r3, 800309a <_write_r+0x1e>
 8003098:	602b      	str	r3, [r5, #0]
 800309a:	bd38      	pop	{r3, r4, r5, pc}
 800309c:	20000b18 	.word	0x20000b18

080030a0 <_close_r>:
 80030a0:	b538      	push	{r3, r4, r5, lr}
 80030a2:	2300      	movs	r3, #0
 80030a4:	4c05      	ldr	r4, [pc, #20]	; (80030bc <_close_r+0x1c>)
 80030a6:	4605      	mov	r5, r0
 80030a8:	4608      	mov	r0, r1
 80030aa:	6023      	str	r3, [r4, #0]
 80030ac:	f7fd fb8f 	bl	80007ce <_close>
 80030b0:	1c43      	adds	r3, r0, #1
 80030b2:	d102      	bne.n	80030ba <_close_r+0x1a>
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	b103      	cbz	r3, 80030ba <_close_r+0x1a>
 80030b8:	602b      	str	r3, [r5, #0]
 80030ba:	bd38      	pop	{r3, r4, r5, pc}
 80030bc:	20000b18 	.word	0x20000b18

080030c0 <_fstat_r>:
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	2300      	movs	r3, #0
 80030c4:	4c06      	ldr	r4, [pc, #24]	; (80030e0 <_fstat_r+0x20>)
 80030c6:	4605      	mov	r5, r0
 80030c8:	4608      	mov	r0, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	6023      	str	r3, [r4, #0]
 80030ce:	f7fd fb89 	bl	80007e4 <_fstat>
 80030d2:	1c43      	adds	r3, r0, #1
 80030d4:	d102      	bne.n	80030dc <_fstat_r+0x1c>
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	b103      	cbz	r3, 80030dc <_fstat_r+0x1c>
 80030da:	602b      	str	r3, [r5, #0]
 80030dc:	bd38      	pop	{r3, r4, r5, pc}
 80030de:	bf00      	nop
 80030e0:	20000b18 	.word	0x20000b18

080030e4 <_isatty_r>:
 80030e4:	b538      	push	{r3, r4, r5, lr}
 80030e6:	2300      	movs	r3, #0
 80030e8:	4c05      	ldr	r4, [pc, #20]	; (8003100 <_isatty_r+0x1c>)
 80030ea:	4605      	mov	r5, r0
 80030ec:	4608      	mov	r0, r1
 80030ee:	6023      	str	r3, [r4, #0]
 80030f0:	f7fd fb87 	bl	8000802 <_isatty>
 80030f4:	1c43      	adds	r3, r0, #1
 80030f6:	d102      	bne.n	80030fe <_isatty_r+0x1a>
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	b103      	cbz	r3, 80030fe <_isatty_r+0x1a>
 80030fc:	602b      	str	r3, [r5, #0]
 80030fe:	bd38      	pop	{r3, r4, r5, pc}
 8003100:	20000b18 	.word	0x20000b18

08003104 <_lseek_r>:
 8003104:	b538      	push	{r3, r4, r5, lr}
 8003106:	4605      	mov	r5, r0
 8003108:	4608      	mov	r0, r1
 800310a:	4611      	mov	r1, r2
 800310c:	2200      	movs	r2, #0
 800310e:	4c05      	ldr	r4, [pc, #20]	; (8003124 <_lseek_r+0x20>)
 8003110:	6022      	str	r2, [r4, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	f7fd fb7f 	bl	8000816 <_lseek>
 8003118:	1c43      	adds	r3, r0, #1
 800311a:	d102      	bne.n	8003122 <_lseek_r+0x1e>
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	b103      	cbz	r3, 8003122 <_lseek_r+0x1e>
 8003120:	602b      	str	r3, [r5, #0]
 8003122:	bd38      	pop	{r3, r4, r5, pc}
 8003124:	20000b18 	.word	0x20000b18

08003128 <memchr>:
 8003128:	b510      	push	{r4, lr}
 800312a:	b2c9      	uxtb	r1, r1
 800312c:	4402      	add	r2, r0
 800312e:	4290      	cmp	r0, r2
 8003130:	4603      	mov	r3, r0
 8003132:	d101      	bne.n	8003138 <memchr+0x10>
 8003134:	2300      	movs	r3, #0
 8003136:	e003      	b.n	8003140 <memchr+0x18>
 8003138:	781c      	ldrb	r4, [r3, #0]
 800313a:	3001      	adds	r0, #1
 800313c:	428c      	cmp	r4, r1
 800313e:	d1f6      	bne.n	800312e <memchr+0x6>
 8003140:	4618      	mov	r0, r3
 8003142:	bd10      	pop	{r4, pc}

08003144 <__malloc_lock>:
 8003144:	4770      	bx	lr

08003146 <__malloc_unlock>:
 8003146:	4770      	bx	lr

08003148 <_read_r>:
 8003148:	b538      	push	{r3, r4, r5, lr}
 800314a:	4605      	mov	r5, r0
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	2200      	movs	r2, #0
 8003152:	4c05      	ldr	r4, [pc, #20]	; (8003168 <_read_r+0x20>)
 8003154:	6022      	str	r2, [r4, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	f7fd fb00 	bl	800075c <_read>
 800315c:	1c43      	adds	r3, r0, #1
 800315e:	d102      	bne.n	8003166 <_read_r+0x1e>
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	b103      	cbz	r3, 8003166 <_read_r+0x1e>
 8003164:	602b      	str	r3, [r5, #0]
 8003166:	bd38      	pop	{r3, r4, r5, pc}
 8003168:	20000b18 	.word	0x20000b18

0800316c <_init>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr

08003178 <_fini>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	bf00      	nop
 800317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317e:	bc08      	pop	{r3}
 8003180:	469e      	mov	lr, r3
 8003182:	4770      	bx	lr
